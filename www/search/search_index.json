{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Volver al inicio . Jolav \u00a9 2024 - Ver el c\u00f3digo en GitHub MENU","title":"Menu"},{"location":"#menu","text":"","title":"MENU"},{"location":"css/","text":"CSS SNIPPETS Alinear imagenes .imgV { vertical-align: middle; } .imgH { display: flex; margin: 0 auto; max-width: 100%; } Enlaces animados y sin subrayar a, a:visited { text-decoration: none; color: #375EAB; } a:hover { color: lightblue; } div:hover { transform: scale(1.2); } Desactivar enlace a.notYet { pointer-events: none; text-decoration: line-through; color: #404040; } hr gradual hr { margin: 10px 10% 10px 10%; border: 0; height: 1px; background: #333; background-image: linear-gradient(to right, #ccc, #888, #ccc); } Problema en Chrome con la lista de puntos ul { text-align: center; /* para evitar los puntos */ display: inline; /* poner los numeros en Chrome de listas ordenadas dentro del texto*/ list-style-position: inside; list-style-type: none; } Fijar pie al final de pantalla html { height: 100%; box-sizing: border-box; } *, *:before, *:after { box-sizing: inherit; } body { position: relative; margin: 0 auto; /*padding-bottom: 6rem;*/ min-height: 97%; } .footer { position: absolute; right: 0; bottom: 0; left: 0; padding: 1rem; background-color: lightblue; text-align: center; } Tama\u00f1o fuente como navegador html { font-size:16px; } /* Fijando el css en 16px y usando em despues conseguiremos resultados consistentes en firefox y chrome */ body { font-size:0.90em; } CSS3 INTRODUCCION Enlaces a css Externo <head> <title>CSS Externo</title> <link href=\"css/estilo.css\" type=\"text/css\" rel=\"stylesheet\" /> </head> Si hay multiples hojas de estilo : <link> uno para cada hoja de estilo En la hoja de estilo que se enlaza incluir @import url(\"estilo2.css);\" Interno - NO USAR <head> <title>CSS Interno</title> <style type=\"text/css\"> body { font-family: calibri; background-color: green;} h1 { color: black;} </style> </head> Selectores Selectores CSS Selectores de atributos Cascada y herencia Cascada - Ultima Regla: la ultima regla aplicada es la que manda - !important a\u00f1adiendo esto despues de la regla asi toma prioridad color: blue !important; - Especificidad : prevalecera la regla del selector que sea mas especifico h3 es mas especifico que * p otro es mas especifico que p p#intro es mas especifico que p Herencia Casi todos los selectores anidados dentro de otros heredan las propiedades asignadas al selector exterior. Por ejemplo un color en body tambien se aplicara al texto de un parrafo. Hay excepciones evidentes como margin-top (un parrafo no tiene el mismo margen superior que el body del documento). Puedes forzar heredar valores de propiedades de los padres usando inherit como valor de la propiedad body { padding: 20px;} .pagina { padding: inherit;} COLOR color - h1 { color: DarkCyan;} /* color name */ h2 { color: #ee3e80;} /* hex code */ p { color: rgb(100,100,90);} /* rgb value */ background color - body { background-color: rgb(150,150,150); } h1 { background-color: DarkCyan; } h2 { background-color: ##ee3e80: } p { background-color: red; } opacity , rgba - p.one { background-color: rgb(0,0,0); opacity: 0.5;} p.two { background-color: rgb(0,0,0); background-color: rgba(0,0,0,0.5);} TEXTO cursor - Controla el tipo de cursor del raton que se muestra auto|crosshair|default|pointer|move|text|wait|help|url(\"cursor.png\") a { cursor: move;} font-family - Familias : serif , sans-serif , cursive , fantasy y monospace font-family: Arial, Verdana, sans-serif font-size - Pixel: Por defecto en los navegadores el texto es de 16px Porcentaje : porcentaje sobre los 16px estandar, p.ej 75% es 12px em : unidad equivalente a la anchura de la m font-face - @font-face { font-family: 'PT Sans'; src: url('_public/fonts/PTSans.ttf') ; font-display: fallback; } @font-face { font-family: 'ChunkFiveRegular'; src: url('fonts/chunkfive.eot'); src: url('fonts/chunkfive.eot?#iefix') format('embedded-opentype'), url('fonts/chunkfive.woff') format('woff'), url('fonts/chunkfive.ttf') format('truetype'), url('fonts/chunkfive.svg#ChunkFiveRegular') format('svg');} font-weight - normal|bold font-style - normal|italic|oblique text-transform - uppercase : convierte el texto a mayusculas lowercase : convierte el texto a minusculas capitalize : pone mayusculas la primera letra de cada palabra h1 { text-transform: uppercase;} text-decoration - none : elimina cualquier decoracion del texto underline : subraya el texto overline : coloca una linea por encima del texto line-through : linea tachando el texto blink : hace que el texto brille y deje brillar a { text-decoration: none;} line-height - distancia entre lineas p { line-height: 1.4em; } letter-spacing , word-spacing - distancia entre letras, distancia entre palabras, por defecto es 0.25em h1, h2 { text-transform: uppercase; letter-spacing: 0.2em; } .credits { font-weight: bold; word-spacing: 1em; } text-align - left : el texto se alinea a la izquierda right : el texto se alinea a la derecha center : el texto se centra justify : Cada linea excepto la ultima ocupa toda la anchura disponible h1 { text-align: left; } vertical-align - Usada con elementos en linea como <img> <em> <strong> y es muy similar al atributo align de <img> Valores : baseline , sub , super , top , text-top , middle , bottom , text-bottom #six-months { vertical-align: text-top;} #one-year { vertical-align: baseline;} #two-years { vertical-align: text-bottom;} text-indent - indenta el texto h2 { text-indent: 20px; } text-shadow - distancia a izda o dcha de la sombra distancia arriba o abajo de la sombra (opcional) cantidad de difuminado de la sombra color de la sombra p { text-shadow: 2px 2px 1px #222222} :first-letter , :first-line (pseudo-elementos) - Para especificar diferentes valores a la primera letra o primera linea del texto p.intro:first-letter { font-size: 200%;} p.intro:first-line { font-weight: bold;} :link , :visited (pseudo-clases) - Los navegadores muestran los enlaces en azul y subrayados por defecto y cambian el color cuando han sido visitados :link : para poner estilos a enlaces no visitados :visited : para poner estilos a enlaces visitados a:link { color: deeppink; text-decoration: none;} a:visited { color: black;} a:hover { color: deeppink; text-decoration: underline;} a:active { color: darkcyan;} :hover , :active , :focus (pseudo-clases) - :hover : se aplica cuando el raton esta encima (no funciona en tactiles) :active : se aplica cuando se pulsa algo :focus : se aplica cuando el elemento tiene el foco cajetinTexto { padding: 6px 12px 6px 12px; border: 1px solid #665544; color: #ffffff;} boton.submit:hover { background-color: #665544;} boton.submit:active { background-color: chocolate;} cajetinTexto.text { color: #cccccc;} cajetinTexto.text:focus { color: #665544;} BOXES Dimensiones width , height - Por defecto las cajas tienen el tama\u00f1o justo para contener a su elemento. Podemos establecer nosotros ese tama\u00f1o usando pixeles , o porcentajes relativos a la ventana del navegador o a la caja en que ya esta si esta dentro de otra caja, o ems div.box { height: 300px; width: 300px; background-color: #bbbbaa;} min-width , max-width - Minimo y maximo anchura que una caja de un elemento puede tener min-height , max-height - Minimo y maximo anchura que una caja de un elemento puede tener overflow - Indica como actuar si el contenido dentro de la caja es mayor que la caja. hidden : el contenido extra que no cabe sencillamente se esconde scroll : aparece un scroll para acceder a ese contenido extra p.one { overflow: hidden;} p.two { overflow: scroll;} Visibilidad display - Permite convertir un elemento en linea en un bloque o al reves. Tambien vale para esconder un elemento en la pagina inline : convierte un elemento de bloque en un elemento en linea block : convierte un elemento en linea en un elemento de bloque inline-block : permite a un elemento de bloque fluir como un elemento en linea pero manteniendo las caracteristicas de un elemento de bloque none : esconde el elemento de la pagina li { display: inline; margin-right: 10px;} li.coming-soon { display: none;} visibility - Permite esconder cajas pero deja un espacio donde se supone que esta hidden : esconde el elemento visible : muestra el elemento li.coming-soon { visibility: hidden;} box-shadow - distancia a izda o dcha de la sombra distancia arriba o abajo de la sombra (opcional) cantidad de difuminado del borde. Con cero la sombra es una linea solida Extension de la sombra, positiva hacia fuera, negativa hacia dentro p { box-shadow: 2px 2px 1px 5px #777777} Bordes border-padding-margin - border-width - espesor de la linea de borde thin|medium|thick . border-top-width , border-right-width , border-bottom-width border-left-width en orden de las agujas del reloj empezando por top p.one { border-width: 2px;} p.two { border-width: thick;} p.three { border-width: 1px 4px 12px 4px;} border-style - define el tipo de borde solid|dotted|dashed|double|groove|ridge|inset|outset|hidden/none . border-top-style ... - Puedes elegir bordes individuales p.one {border-style: dashed;} border-color - elegir color para el borde border-top-color ... - Tambien se puede elegir el color para cada borde p.one { border-color: #0088dd;} p.two { border-color: #bbbbaa blue orange #0088dd;} border-image - Permite usar imagenes como bordes de las cajas border-radius - border-top-right-radius - border-bottom-right-radius - border-bottom-left-radius - border-top-left-radius - p { border-radius: 5px, 10px, 5px, 10px; } p.one { border-radius: 80px 50px; } p.two { border-top-left-radius: 80px 50px;} Margenes margin - Espacio entre el borde y la caja. Lo normal en px aunque tambien se puede en ems o porcentajes. Si dos cajas se solapan usaremos el mayor de los dos margenes y el otro no Tambien individualmente para cada lado margin-top, margin-right ... p.example1 { margin: 10px 2px 10px 5px; p.example2 { margin: 10px;} padding - Espacio entre el borde y el contenido. Lo normal es en px pero se pueden usar ems o porcentajes (% de la ventana del navegador o de la caja donde este contenido el elemento). Existen tambien individualmente para cada lado padding-top, padding-right ... p.example1 { padding: 10px 2px 10px 5px; p.example2 { padding: 10px;} centrando contenido - Para centrar una caja en la pagina ( o centrarla dentro del elemento en el que esta Establecer una width para la caja (sino tomara toda la anchura de la pagina) Poner margin-left: auto y margin-rigth: auto p { width: 300px; padding: 50px; border: 20px solid #0088dd;} p.example { margin: 10px auto 10px auto; LISTAS list-style - Permite declaras las siguientes opciones type, imagen y position en cualquier orden. ul { list-style: inside circle; } list-style-type - Para poner el estilo al marcador de las listas - Listas ordenadas decimal|decimal-leading-zero|lower-alpha|upper-alpha|lower-roman|upper-roman - Listas desordenadas none|disc|circle|square ol { list-style-type: lower-roman;} list-style-imagen - Usar una imagen como marcador de listas. Se puede usar en <ul> y <li> ul { list-style-image: url(\"images/star.png\");} list-style-position - Por defecto el marcador de lista aparece outside del indentado de la lista. Podemos cambiarlo por inside para que el marcador entre en la caja del texto el cual esta indentado ul.t1 { list-style-position: outside;} ul.t2 { list-style-position: inside;} TABLAS Consejos: Diferenciar cabeceras en negrita, mayusculas o algo mas Oscurecer filas alternativas Columnas con numeros alinearlos a la derecha width : poner la anchura de la tabla <table> padding : de las celdas <th> y <td> text-transform : en las cabeceras <th> letter-spacing, font-size : para diferenciar el texto de las cabeceras <th> border-top, border-bottom : para fiferenciar los bordes de la cabecera <th> text-align : para alinear el texto de las celdas a conveniencia <th> <td> background-color : cambiar el color de fondo alternando filas :hover : iluminar la fila con el puntero encima body { font-family: Arial, Verdana, sans-serif; color: #111111;} table { width: 600px;} th, td { padding: 7px 10px 10px 10px;} th { text-transform: uppercase; letter-spacing: 0.1em; font-size: 90%; border-bottom: 2px solid #111111; border-top: 1px solid #999; text-align: left;} tr.even { background-color: #efefef;} tr:hover { background-color: #c3e6e5;} .money { text-align: right;} empty-cells - show|hide|inherit indicar en las celdas vacias si mostramos los bordes o no o hereda el comportamiento de la tabla que le contiene table.one { empty-cells: show;} table.two { empty-cells: hide;} border-spacing ajusta la distancia entre celdas adyacentes, por defecto es minima. Se pone en px. Si pones dos valores son la separacion horizontal y la vertical border-collapse los bordes se juntan en un solo borde table.one { border-spacing: 5px 15px;} table.two { border-collapse: collapse;} FORMULARIOS Dar estilo a entradas de texto input { font-size: 120%; // tama\u00f1o del texto color: #5a5854; // color del texto background-color: #f2f2f2; // color del fondo de la entrada border: 1px solid #bdbdbd; // marca los bordes de la entrada border-radius: 5px; // redondea esos bordes padding: 5px 5px 5px 30px; background-repeat: no-repeat; background-position: 8px 9px; display: block; margin-bottom: 10px;} input:focus { // cambia el color de fondo background-color: #ffffff; border: 1px solid #b1e1e4;} input#email { background-image: url(\"images/email.png\");} input#twitter { background-image: url(\"images/twitter.png\");} input#web { background-image: url(\"images/web.png\");} Dar estilo a botones submit input#submit { color: #444444; // color del texto del boton text-shadow: 0px 1px 1px #ffffff; // apariencia 3d border-bottom: 2px solid #b2b2b2; // para el borde del boton background-color: #b9e4e3; background: -webkit-gradient(linear, left top, left bottom, from(#beeae9), to(#a8cfce)); background: -moz-linear-gradient(top, #beeae9, #a8cfce); background: -o-linear-gradient(top, #beeae9, #a8cfce); background: -ms-linear-gradient(top, #beeae9, #a8cfce);} input#submit:hover { // cambia la apariencia del boton color: #333333; // al pasar por encima border: 1px solid #a4a4a4; border-top: 2px solid #b2b2b2; background-color: #a0dbc4; background: -webkit-gradient(linear, left top, left bottom, from(#a8cfce), to(#beeae9)); background: -moz-linear-gradient(top, #a8cfce, #beeae9); background: -o-linear-gradient(top, #a8cfce, #beeae9); background: -ms-linear-gradient(top, #a8cfce, #beeae9);} Poner estilo a fieldsets y legends fieldset { width: 350px; // controlar el tama\u00f1o del form border: 1px solid #dcdcdc; border-radius: 10px; padding: 20px; text-align: right;} legend { background-color: #efefef; // color de fondo border: 1px solid #dcdcdc; border-radius: 10px; padding: 10px 20px; text-align: left; text-transform: uppercase;} Alinear formularios div { border-bottom: 1px solid #efefef; margin: 10px; padding-bottom: 10px; width: 260px;} .title { float: left; width: 100px; text-align: right; padding-right: 10px;} .radio-buttons label { float: none;} .submit { text-align: right;} LAYOUT Tipos posicionamiento position: static normal o estatico es el usado por defecto. Los elementos de bloque se ponen uno a continuacion de otro ocupando todo el ancho de la ventana del navegador salvo que lo limite con `width. position: relative - Los elementos se posicionan en relacion a donde deberian estar en posicion normal. Los desplazamos dando valor a top, bottom, left, right . Estos valores se ponen en px, porcentajes o ems p.example { position: relative; top: 10px; left: 100px;} position: absolute - El elemento se posiciona de forma absolita respecto a su elemento contenedor y el resto de elementos de la pagina le ignoran h1 { position: absolute; top: 0px; left: 500px; width: 250px;} position: fixed - Como el absoluto pero el elemento ahora es inamovible, su posicion permanece igual independiente del resto de elemntos e incluso si se sube o baja en la ventana del navegador. Util para hacer menus fijos por ejemplo en la parte superior de la ventana h1 { position: fixed; top: 0px; left: 50px; padding: 10px; margin: 0px; width: 100%; background-color: #efefef;} position: inherit , hereda la posicion del padre float: left|right - Desplaza los elementos todo lo que puede hacia la dcha o izda segun la propiedad float . Cualquier otro elemento dentro del elemento contenedor fluira alrededor del elemento que flota blockquote { float: right; width: 275px; font-size: 130%; font-style: italic; font-family: Georgia, Times, serif; margin: 0px 0px 10px 10px; padding: 10px; border-top: 1px solid #665544; border-bottom: 1px solid #665544;} propiedades de apoyo clear: left|right|both|none - indica que ningun otro elemento del mismo contenedot debe tocar el lado indicado de ese elemento .clear { clear: left;} overflow: auto; width:100% - Si todos los elemento de un contenedor son flotantes puede hacer problemas en ciertos navegadores a la hora de mostrar los bordes div { border: 1px solid #665544; overflow: auto; width: 100%;} multicolumna - Crear dise\u00f1os multicolumna con floats. Usar un <div> para cada columna y con las siguientes propiedades width , float y margin para cerrar un hueco entre las columnas z-index - Al usar posicionamiento relativo, fijo o absoluto los elementos se pueden solapar. Si es asi el ultimo que aparece en el codigo HTML es el que se ve. Para controlar eso esta la propiedad z-index , se ve el elemento con el mayor valor de esa propiedad h1 { position: fixed; z-index: 10;} Tipos de Layout Anchura fija La anchura se especifica en pixeles (a veces tambien la altura) body { width: 960px; margin: 0 auto;} #content { overflow: auto; height: 100%;} #nav, #feature, #footer { background-color: #efefef; padding: 10px; margin: 10px;} .column1, .column2, .column3 { background-color: #efefef; width: 300px; float: left; margin: 10px;} li { display: inline; padding: 5px;} Liquidos La anchura se especifica en porcentajes. <body> 90% de anchura cada columna se le pone un margin: 1% min-width, max-width para limitar los estiramientos body { width: 90%; margin: 0 auto;} #content {overflow: auto;} #nav, #feature, #footer { margin: 1%;} .column1, .column2, .column3 { width: 31.3%; float: left; margin: 1%;} .column3 {margin-right: 0%;} li { display: inline; padding: 0.5em;} #nav, #footer { background-color: #efefef; padding: 0.5em 0;} #feature, .article { height: 10em; margin-bottom: 1em; background-color: #efefef;} Dise\u00f1o 960px IMAGENES Controlar tama\u00f1o Creas tres clases de imagenes, peque\u00f1as, medianas y grandes. Despues a cada imagen le pones la clase a la que pertenece y asi automaticamente se pone a ese tama\u00f1o img.large { width: 500px; height: 500px;} img.medium { width: 250px; height: 250px;} img.small { width: 100px; height: 100px;} Alinear imagenes Se recomienda usar float en lugar de align . Creamos clases align-left align-right y luego a las imagenes les a\u00f1adimos la clase que nos interese img.align-left { float: left; margin-right: 10px;} img.align-right { float: right; margin-left: 10px;} Centrar imagenes Debemos convertir la imagen en en elemento de bloque y luego usar margin img.align-center { display: block; margin: 0px auto;} background background - Orden de las propiedades: background-color background-image background-repeat background-attachment background-position body { background: #ffffff url(\"images/tulip.gif\") no-repeat top right;} background-image - la imagen se ponde de fondo del elemento al que se lo asignamos p { background-image: url(\"images/pattern.gif\");} background-repeat - repeat la imagen se repite horizontal y verticalmente repeat-x la imagen solo se repite horizontalmente repeat-y la imagen solo se repite verticalmente no-repeat la imagen se muestra solo una vez body { background-image: url(\"images/header.gif\"); background-repeat: repeat-x;} background-attachment - fixed la imagen permanece fija scroll la imagen se mueve con el scroll body { background-image: url(\"images/tulip.gif\"); background-repeat: no-repeat; background-attachment: fixed;} background-position - Para especificar donde sale una imagen que no se repite. La propiedad tiene dos valores: Si solo se indica uno el segundo valor sera center . Tambien se puede usar px o porcentajes posicion horizontal left|center|right posicion vertical top|center|bottom body { background-image: url(\"images/tulip.gif\"); background-repeat: no-repeat; background-position: center top;} body { background-image: url(\"images/tulip.gif\"); background-repeat: no-repeat; background-position: 50% 50%;} rollover y sprites Enlaces o botones que tienen un segundo estilo al ponerse el puntero encima y un tercer estilo al pincharlos. Se usan sprites que son una sola imagen con diferentes partes a usar. <a class=\"button\" id=\"add-to-basket\">Add to basket</a> <a class=\"button\" id=\"framing-options\">Framing options</a> a.button { height: 36px; background-image: url(\"images/sprite.png\"); text-indent: -9999px; display: inline-block;} a#add-to-basket { width: 174px; background-position: 0px 0px;} a#framing-options { width: 210px; background-position: -175px 0px;} a#add-to-basket:hover { background-position: 0px -40px;} a#framing-options:hover { background-position: -175px -40px;} a#add-to-basket:active { background-position: 0px -80px;} a#framing-options:active { background-position: -175px -80px;} TRANSITION .tecla { color: deepskyblue; background: rgba(0, 0, 0, 0.4); text-shadow: 0 0 1px black; transition: background-color 0.2s; } .pulsada { background-color: orange; transform: scale(1.1, 1.1); } <div class=\"tecla\" id=\"0\">A<span class=\"sonido\">clap</span></div> function pressKey (e) { var valor = mapa.indexOf(e.key.toUpperCase()); if (valor !== -1) { document.getElementById(valor).addEventListener('transitionend', function () { document.getElementById(valor).classList.remove('pulsada'); }); document.getElementById(valor).classList.add('pulsada'); audio[valor].play(); } }","title":"CSS"},{"location":"css/#css","text":"","title":"CSS"},{"location":"css/#snippets","text":"","title":"SNIPPETS"},{"location":"css/#alinear-imagenes","text":".imgV { vertical-align: middle; } .imgH { display: flex; margin: 0 auto; max-width: 100%; }","title":"Alinear imagenes"},{"location":"css/#enlaces-animados-y-sin-subrayar","text":"a, a:visited { text-decoration: none; color: #375EAB; } a:hover { color: lightblue; } div:hover { transform: scale(1.2); } Desactivar enlace a.notYet { pointer-events: none; text-decoration: line-through; color: #404040; }","title":"Enlaces animados y sin subrayar"},{"location":"css/#hr-gradual","text":"hr { margin: 10px 10% 10px 10%; border: 0; height: 1px; background: #333; background-image: linear-gradient(to right, #ccc, #888, #ccc); }","title":"hr gradual"},{"location":"css/#problema-en-chrome-con-la-lista-de-puntos","text":"ul { text-align: center; /* para evitar los puntos */ display: inline; /* poner los numeros en Chrome de listas ordenadas dentro del texto*/ list-style-position: inside; list-style-type: none; }","title":"Problema en Chrome con la lista de puntos"},{"location":"css/#fijar-pie-al-final-de-pantalla","text":"html { height: 100%; box-sizing: border-box; } *, *:before, *:after { box-sizing: inherit; } body { position: relative; margin: 0 auto; /*padding-bottom: 6rem;*/ min-height: 97%; } .footer { position: absolute; right: 0; bottom: 0; left: 0; padding: 1rem; background-color: lightblue; text-align: center; }","title":"Fijar pie al final de pantalla"},{"location":"css/#tamano-fuente-como-navegador","text":"html { font-size:16px; } /* Fijando el css en 16px y usando em despues conseguiremos resultados consistentes en firefox y chrome */ body { font-size:0.90em; }","title":"Tama\u00f1o fuente como navegador"},{"location":"css/#css3","text":"","title":"CSS3"},{"location":"css/#introduccion","text":"Enlaces a css Externo <head> <title>CSS Externo</title> <link href=\"css/estilo.css\" type=\"text/css\" rel=\"stylesheet\" /> </head> Si hay multiples hojas de estilo : <link> uno para cada hoja de estilo En la hoja de estilo que se enlaza incluir @import url(\"estilo2.css);\" Interno - NO USAR <head> <title>CSS Interno</title> <style type=\"text/css\"> body { font-family: calibri; background-color: green;} h1 { color: black;} </style> </head>","title":"INTRODUCCION"},{"location":"css/#selectores","text":"Selectores CSS Selectores de atributos","title":"Selectores"},{"location":"css/#cascada-y-herencia","text":"Cascada - Ultima Regla: la ultima regla aplicada es la que manda - !important a\u00f1adiendo esto despues de la regla asi toma prioridad color: blue !important; - Especificidad : prevalecera la regla del selector que sea mas especifico h3 es mas especifico que * p otro es mas especifico que p p#intro es mas especifico que p Herencia Casi todos los selectores anidados dentro de otros heredan las propiedades asignadas al selector exterior. Por ejemplo un color en body tambien se aplicara al texto de un parrafo. Hay excepciones evidentes como margin-top (un parrafo no tiene el mismo margen superior que el body del documento). Puedes forzar heredar valores de propiedades de los padres usando inherit como valor de la propiedad body { padding: 20px;} .pagina { padding: inherit;}","title":"Cascada y herencia"},{"location":"css/#color","text":"color - h1 { color: DarkCyan;} /* color name */ h2 { color: #ee3e80;} /* hex code */ p { color: rgb(100,100,90);} /* rgb value */ background color - body { background-color: rgb(150,150,150); } h1 { background-color: DarkCyan; } h2 { background-color: ##ee3e80: } p { background-color: red; } opacity , rgba - p.one { background-color: rgb(0,0,0); opacity: 0.5;} p.two { background-color: rgb(0,0,0); background-color: rgba(0,0,0,0.5);}","title":"COLOR"},{"location":"css/#texto","text":"cursor - Controla el tipo de cursor del raton que se muestra auto|crosshair|default|pointer|move|text|wait|help|url(\"cursor.png\") a { cursor: move;} font-family - Familias : serif , sans-serif , cursive , fantasy y monospace font-family: Arial, Verdana, sans-serif font-size - Pixel: Por defecto en los navegadores el texto es de 16px Porcentaje : porcentaje sobre los 16px estandar, p.ej 75% es 12px em : unidad equivalente a la anchura de la m font-face - @font-face { font-family: 'PT Sans'; src: url('_public/fonts/PTSans.ttf') ; font-display: fallback; } @font-face { font-family: 'ChunkFiveRegular'; src: url('fonts/chunkfive.eot'); src: url('fonts/chunkfive.eot?#iefix') format('embedded-opentype'), url('fonts/chunkfive.woff') format('woff'), url('fonts/chunkfive.ttf') format('truetype'), url('fonts/chunkfive.svg#ChunkFiveRegular') format('svg');} font-weight - normal|bold font-style - normal|italic|oblique text-transform - uppercase : convierte el texto a mayusculas lowercase : convierte el texto a minusculas capitalize : pone mayusculas la primera letra de cada palabra h1 { text-transform: uppercase;} text-decoration - none : elimina cualquier decoracion del texto underline : subraya el texto overline : coloca una linea por encima del texto line-through : linea tachando el texto blink : hace que el texto brille y deje brillar a { text-decoration: none;} line-height - distancia entre lineas p { line-height: 1.4em; } letter-spacing , word-spacing - distancia entre letras, distancia entre palabras, por defecto es 0.25em h1, h2 { text-transform: uppercase; letter-spacing: 0.2em; } .credits { font-weight: bold; word-spacing: 1em; } text-align - left : el texto se alinea a la izquierda right : el texto se alinea a la derecha center : el texto se centra justify : Cada linea excepto la ultima ocupa toda la anchura disponible h1 { text-align: left; } vertical-align - Usada con elementos en linea como <img> <em> <strong> y es muy similar al atributo align de <img> Valores : baseline , sub , super , top , text-top , middle , bottom , text-bottom #six-months { vertical-align: text-top;} #one-year { vertical-align: baseline;} #two-years { vertical-align: text-bottom;} text-indent - indenta el texto h2 { text-indent: 20px; } text-shadow - distancia a izda o dcha de la sombra distancia arriba o abajo de la sombra (opcional) cantidad de difuminado de la sombra color de la sombra p { text-shadow: 2px 2px 1px #222222} :first-letter , :first-line (pseudo-elementos) - Para especificar diferentes valores a la primera letra o primera linea del texto p.intro:first-letter { font-size: 200%;} p.intro:first-line { font-weight: bold;} :link , :visited (pseudo-clases) - Los navegadores muestran los enlaces en azul y subrayados por defecto y cambian el color cuando han sido visitados :link : para poner estilos a enlaces no visitados :visited : para poner estilos a enlaces visitados a:link { color: deeppink; text-decoration: none;} a:visited { color: black;} a:hover { color: deeppink; text-decoration: underline;} a:active { color: darkcyan;} :hover , :active , :focus (pseudo-clases) - :hover : se aplica cuando el raton esta encima (no funciona en tactiles) :active : se aplica cuando se pulsa algo :focus : se aplica cuando el elemento tiene el foco cajetinTexto { padding: 6px 12px 6px 12px; border: 1px solid #665544; color: #ffffff;} boton.submit:hover { background-color: #665544;} boton.submit:active { background-color: chocolate;} cajetinTexto.text { color: #cccccc;} cajetinTexto.text:focus { color: #665544;}","title":"TEXTO"},{"location":"css/#boxes","text":"Dimensiones width , height - Por defecto las cajas tienen el tama\u00f1o justo para contener a su elemento. Podemos establecer nosotros ese tama\u00f1o usando pixeles , o porcentajes relativos a la ventana del navegador o a la caja en que ya esta si esta dentro de otra caja, o ems div.box { height: 300px; width: 300px; background-color: #bbbbaa;} min-width , max-width - Minimo y maximo anchura que una caja de un elemento puede tener min-height , max-height - Minimo y maximo anchura que una caja de un elemento puede tener overflow - Indica como actuar si el contenido dentro de la caja es mayor que la caja. hidden : el contenido extra que no cabe sencillamente se esconde scroll : aparece un scroll para acceder a ese contenido extra p.one { overflow: hidden;} p.two { overflow: scroll;} Visibilidad display - Permite convertir un elemento en linea en un bloque o al reves. Tambien vale para esconder un elemento en la pagina inline : convierte un elemento de bloque en un elemento en linea block : convierte un elemento en linea en un elemento de bloque inline-block : permite a un elemento de bloque fluir como un elemento en linea pero manteniendo las caracteristicas de un elemento de bloque none : esconde el elemento de la pagina li { display: inline; margin-right: 10px;} li.coming-soon { display: none;} visibility - Permite esconder cajas pero deja un espacio donde se supone que esta hidden : esconde el elemento visible : muestra el elemento li.coming-soon { visibility: hidden;} box-shadow - distancia a izda o dcha de la sombra distancia arriba o abajo de la sombra (opcional) cantidad de difuminado del borde. Con cero la sombra es una linea solida Extension de la sombra, positiva hacia fuera, negativa hacia dentro p { box-shadow: 2px 2px 1px 5px #777777} Bordes border-padding-margin - border-width - espesor de la linea de borde thin|medium|thick . border-top-width , border-right-width , border-bottom-width border-left-width en orden de las agujas del reloj empezando por top p.one { border-width: 2px;} p.two { border-width: thick;} p.three { border-width: 1px 4px 12px 4px;} border-style - define el tipo de borde solid|dotted|dashed|double|groove|ridge|inset|outset|hidden/none . border-top-style ... - Puedes elegir bordes individuales p.one {border-style: dashed;} border-color - elegir color para el borde border-top-color ... - Tambien se puede elegir el color para cada borde p.one { border-color: #0088dd;} p.two { border-color: #bbbbaa blue orange #0088dd;} border-image - Permite usar imagenes como bordes de las cajas border-radius - border-top-right-radius - border-bottom-right-radius - border-bottom-left-radius - border-top-left-radius - p { border-radius: 5px, 10px, 5px, 10px; } p.one { border-radius: 80px 50px; } p.two { border-top-left-radius: 80px 50px;} Margenes margin - Espacio entre el borde y la caja. Lo normal en px aunque tambien se puede en ems o porcentajes. Si dos cajas se solapan usaremos el mayor de los dos margenes y el otro no Tambien individualmente para cada lado margin-top, margin-right ... p.example1 { margin: 10px 2px 10px 5px; p.example2 { margin: 10px;} padding - Espacio entre el borde y el contenido. Lo normal es en px pero se pueden usar ems o porcentajes (% de la ventana del navegador o de la caja donde este contenido el elemento). Existen tambien individualmente para cada lado padding-top, padding-right ... p.example1 { padding: 10px 2px 10px 5px; p.example2 { padding: 10px;} centrando contenido - Para centrar una caja en la pagina ( o centrarla dentro del elemento en el que esta Establecer una width para la caja (sino tomara toda la anchura de la pagina) Poner margin-left: auto y margin-rigth: auto p { width: 300px; padding: 50px; border: 20px solid #0088dd;} p.example { margin: 10px auto 10px auto;","title":"BOXES"},{"location":"css/#listas","text":"list-style - Permite declaras las siguientes opciones type, imagen y position en cualquier orden. ul { list-style: inside circle; } list-style-type - Para poner el estilo al marcador de las listas - Listas ordenadas decimal|decimal-leading-zero|lower-alpha|upper-alpha|lower-roman|upper-roman - Listas desordenadas none|disc|circle|square ol { list-style-type: lower-roman;} list-style-imagen - Usar una imagen como marcador de listas. Se puede usar en <ul> y <li> ul { list-style-image: url(\"images/star.png\");} list-style-position - Por defecto el marcador de lista aparece outside del indentado de la lista. Podemos cambiarlo por inside para que el marcador entre en la caja del texto el cual esta indentado ul.t1 { list-style-position: outside;} ul.t2 { list-style-position: inside;}","title":"LISTAS"},{"location":"css/#tablas","text":"Consejos: Diferenciar cabeceras en negrita, mayusculas o algo mas Oscurecer filas alternativas Columnas con numeros alinearlos a la derecha width : poner la anchura de la tabla <table> padding : de las celdas <th> y <td> text-transform : en las cabeceras <th> letter-spacing, font-size : para diferenciar el texto de las cabeceras <th> border-top, border-bottom : para fiferenciar los bordes de la cabecera <th> text-align : para alinear el texto de las celdas a conveniencia <th> <td> background-color : cambiar el color de fondo alternando filas :hover : iluminar la fila con el puntero encima body { font-family: Arial, Verdana, sans-serif; color: #111111;} table { width: 600px;} th, td { padding: 7px 10px 10px 10px;} th { text-transform: uppercase; letter-spacing: 0.1em; font-size: 90%; border-bottom: 2px solid #111111; border-top: 1px solid #999; text-align: left;} tr.even { background-color: #efefef;} tr:hover { background-color: #c3e6e5;} .money { text-align: right;} empty-cells - show|hide|inherit indicar en las celdas vacias si mostramos los bordes o no o hereda el comportamiento de la tabla que le contiene table.one { empty-cells: show;} table.two { empty-cells: hide;} border-spacing ajusta la distancia entre celdas adyacentes, por defecto es minima. Se pone en px. Si pones dos valores son la separacion horizontal y la vertical border-collapse los bordes se juntan en un solo borde table.one { border-spacing: 5px 15px;} table.two { border-collapse: collapse;}","title":"TABLAS"},{"location":"css/#formularios","text":"Dar estilo a entradas de texto input { font-size: 120%; // tama\u00f1o del texto color: #5a5854; // color del texto background-color: #f2f2f2; // color del fondo de la entrada border: 1px solid #bdbdbd; // marca los bordes de la entrada border-radius: 5px; // redondea esos bordes padding: 5px 5px 5px 30px; background-repeat: no-repeat; background-position: 8px 9px; display: block; margin-bottom: 10px;} input:focus { // cambia el color de fondo background-color: #ffffff; border: 1px solid #b1e1e4;} input#email { background-image: url(\"images/email.png\");} input#twitter { background-image: url(\"images/twitter.png\");} input#web { background-image: url(\"images/web.png\");} Dar estilo a botones submit input#submit { color: #444444; // color del texto del boton text-shadow: 0px 1px 1px #ffffff; // apariencia 3d border-bottom: 2px solid #b2b2b2; // para el borde del boton background-color: #b9e4e3; background: -webkit-gradient(linear, left top, left bottom, from(#beeae9), to(#a8cfce)); background: -moz-linear-gradient(top, #beeae9, #a8cfce); background: -o-linear-gradient(top, #beeae9, #a8cfce); background: -ms-linear-gradient(top, #beeae9, #a8cfce);} input#submit:hover { // cambia la apariencia del boton color: #333333; // al pasar por encima border: 1px solid #a4a4a4; border-top: 2px solid #b2b2b2; background-color: #a0dbc4; background: -webkit-gradient(linear, left top, left bottom, from(#a8cfce), to(#beeae9)); background: -moz-linear-gradient(top, #a8cfce, #beeae9); background: -o-linear-gradient(top, #a8cfce, #beeae9); background: -ms-linear-gradient(top, #a8cfce, #beeae9);} Poner estilo a fieldsets y legends fieldset { width: 350px; // controlar el tama\u00f1o del form border: 1px solid #dcdcdc; border-radius: 10px; padding: 20px; text-align: right;} legend { background-color: #efefef; // color de fondo border: 1px solid #dcdcdc; border-radius: 10px; padding: 10px 20px; text-align: left; text-transform: uppercase;} Alinear formularios div { border-bottom: 1px solid #efefef; margin: 10px; padding-bottom: 10px; width: 260px;} .title { float: left; width: 100px; text-align: right; padding-right: 10px;} .radio-buttons label { float: none;} .submit { text-align: right;}","title":"FORMULARIOS"},{"location":"css/#layout","text":"Tipos posicionamiento position: static normal o estatico es el usado por defecto. Los elementos de bloque se ponen uno a continuacion de otro ocupando todo el ancho de la ventana del navegador salvo que lo limite con `width. position: relative - Los elementos se posicionan en relacion a donde deberian estar en posicion normal. Los desplazamos dando valor a top, bottom, left, right . Estos valores se ponen en px, porcentajes o ems p.example { position: relative; top: 10px; left: 100px;} position: absolute - El elemento se posiciona de forma absolita respecto a su elemento contenedor y el resto de elementos de la pagina le ignoran h1 { position: absolute; top: 0px; left: 500px; width: 250px;} position: fixed - Como el absoluto pero el elemento ahora es inamovible, su posicion permanece igual independiente del resto de elemntos e incluso si se sube o baja en la ventana del navegador. Util para hacer menus fijos por ejemplo en la parte superior de la ventana h1 { position: fixed; top: 0px; left: 50px; padding: 10px; margin: 0px; width: 100%; background-color: #efefef;} position: inherit , hereda la posicion del padre float: left|right - Desplaza los elementos todo lo que puede hacia la dcha o izda segun la propiedad float . Cualquier otro elemento dentro del elemento contenedor fluira alrededor del elemento que flota blockquote { float: right; width: 275px; font-size: 130%; font-style: italic; font-family: Georgia, Times, serif; margin: 0px 0px 10px 10px; padding: 10px; border-top: 1px solid #665544; border-bottom: 1px solid #665544;} propiedades de apoyo clear: left|right|both|none - indica que ningun otro elemento del mismo contenedot debe tocar el lado indicado de ese elemento .clear { clear: left;} overflow: auto; width:100% - Si todos los elemento de un contenedor son flotantes puede hacer problemas en ciertos navegadores a la hora de mostrar los bordes div { border: 1px solid #665544; overflow: auto; width: 100%;} multicolumna - Crear dise\u00f1os multicolumna con floats. Usar un <div> para cada columna y con las siguientes propiedades width , float y margin para cerrar un hueco entre las columnas z-index - Al usar posicionamiento relativo, fijo o absoluto los elementos se pueden solapar. Si es asi el ultimo que aparece en el codigo HTML es el que se ve. Para controlar eso esta la propiedad z-index , se ve el elemento con el mayor valor de esa propiedad h1 { position: fixed; z-index: 10;} Tipos de Layout Anchura fija La anchura se especifica en pixeles (a veces tambien la altura) body { width: 960px; margin: 0 auto;} #content { overflow: auto; height: 100%;} #nav, #feature, #footer { background-color: #efefef; padding: 10px; margin: 10px;} .column1, .column2, .column3 { background-color: #efefef; width: 300px; float: left; margin: 10px;} li { display: inline; padding: 5px;} Liquidos La anchura se especifica en porcentajes. <body> 90% de anchura cada columna se le pone un margin: 1% min-width, max-width para limitar los estiramientos body { width: 90%; margin: 0 auto;} #content {overflow: auto;} #nav, #feature, #footer { margin: 1%;} .column1, .column2, .column3 { width: 31.3%; float: left; margin: 1%;} .column3 {margin-right: 0%;} li { display: inline; padding: 0.5em;} #nav, #footer { background-color: #efefef; padding: 0.5em 0;} #feature, .article { height: 10em; margin-bottom: 1em; background-color: #efefef;} Dise\u00f1o 960px","title":"LAYOUT"},{"location":"css/#imagenes","text":"Controlar tama\u00f1o Creas tres clases de imagenes, peque\u00f1as, medianas y grandes. Despues a cada imagen le pones la clase a la que pertenece y asi automaticamente se pone a ese tama\u00f1o img.large { width: 500px; height: 500px;} img.medium { width: 250px; height: 250px;} img.small { width: 100px; height: 100px;} Alinear imagenes Se recomienda usar float en lugar de align . Creamos clases align-left align-right y luego a las imagenes les a\u00f1adimos la clase que nos interese img.align-left { float: left; margin-right: 10px;} img.align-right { float: right; margin-left: 10px;} Centrar imagenes Debemos convertir la imagen en en elemento de bloque y luego usar margin img.align-center { display: block; margin: 0px auto;} background background - Orden de las propiedades: background-color background-image background-repeat background-attachment background-position body { background: #ffffff url(\"images/tulip.gif\") no-repeat top right;} background-image - la imagen se ponde de fondo del elemento al que se lo asignamos p { background-image: url(\"images/pattern.gif\");} background-repeat - repeat la imagen se repite horizontal y verticalmente repeat-x la imagen solo se repite horizontalmente repeat-y la imagen solo se repite verticalmente no-repeat la imagen se muestra solo una vez body { background-image: url(\"images/header.gif\"); background-repeat: repeat-x;} background-attachment - fixed la imagen permanece fija scroll la imagen se mueve con el scroll body { background-image: url(\"images/tulip.gif\"); background-repeat: no-repeat; background-attachment: fixed;} background-position - Para especificar donde sale una imagen que no se repite. La propiedad tiene dos valores: Si solo se indica uno el segundo valor sera center . Tambien se puede usar px o porcentajes posicion horizontal left|center|right posicion vertical top|center|bottom body { background-image: url(\"images/tulip.gif\"); background-repeat: no-repeat; background-position: center top;} body { background-image: url(\"images/tulip.gif\"); background-repeat: no-repeat; background-position: 50% 50%;} rollover y sprites Enlaces o botones que tienen un segundo estilo al ponerse el puntero encima y un tercer estilo al pincharlos. Se usan sprites que son una sola imagen con diferentes partes a usar. <a class=\"button\" id=\"add-to-basket\">Add to basket</a> <a class=\"button\" id=\"framing-options\">Framing options</a> a.button { height: 36px; background-image: url(\"images/sprite.png\"); text-indent: -9999px; display: inline-block;} a#add-to-basket { width: 174px; background-position: 0px 0px;} a#framing-options { width: 210px; background-position: -175px 0px;} a#add-to-basket:hover { background-position: 0px -40px;} a#framing-options:hover { background-position: -175px -40px;} a#add-to-basket:active { background-position: 0px -80px;} a#framing-options:active { background-position: -175px -80px;}","title":"IMAGENES"},{"location":"css/#transition","text":".tecla { color: deepskyblue; background: rgba(0, 0, 0, 0.4); text-shadow: 0 0 1px black; transition: background-color 0.2s; } .pulsada { background-color: orange; transform: scale(1.1, 1.1); } <div class=\"tecla\" id=\"0\">A<span class=\"sonido\">clap</span></div> function pressKey (e) { var valor = mapa.indexOf(e.key.toUpperCase()); if (valor !== -1) { document.getElementById(valor).addEventListener('transitionend', function () { document.getElementById(valor).classList.remove('pulsada'); }); document.getElementById(valor).classList.add('pulsada'); audio[valor].play(); } }","title":"TRANSITION"},{"location":"debian/","text":"DEBIAN 12 BOOKWORM STABLE Para andar con ojo en las actualizaciones instalar aptitude install apt-listbugs Debian Package Searcher Repositories nano /etc/apt/sources.list ## Debian stable deb https://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware ## Debian security deb https://deb.debian.org/debian-security bookworm-security non-free contrib main non-free-firmware ## Debian updates deb https://deb.debian.org/debian/ bookworm-updates non-free contrib main non-free-firmware ## Debian backports #deb https://deb.debian.org/debian/ bookworm-backports main contrib #non-free non-free-firmware ## Insync deb https://apt.insync.io/debian bookworm non-free contrib ## Debian Multimedia #deb http://www.deb-multimedia.org/ bookworm main non-free # Chrome deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main # Teamviewer #deb [signed-by=/usr/share/keyrings/teamviewer-keyring.gpg] #https://linux.teamviewer.com/deb stable main apt install aptitude htop smartmontools sshpass rsync curl wget nano apt-transport-https iperf zip arc arj bzip2 cabextract lzop nomarch p7zip p7zip-full pax tnef unrar-free unzip deborphan net-tools intel-microcode hdparm ncdu rename iftop nethogs tcptrack dnsutils Para instalar Dropbox COMMANDS Add font fc-cache -f -v - tras haber copiado la fuente a /usr/share/fonts gpg gpg -c file.txt - cifra a archivo binario gpg -ca file.txt - cifra a archivo de texto gpg --output output.txt -d file.(gpg or txt) - para descifrar // convertir directorio en un archivo tar czf myfiles.tar.gz mydirectory/ // convertir archivo a un directorio tar xzf myfiles.tar.gz echo RELOADAGENT | gpg-connect-agent - para eliminar de la memoria la clave y que la pida al descomprimir grep Eliminar todas las lineas de una fichero que contienen un determinado 'texto' cat nombreArchivo | grep -v 'texto' > nuevoArchivo cat nombreArchivo | grep -v -e 'texto1' -e 'texto2' > nuevoArchivo cat nombreArchivo | grep -v -E 'texto1|texto2' > nuevoArchivo Coger solo las lineas de un archivo que contienen un determinado 'texto' grep -i \"texto\" nombreArchivo Eliminar lineas usando archivo temporal grep -v \"text\" archivo.txt > temp.txt && mv temp.txt archivo.txt Quedarte solo con determinadas lineas en un archivo grep -i \"text\" archivo.txt > temp.txt && mv temp.txt archivo.txt zip zip -er zipName.zip path/to/folder/ - Comprimir carpeta con contrase\u00f1a dpkg dpkg -i package.deb - apt-get -f install - reparar dependencias incumplidas si las hay dpkg -r onlyThaName - desinstalar debconf-show nombrePaquete - muestra configuracion del paquete instalado dpkg-reconfigure nombrePaquete - para reconfigurar el paquete Tama\u00f1o de ficheros y carpetas ls -lh du -ah /path du -h -d1 | sort -h Lista de directorios (ocultos incluidos) con su tama\u00f1o df -h du -sh * Lista de directorios (no ocultos) con su tama\u00f1o apt install ncdu ncdu Dividir archivo en varios Dividir archivo en trozos de 200mb asegurandoes que el corte no se produce en medio de una linea split -C 200m archivo.txt Limpieza apt-get autoclean && apt-get autoremove && apt-get remove --purge `deborphan` dpkg -l | grep -v ^ii | awk '{print $2}' | sed '1,5d'|xargs dpkg --purge Ver el tama\u00f1o de los logs y limpiar todos excepto los ultimos 3 dias journalctl --disk-usage journalctl --vacuum-time=3d Limpiar caches de imagenes du -sh ~/.cache/thumbnails rm -rf ~/.cache/thumbnails/* Process pgrep processName - buscar proceso ps - listar todos los procesos kill processNumber - matar proceso fg - continuar el proceso que estaba detenido nohup comando & - Ejecuta un comando en segundo plano y sigue ejecutandolo aunque salgamos de esa terminal ulimits error too many open files lsof - para encontrar file descriptors usados lsof -p PID | wc -l - indica cuantos file descriptors (archivos u otros recursos como conexiones http) tiene abiertos el proceso PID lsof -c PROCESS-NAME | wc -l - igual que arriba pero por nombre ulimit -n - muestra el limite de fd que el usuario puede usar ulimit -n 4096 - sube ese limite por ejemplo lo normal es 1024 a 4096 pero solo para esa sesion // Para Hacerlo permamente nano /etc/security/limits.conf userName soft nofile 2000 * hard nofile 500000 * soft nofile 500000 root hard nofile 500000 root soft nofile 500000 // Cambiar el limite de fd de un proceso en ejecucion prlimit --pid pidID --nofile=soft:hard prlimit --pid XXXX --nofile=XXXX:XXXX en nginx user www-data; worker_processes 4; pid /run/nginx.pid; worker_rlimit_nofile 50000; events { worker_connections 4000; # multi_accept on; } Buena guia Incrementar limites -> Por usuario nano /etc/security/limits.conf A\u00f1adir al final * hard nofile 500000 * soft nofile 500000 root hard nofile 500000 root soft nofile 500000 Guardar el archivo y hacer logout y login de nuevo Si esto no funciona probar con pam-limits nano /etc/pam.d/common-session a\u00f1adir session required pam_limits.so -> Para Todo el Sistema nano /etc/sysctl.conf a\u00f1adir fs.file-max = 2097152 Salimos y ejecutamos sysctl -p -> Verificar que funcionan los nuevos limites cat /proc/sys/fs/file-max Hard Limit ulimit -Hn Soft Limit ulimit -Sn verificar para un usuario su - nombreUsuario -c 'ulimit -aHS' -s '/bin/bash' Verificar para un proceso en ejecucion conseguimos el PID ps aux | grep nombreDelProceso cat /proc/XXX/limits Buscar find /path -name fileName - Buscar archivo find /path -type d -name dirName - Buscar carpeta Crear nuevo usuario useradd -d /home/username -m -s /bin/bash username - Crea un usuario con su carpeta home y consola para usar passwd username - Para crear la contrase\u00f1a del usuario Zona horaria dpkg-reconfigure tzdata - reconfigurar la zona horaria cpulimit apt-get install cpulimit ps aux | grep nombreProceso - nos da el id del proceso cpulimit -p id -l 30 - limita el proceso id al 30% cpulimit -e nombreProceso -l 50 - limita el proceso nombreProceso al 50% A\u00f1adir & para recuperar el control de la consola cpu_steal cat /proc/stat cpu 56933 276 469486 39394437 19656 0 159573 1942961 0 0 total_cpu_time = 56933 + 276 + 469486 + 39394437 + 19656 + 0 + 159573 + 1942961 + 0 + 0= 41308022 steal = (1942961 / 41308022) * 100 \u2248 4.70% cambiar hostname hostnamectl set-hostname NUEVO_HOSTNAME nano /etc/hostname nano /etc/hosts systemctl restart systemd-hostnamed averiguar la version de debian lsb_release -a dns dig domain.tld @9.9.9.9 cron crontab -e // activar los logs de cron nano /etc/rsyslog.conf // descomentar la linea #cron.* -/var/log/cron service rsyslog restart // ejecutar algo al inicio del servidor crontab -e // como root @reboot cd /home/user/donde-sea && ./programa nmap nmap -Pn X.X.X.X || hostname rename multiple files at once apt install rename // Reemplazar la 1 ocurrencia de abc por xyz rename 's/abc/xyz/' * curl // tiempo en ir, procesar y volver curl -o /dev/null -s -w 'Total: %{time_total}s\\n' https://pagina.web SECURITY SSH aptitude install openssh-server openssh-client nano /etc/ssh/sshd_config // Para quitar acceso como root # Authentication: LoginGraceTime 120 PermitRootLogin without-password // jode mas que poner solo no StrictModes yes // Por seguridad # Para permitir contrase\u00f1as vacias pon yes (NI SE TE OCURRA HACERLO) PermitEmptyPasswords no service ssh restart sshpass -p contrase\u00f1a ssh usuario@dominio Broken pipe Para prevenir desconexiones del tipo broken pipe nano -c /etc/ssh/ssh_config Host * ServerAliveInterval 120 SSHFS mkdir /local/path sshfs user@hostname:/remote/path /local/path // al terminar fusermount -u /local/path CLAMAV Antivirus para asegurarnos de que no somos conductores de virus entre maquinas windows y por si las moscas ... apt-get install clamav clamav-docs clamav-daemon clamav-freshclam aptitude install arc arj bzip2 cabextract lzop nomarch p7zip pax tnef unrar-free unzip zoo lha unrar - Para que escanee archivos comprimidos nano /etc/clamav/freshclam.conf - El archivo de configuracion por si queremos cambiar algo. service clamav-freshclam restart - hacerlo despues para cargar la nueva configuracion // Para actualizar, como root freshclam // Si esta bloqueado /etc/init.d/clamav-freshclam stop //despues => service clamav-freshclam start // para escanear como usuario normal clamscan -r /ruta/a/escanear RKHUNTER aptitude install rkhunter //para actualizar, como root rkhunter --propupd rkhunter --update //para usar, como root tambien rkhunter --check FAIL2BAN apt-get install fail2ban whois python3-systemd cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local nano /etc/fail2ban/jail.local // Aqui van las IPs que no tendran esas restricciones [DEFAULT] # \"ignoreip\" can be an IP address, a CIDR mask or a DNS host ignoreip = 127.0.0.1 192.168.1.0/24 bantime = 1800 maxretry = 3 // Correo al que avisar ante sucesos # Destination email address used solely for the interpolations in # jail.{conf,local} configuration files. destemail = root@localhost [webmin] enabled = true port = 10000 filter = webmin-auth banaction = iptables-multiport action = %(action_mwl)s logpath = /var/log/auth.log maxretry = 3 [ssh] backend=systemd enabled = true port = ssh filter = sshd logpath = /var/log/auth.log maxretry = 3 [ssh-ddos] backend=systemd enabled = true port = ssh filter = sshd-ddos logpath = /var/log/auth.log maxretry = 3 systemctl restart fail2ban.service systemctl status fail2ban.service Los logs de baneos estan en estos dos archivos /var/log/fail2ban.log /var/log/auth.log manual unban fail2ban-client set ssh unbanip X.X.X.X UFW apt-get install ufw ufw allow ssh/tcp ufw logging on Antes de esto no se podia activar porque nos echa de la sesion de SSH. Ahora si => ufw enable ufw allow smtp/tcp ufw allow http/tcp ufw allow https/tcp ufw allow webmin ufw status - rules list ufw status numbered - numbered rules list ufw delete X - delete rule X bloquear IPs ufw insert 1 deny from X.X.X.X to any nano -c /etc/ufw/before.rules # End required lines -A ufw-before-input -s X.X.X.X -j DROP ufw reload PM2 Instalar npm install pm2 -g npm remove pm2 -g Configuracion DOCS pm2 startup - como usuario y seguir instrucciones para hacer que pm2 se ejecute en los reinicios sin necesitar ser root pm2 unstartup - para desmontar el chiringuito NO SIEMPRE Para ejecutar los procesos como user y no como root chmod -R 777 /home/user/.pm2 Comandos pm2 start app.js pm2 kill // para la ejecucion pero con un reboot se activara de nuevo pm2 list pm2 stop all|number pm2 restart all|number pm2 delete 7 // elimina el proceso especifico con ese id pm2 save // salva la lista de procesos en ese momento pm2 start app.js --name \"my-name\" pm2 restart app --name \"nuevo-nombre\" --update-env // para renombrar pm2 reset app // pone el contador de restarts a cero dev pm2-dev start app.js pm2-dev start app.js --ignore folder1,folder2,file3.txt cluster variables // -i numero de procesos que levanta pm2 start name.js -i max process.env.NODE_APP_INSTANCE; process.env.name process.env.pm_id max-memory-restart pm2 start geoip.js -i max --max-memory-restart 1300M 50M 50K 1G scale // Sumar 3 procesos al actual pm2 scale app +3 // deja 3 procesos activos de todos los que este usando actualmente pm2 scale app 3 cluster logs in the same file // ecosystem.config.js module.exports = { apps: [{ name: 'codetabs', script: 'codetabs.js', ignore_watch: [\"node_modules\", \"tmp\"], output: './../logs/hits.log', error: './../logs/errors.log', env: { NODE_ENV: \"development\", }, env_production: { NODE_ENV: \"production\", }, instances: 8, max_memory_restart: \"1G\", merge_logs: true, log_date_format: 'YYYY-MM-DD HH:mm:ss', }] }; pm2 start ecosystem.config.js --env production NPM sin ser ROOT Usando nvm https://nodejs.org/en/download # Download and install nvm: using curl | bash curl -o- https://raw.githubusercontent.com/nvm/install.sh | bash nvm install numeroVersion node -v # ver version de node nvm current # lo mismo npm -v # ver version de npm # ya esta, ahora npm install -g Usando nodesource // crear carpeta para los paquetes globales mkdir \"${HOME}/.npm-packages\" // crear .npmrc nano ${HOME}/.npmrc prefix=${HOME}/.npm-packages //editar .bashrc nano ${HOME}/.bashrc NPM_PACKAGES=\"${HOME}/.npm-packages\" PATH=\"$NPM_PACKAGES/bin:$PATH\" unset MANPATH # delete if already modified MANPATH elsewhere export MANPATH=\"$NPM_PACKAGES/share/man:$(manpath)\" // recargar la configuracion para aplicar los cambios source ~/.profile SYSTEMD systemctl status servidorGO - nos da informacion del servicion Crear Servicio nano /etc/systemd/servidorGO.service cp servidorGO.service /etc/systemd/system systemctl enable servidorGO.service service servidorGO.service start Borrar servicio systemctl stop [servicename] systemctl disable [servicename] rm /etc/systemd/system/[servicename] systemctl daemon-reload systemctl reset-failed nombre.service [Unit] Description= Descripcion de la tarea [Service] User=user Group=www-data Restart=on-failure WorkingDirectory=/var/www/path/to/binary/folder ExecStart=/var/www/path/to/binary/folder/binaryName [Install] WantedBy=multi-user.target Commandos service name status service name start systemctl enable name.service systemctl disable name.service systemctl start name.service systemctl stop name.service systemctl restart name.service systemctl status name.service systemctl reload name.service // Required files /etc/systemd/servidorGO.service /etc/systemd/system/servidorGO.service /etc/systemd/system/multi-user.target.wants/servidorGO.service /sys/fs/cgroup/systemd/system.slice/servidorGO.service Otra opcion ? nano /lib/systemd/system/name.service [Unit] Description= Task description [Service] Type=simple Restart=always RestartSec=5s ExecStart=/var/www/path/to/binary/folder/binaryName [Install] WantedBy=multi-user.target service name start service name status // para activarlo desde el reinicio del sistema systemctl enable name.service SYSTEMD sin ser ROOT Systemd sin ser ROOT Primero asegurarnos de que este instalado dbus para user apt install dbus-user-session apt install policykit-1 por si da guerra org.freedesktop.policytoolkit1 Creamos carpeta donde guardar los servicios mkdir -p ~/.config/systemd/user En esa carpeta creamos el nombreservicio.service [Unit] Description= Descripcion de la tarea After=network.target [Service] RestartSec=5s Restart=always WorkingDirectory=/ruta/a/la/carpeta/del/binario ExecStart=/ruta/a/la/carpeta/del/binario/./nombreDelBinario StandardOutput=append:/home/ruta//al/info.log StandardError=append:/home/ruta/al/error.log [Install] WantedBy=default.target Ahora hacemos que systemd reconozca los cambios systemctl --user daemon-reload Ya podemos gestionar el servicio systemctl --user start nombreDelServicio systemctl --user stop nombreDelServicio systemctl --user restart nombreDelServicio systemctl --user status nombreDelServicio Para que el servicio se inicie automaticamente cuando el usuario se loguea systemctl --user enable nombreDelServicio // sin el .service al final Para desactivarlo systemctl --user disable nombreDelServicio Hay que hacer que el servicio corra siempre, este o no logueado el due\u00f1o y al inicio del sistema. Para ello como root ejecutamos loginctl enable-linger NOMBREUSUARIO Ya como usuario normal podemos ver el estado de los servicios loginctl user-status NOMBREUSUARIO NGINX Instalacion apt-get install nginx chown -R user:user /var/www - Para darle permisos al usuario para toda esa carpeta mkdir -p /var/www/site1 mkdir -p /var/www/site2 Configuracion nano /etc/nginx/nginx.conf El archivo de configuracion se llama default y esta en la carpeta /etc/nginx/sites-available .Lo borramos o lo renombramos a default.old . La copia de default que esta en /etc/nginx/sites-enabled hay que borrarla Ahora podemos crear nuestro archivo/s de configuracion. nano /etc/nginx/sites-available/domain cp /etc/nginx/sites-available/domain /etc/nginx/sites-enabled/domain service nginx restart nginx -s reload solo para recargar el archivo de configuracion server-side-includes Server Side Includes Directivas y variables ssi on - /etc/nginx/sites-available Para las rutas ojo porque es desde la raiz del servidor web nginx para esa location <!-- Head --> <!--#include file=\"/_public/templates/head.html\" --> ocultar la version de nginx nano /etc/nginx/nginx.conf http { server_tokens off; } headers(cabeceras) Ojo, que algunas pueden restringir el comportamiento de las aplicaciones que tengamos # Headers to be added: add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains\" always; add_header X-Frame-Options \"DENY\"; add_header X-Content-Type-Options \"nosniff\"; add_header X-XSS-Protection \"1; mode=block\"; add_header Content-Security-Policy \"default-src 'self'\"; En el location block para evitar cualquier indexacion de esa location por parte de los robots de busqueda add_header X-Robots-Tag \"noindex, nofollow, nosnippet, noarchive\"; Limitar tama\u00f1o de los archivos de subida location /count-loc/ { # set client body size to 10M client_max_body_size 10M; } rate Limit nano /etc/nginx/nginx.conf // aqui definimos por ejemplo la zona=one # limit requests limit_req_zone $binary_remote_addr zone=one:10m rate=2r/s; //luego hay que aplicarlo, mejor en location que en server nano /etc/nginx/sites-available/domain location /count-loc/ { # requests limit limit_req zone=one burst=20; } Apply limits per IP geo $limit { default 1; X.X.X.X 0; Y.Y.Y.Y 0; } map $limit $limit_key { 0 \"\"; 1 $binary_remote_addr; } limit_req_zone $limit_key zone=one:10m rate=5r/s; limit_req_zone $limit_key zone=two:10m rate=1r/m; limit_req_zone $limit_key zone=three:10m rate=12r/m; limit_req_zone $limit_key zone=four:10m rate=2r/s; http2 nano /etc/nginx/nginx.conf // usar solo cifrados muy seguros ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256: RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; // hay que generar una nuevas claves, lo mejor en /etc/nginx/ssl cd /etc/nginx/ssl openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048 // http2 solo funciona con https asi que en el bloque de listen 443 listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; # my cipher ssl_dhparam /etc/nginx/ssl/dhparam.pem; // para mejorar rendimiento ssl_session_cache shared:SSL:5m; ssl_session_timeout 1h; cache // en sites-availables bloque propio # Expires map map $sent_http_content_type $expires { default off; text/html epoch; text/css 7d; application/javascript 7d; ~image/ max; } // luego en el bloque server que queramos a\u00f1adir expires $expires; zonas privadas // crear archivo con la contrase\u00f1a apt-get install apache2-utils cd /etc/nginx htpasswd -c .rethinkdb.pass <username> // will ask for password service nginx restart server { listen 443 ssl; server_name sub.domain.com; location / { ... } location /private/ { auth_basic \"Restricted\"; auth_basic_user_file /etc/nginx/.rethinkdb.pass; ... root or proxy for this location } } custom 404 mkdir /var/www/error => 404.html 404.css , js, png ... server { error_page 404 /404.html; location = /404.html { root /var/www/error; internal; } location = /404.css { root /var/www/error; } location = /caution.png { root /var/www/error; } } En 404.html llamamos a los recursos usando rutas absolutas <link rel=\"stylesheet\" type=\"text/css\" href=\"/404.css\"> block domains map $http_referer $bad_referer { default 0; \"~spamdomain1.com\" 1; \"~spamdomain2.com\" 1; \"~spamdomain3.com\" 1; } if ($bad_referer) { return 444; } nginx.conf actualizado 2019-05-08 user www-data; worker_processes auto; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf; events { worker_connections 768; # multi_accept on; } http { ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; server_tokens off; server_names_hash_bucket_size 64; # 128? # server_name_in_redirect off; include /etc/nginx/mime.types; default_type application/octet-stream; # set client body size to 5M # client_max_body_size 2M; # limit requests geo $limit { default 1; X.X.X.X 0; #server1 X.X.X.X 0; #server2 X.X.X:X 0; #server3 X.X.X.X 0; #server4 } map $limit $limit_key { 0 \"\"; 1 $binary_remote_addr; } limit_req_zone $limit_key zone=one:10m rate=5r/s; limit_req_zone $limit_key zone=two:10m rate=2r/m; limit_req_zone $limit_key zone=three:10m rate=12r/m; limit_req_zone $limit_key zone=four:10m rate=2r/s; limit_req_zone $limit_key zone=five:10m rate=1r/s; limit_req_zone $limit_key zone=six:1000m rate=10r/s; ## # SSL Settings ## ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA +AES256:EECDH+3DES:RSA+3DES:!MD5; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ## # Gzip Settings ## gzip on; gzip_disable \"msie6\"; gzip_vary on; gzip_proxied any; gzip_comp_level 6; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_types text/plain text/css application/json application/javascript text/xml application/xml applicati$ ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; } dominio-template.conf actualizado 2019-05-08 ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem; ssl_session_cache shared:SSL:10m; ssl_session_timeout 1h; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # my cipher ssl_dhparam /etc/nginx/ssl/dhparam.pem; # server-side-includes ssi on; # Headers to be added: add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains\" always; add_header X-Frame-Options \"DENY\"; add_header X-Content-Type-Options \"nosniff\"; add_header X-XSS-Protection \"1; mode=block\"; #add_header Content-Security-Policy \"default-src 'self'\"; #cache # set client body size to 4M # # client_max_body_size 4M; expires $expires; # custom error error_page 404 /404.html; location = /404.html { root /var/www/codetabs/www/_error; internal; } location = /404.css { root /var/www/codetabs/www/_error; } location = /ct24r.png { root /var/www/codetabs/www/_error; } location = /ct64r.png { root /var/www/codetabs/www/_error; } error_page 429 /429.html; location = /429.html { root /var/www/codetabs/www/_error; #internal; } location /_public { # requests limit, ojo que enlentece la carga de la pagina # limit_req zone=one burst=50; alias /var/www/codetabs/www/_public; } SITES/DOMAIN actualizado 2019-05-08 # Expires map map $sent_http_content_type $expires { default off; text/html epoch; text/css 7d; application/javascript 7d; ~image/ max; } server { listen 80; # Listen to your server ip address server_name 212.24.108.85; # Redirect all traffic comming from your-server-ip to your domain return 301 https://domain.com$request_uri; } server { listen 80; listen [::]:80; server_name domain.com www.domain.com; return 301 https://domain.com$request_uri; server_name *.domain.com; return 301 https://*.domain.com$request_uri; } server { listen 443 ssl; listen [::]:443 ssl; server_name www.domain.com; ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem; return 301 https://domain.com$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name domain.com; include /etc/nginx/sites-available/domain.conf; # enable CORS # add_header Access-Control-Allow-Origin '*'; location / { root /var/www/domain/html; index index.html; } location /freecodecamp { root /var/www/domain; index index.html; } location /notes { root /var/www/domain; index index.html; } } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name api.domain.com; include /etc/nginx/sites-available/domain.conf; # enable CORS add_header 'Access-Control-Allow-Origin' '*' always; location /github-stars/ { # requests limit limit_req zone=three ;#burst=50; proxy_pass http://127.0.0.1:3501/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; # Para coger ip de visitante a\u00f1adir las siguientes dos lineas proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /count-loc/ { # requests limit limit_req zone=three ;#burst=50; # set client body size to 10M client_max_body_size 10M; proxy_pass http://127.0.0.1:3502/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; # Para coger ip de visitante a\u00f1adir las siguientes dos lineas proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /game/ { # requests limit limit_req zone=three ;#burst=50; proxy_pass http://127.0.0.1:3503/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; # Para coger ip de visitante a\u00f1adir las siguientes dos lineas proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name test.domain.com; include /etc/nginx/sites-available/domain.conf; location /admin { # requests limit # limit_req zone=one ;#burst=50; auth_basic \"Area 51\"; auth_basic_user_file /etc/nginx/.admin.pass; root /var/www/domain; index admin.html; } } Subcarpeta con PHP Hracias serversforhackers.com server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name domain.com; include /etc/nginx/sites-available/domain.conf; # enable CORS #add_header Access-Control-Allow-Origin '*'; location / { root /var/www/domain/beta; index index.html; } location ^~ /blog { alias /var/www/wp-domain; index index.php; try_files $uri $uri/ @nested; location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_param SCRIPT_FILENAME $request_filename; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; } } location @nested { rewrite /blog/(.*)$ /blog/index.php?/$1 last; } location ~ /\\. { deny all; } location ~* /(?:uploads|files)/.*\\.php$ { deny all; } } Dokuwiki # DokuWiki location ^~ /wiki { alias /var/www/dokuwiki; index index.php; try_files $uri $uri/ @nested; location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_param SCRIPT_FILENAME $request_filename; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; } # dokuwiki security location ~ /wiki/(conf|bin|inc)/ { deny all; } location ~ /wiki/data/ { internal; } } location @nested { rewrite /wiki/(.*)$ /wiki/index.php?/$1 last; } location ~ /\\. { deny all; } location ~* /(?:uploads|files)/.*\\.php$ { deny all; } Repartir peticiones // etc/nginx/nginx.conf http { upstream backend_servers { server 127.0.0.1:3020 weight=50; # 25% del tr\u00e1fico server 127.0.0.1:3021 weight=150; # 75% del tr\u00e1fico } } // ya en pagina.cpnf en lugar del tipico #proxy_pass http://127.0.0.1:3021/servicio; proxy_pass http://backend_servers/servicio; WEBMIN Instalacion Descarga el .deb de aqui dpkg -i package.deb Si debian protesta de dependencias instala las que pida. Estas son las mas posibles: apt install perl libnet-ssleay-perl openssl libpam-runtime libio-pty-perl python libauthen-pam-perl libio-pty-perl apt-show-versions Para desinstalar paramos service webmin stop y despues /etc/webmin/uninstall.sh Modulos nginx module - https://www.justindhoffman.com/project/nginx-webmin-module webmin -> webmin configuration -> webmin modules Actualizacion Despues de actualizarse hay veces que no arranca /etc/init.d/webmin stop /etc/init.d/webmin start Cambiar el password Para cambiar la contrase\u00f1a desde la consola /usr/share/webmin/changepass.pl /etc/webmin root NEWPASSWORD Lets Encrypt Webmin webmin > webmin Configuration > SSL Encryption > SSL Settings /etc/letsencrypt/live/nombreCert/privkey.pem /etc/letsencrypt/live/nombreCert/cert.pem Apply -> service nginx restart CERTIFICADOS AUTOFIRMADOS cd /etc/nginx/ssl openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout selfsigned.key -out selfsigned.crt ya se pueden usar como dummies en nginx en lugar de los verdaderos de letsencrypt para simular https LETS ENCRYPT HTTPS certbot apt-get install certbot python3-certbot-nginx - install Create certificate 12-12-2024 certbot --nginx -d el.dominioquesea.com // This certificate expires on 2025-03-12. // These files will be updated when the certificate renews. // Certbot has set up a scheduled task to automatically renew // this certificate in the background. // Deploying certificate // Could not install certificate // perfecto, pues los crea sin tocar la conf de nginx // crea los certs en /etc/letsencrypt/live // luego ya los configuras en las conf de nginx Create certificate // primero parar nginx service nginx stop // Usar la opcion standalone y creamos todos los dominios juntos // (domain.com www.domain.com sub.domain.com etc) certbot certonly Saving debug log to /var/log/letsencrypt/letsencrypt.log How would you like to authenticate with the ACME CA? ------------------------------------------------------------------------- 1: Place files in webroot directory (webroot) 2: Spin up a temporary webserver (standalone) ------------------------------------------------------------------------- Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2 Please enter in your domain name(s) (comma and/or space separated) (Enter 'c' to cancel):domain.com www.domain.com sub.domain.com Obtaining a new certificate Performing the following challenges: tls-sni-01 challenge for domain.com tls-sni-01 challenge for www.domain.com Waiting for verification... Cleaning up challenges Generating key (2048 bits): /etc/letsencrypt/keys/0067_key-certbot.pem Creating CSR: /etc/letsencrypt/csr/0067_csr-certbot.pem IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/domain.com/fullchain.pem. Your cert will expire on 2017-11-11. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew *all* of your certificates, run \"certbot renew\" - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le Listar certificados certbot certificates - Lista de todos los certificados existentes A\u00f1adir certificado service nginx stop - paramos nginx certbot certonly -d admin.domain.com,api.domain.com,domain.com, sp500.domain.com,www.domain.com,otrosub.domain.com --expand - Eliminar certificado certbot delete - y seleccionamos el que queramos borrar Renovar certbot renew --dry-run - solo testea certbot renew - renueva de verdad certbot renew --force-renew - fuerza la renovacion aunque falte mucho tiempo aun para su caducidad certbot renew --dry-run --cert-name domain.tld ` webroot , no hace falta parar nginx para hacer las renovaciones Leer el manual de certot server { listen 80; listen [::]:80; server_name beta.domain.tld; # location / { # root /var/www/beta.domain.tld; # index index.html; # } return 301 https://beta.domain.tld$request_uri; # } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name beta.domain.tld; ssl_certificate /etc/letsencrypt/live/beta.domain.tld/fullchain.pem; # ssl_certificate_key /etc/letsencrypt/live/beta.domain.tld/privkey.pem; # ssl_session_cache shared:SSL:10m; ssl_session_timeout 1h; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; ssl_dhparam /etc/nginx/ssl/dhparam.pem; #add_header X-Robots-Tag \"noindex, nofollow, nosnippet, noarchive\"; location / { root /var/www/beta.domain.tld; index index.html; } } certbot certonly --webroot -w /var/www/domain.tld -d domain.tld -d www.domain.tld -d beta.domain.tld staging --staging - permite mayopr numero de intentos mientras testeamos MONITORIZAR RED vnstat - Bandwidth aptitude install vnstat // lista todas las interfaces de red disponibles vnstat --iflist // configura interface vnstat -u -i eth0 // comienza la ejecucion del servicio como demonio /etc/init.d/vnstat start // cambia de due\u00f1o para poder escribir en su propia base de datos chown -R vnstat:vnstat /var/lib/vnstat/ monitorizar (como un usuario normal) // tiempo real vnstat -l // serie historica por horas-dias-meses-semanas vnstat -h|d|w|m // top 10 dias vnstat -t archivo configuracion (para cambiar la interfaz que por defecto es eth0) nano /etc/vnstat.conf crontab -e 0 * * * * node /var/www/vnstat/vnstat.js // ejecutar cada hora vnstat -i eth0 --json d // dentro de vnstat.js nload apt install nload iftop apt install iftop nethogs apt install nethogs tcptrack apt install tcptrack tcptrack -i interface muestra todas las conexiones existentes en tiempo real nethogs apt install nethogs MYSQL Instalar MYSQL 5.7.X instalacion wget => `https://dev.mysql.com/downloads/repo/apt/` dpkg -i packake.deb nano /etc/apt/sources.list.d/mysql.list apt-get update apt-get install mysql-server mysql_secure_installation configuracion nano /etc/mysql/my.cnf // redirige a ... nano /etc/mysql/mysql.conf.d/mysqld.cnf // Descomentar esta line para evitar acceso desde el exterior bind-address = 127.0.0.1 service mysql restart // para crear otros usuarios usamos % en lugar de localhost para // permitir el acceso desde el exterior mysql -u root -pPasswordYouDesire mysql>CREATE USER 'username'@'%' IDENTIFIED BY 'password'; mysql>GRANT ALL ON databaseName.* TO 'username'@'%'; mysql> FLUSH PRIVILEGES; truncate table with fk SET FOREIGN_KEY_CHECKS = 0; TRUNCATE table table_name; SET FOREIGN_KEY_CHECKS = 1; Instalar MYSQL 8.0.X Aviso sobre el nuevo sistema de autenticacion MySQL 8 uses a new authentication based on improved SHA256-based password methods. It is recommended that all new MySQL Server installations use this method going forward. This new authentication plugin requires new versions of connectors and clients, with support for this new 8 authentication(caching_sha2_password). Currently MySQL 8 Connectors and community drivers built with libmysqlclient21 support this new method. Clients built with older versions of libmysqlclient may not be able to connect to the new server. To retain compatibility with older client software, the default authentication plugin can be set to the legacy value (mysql_native_password) This should only be done if required third-party software has not been updated to work with the new authentication method. The change will be written to the file /etc/mysql/mysql.conf.d/default-auth-override.cnf After installation, the default can be changed by setting the default_authentication_plugin server setting. instalacion wget => `https://dev.mysql.com/downloads/repo/apt/` dpkg -i packake.deb nano /etc/apt/sources.list.d/mysql.list apt-get update apt-get install mysql-server mysql_secure_installation configuracion nano /etc/mysql/my.cnf // se ven todos los sitios donde puede estar la configuracion // vamos a ... nano /etc/mysql/mysql.conf.d/mysqld.cnf // y debajo de [mysqld] escribimos bind_address = 127.0.0.1 // para prohibir acceso desde el exterior service mysql restart // para crear otros usuarios usamos % en lugar de localhost para // permitir el acceso desde el exterior mysql -u root -pPasswordYouDesire mysql>CREATE USER 'username'@'%' IDENTIFIED BY 'password'; mysql>GRANT ALL ON databaseName.* TO 'username'@'%'; mysql> FLUSH PRIVILEGES; // para apagar mysql password validation UNINSTALL COMPONENT 'file://component_validate_password'; REDIS Instalar REDIS 4.0.X Instalar apt -t stretch-backports install \"redis-server\" service redis status Configurar nano /etc/redis/redis.conf appendonly yes appendfsync everysec service redis restart VPS Benchmark (curl -s wget.racing/nench.sh | bash; curl -s wget.racing/nench.sh | bash) 2>&1 | tee nench.log wget -qO- bench.sh | bash Ram dmidecode -t 17 dd if=/dev/zero of=/dev/null bs=1024M count=200 iperf apt install iperf iperf -c iperf.online.net speedtest curl -Lo speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py chmod +x speedtest-cli http://speedtest.tele2.net/ download wget -O /dev/null http://speedtest.tele2.net/1GB.zip upload curl -T 1GB.zip ftp://speedtest.tele2.net/upload/ hard disk apt install smartmontools // informacion smartctl -a /dev/sda // testear smartctl -t short|long|select /dev/sda // resultados smartctl -a /dev/sda // o solo testear smartctl -l selftest /dev/sdc // informacion hdparm -I /dev/sda // testea hdparm -tT /dev/sda // testea dd if=/dev/zero of=/tmp/output conv=fdatasync bs=384k count=1k; rm -f /tmp/output dd if=/dev/zero of=testfile bs=1M count=1024 oflag=direct more benchmarks openssl speed rsa openssl speed -multi numCores rsa2048 7z b SYS arm-XT arreglar el bug de poca velocidad de subida lowendtalk apt install linux-image-4.9.0-6-armmp linux-headers-4.9.0-6-armmp apt purge *armada* reboot modprobe error ufw wget http://last.public.ovh.hdaas.snap.mirrors.ovh.net/ubuntu/pool /main/l/linux-modules-armada375/linux-modules-armada375_4.5.2-4_armhf.deb dpkg -i linux-modules-armada375_4.5.2-4_armhf.deb grub-mkconfig -o /boot/grub/grub.cfg rsync De local a otra remota rsync -aP /home/user/data/ user@destiny.com:/home/user/data # automatizado sin preguntar contrase\u00f1a rsync -arv --delete -e \"sshpass -f '/file/with/passwd' || -p 'password' ssh -p PORT -o StrictHostKeyChecking=no\" --progress /source/data/ user@domain.com:/destination/data De otra remota a local * rsync -charvzP --delete -e \"sshpass -p 'pass' ssh -p port\" --progress user@remote.host:/remote/path /local/path/ TEST API siege siege -c 30 -r 1 --no-parser https://api.codetabs.com/v1/ siege -c250 -d10 -t3 https://api.codetabs.com/v1/proxy?quest=http Apache Bench apt-get install apache2-utils - -n numero de peticiones -c concurrencias Mas info ab -n 1000 -c 10 https://jolav.github.io/ \u00a1 Ojo porque ab asume que todas las respuestas son iguales !. Si content-length es distinta lo considera un error y aparece como failed request OPENVPN Script para instalar Crear un Kill Switch // ON-openvpn.sh #!/bin/bash ufw reset ufw default deny incoming ufw default deny outgoing ufw allow out on tun0 from any to any ufw enable // OFF-openvpn.sh #!/bin/bash ufw reset ufw default deny incoming ufw default allow outgoing ufw enable chmod +x ON-openvpn.sh OFF-openvpn.sh Conectarte a tu openVpn ./on-openvpn.sh ./off-openvpn.sh more FLASH FIREFOX Download from here tar -xzf flash_player_ppapi_linux*.tar.gz cp libpepflashplayer.so /usr/lib/mozilla/plugins cp -r usr/* /usr // restart firefox VIRTUALBOX Descargar de aqui en el apartado \"All distributions\" el archivo .run https://www.virtualbox.org/wiki/Linux_Downloads Si tras ejecutarlo e instalarlo dice que falta el dkms es ir aqui buscarlo, bajarlo e instalarlo https://tracker.debian.org/pkg/virtualbox Despues de instalarlo a veces sale este error There were problems setting up VirtualBox. To re-start the set-up process, ru /sbin/vboxconfig as root. If your system is using EFI Secure Boot you may need to sign the kernel modules (vboxdrv, vboxnetflt, vboxnetadp, vboxpci) before you can load them. Please see your Linux system's documentation for more information. modprobe vboxdrv GRE TUNNEL Tutorial patra configurar Hacerlo persistente con systemd apt install iptables iproute2 ps aux | grep gre ip tunnel show Pantalla modprobe ip_gre iptunnel del gre1 # Solo una vez #echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf #sysctl -p iptunnel add gre1 mode gre local IP_PANTALLA remote IP_SERVIDOR ttl 255 ip addr add 192.168.168.1/30 dev gre1 ip link set gre1 up # aqui ping a 192.168.168.2 # BUYVM # iptables -t nat -A POSTROUTING -s 192.168.168.0/30 ! -o gre+ -j SNAT --to-source IP_PANTALLA # aqui curl ip desde servidor # iptables -t nat -A PREROUTING -d IP_PANTALLA -j DNAT --to-destination 192.168.168.2 # iptables -A FORWARD -d 192.168.168.2 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # If you're wanting to get more specific, you could add: -p tcp --dport 25565 # HETZNER iptables -t nat -A POSTROUTING -s 192.168.168.0/30 ! -o gre+ -j SNAT --to-source IP_PANTALLA # aqui curl ip desde servidor iptables -A FORWARD -d 192.168.168.2 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -A FORWARD -s 192.168.168.2 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t nat -A PREROUTING -d IP_PANTALLA -p tcp -m tcp --dport 80 -j DNAT --to-destination 192.168.168.2 iptables -t nat -A PREROUTING -d IP_PANTALLA -p tcp -m tcp --dport 443 -j DNAT --to-destination 192.168.168.2 Extras keepalive en el servidor crontab -e */1 * * * * ping -c2 192.168.168.1 ps aux | grep gre ip tunnel show Servidor modprobe ip_gre iptunnel del gre1 iptunnel add gre1 mode gre local IP_SERVIDOR remote IP_PANTALLA ttl 255 ip addr add 192.168.168.2/30 dev gre1 ip link set gre1 up # TEST-1 ping a 192.168.168.1 # Solo una vez, esto solo se puede borrar luego manualmente # echo '100 GRETUNNEL1' >> /etc/iproute2/rt_tables ip rule add from 192.168.168.0/30 table GRETUNNEL1 ip route add default via 192.168.168.1 table GRETUNNEL1 # TEST-2 # curl http://www.cpanel.net/showip.cgi --interface 192.168.168.2 # wget http://www.cpanel.net/showip.cgi --bind-address=192.168.168.2 -q -O - Persistente crear en cliente y servidor en /etc/systemd/system un nuevo servicio greTunnel.service [Unit] Description=levantar gre tunnel After=network.target [Service] ExecStart=sh /ruta/hasta/el/script Restart=always User=root Group=root Type=simple [Install] WantedBy=multi-user.target","title":"Debian"},{"location":"debian/#debian-12-bookworm","text":"","title":"DEBIAN 12 BOOKWORM"},{"location":"debian/#stable","text":"Para andar con ojo en las actualizaciones instalar aptitude install apt-listbugs Debian Package Searcher Repositories nano /etc/apt/sources.list ## Debian stable deb https://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware ## Debian security deb https://deb.debian.org/debian-security bookworm-security non-free contrib main non-free-firmware ## Debian updates deb https://deb.debian.org/debian/ bookworm-updates non-free contrib main non-free-firmware ## Debian backports #deb https://deb.debian.org/debian/ bookworm-backports main contrib #non-free non-free-firmware ## Insync deb https://apt.insync.io/debian bookworm non-free contrib ## Debian Multimedia #deb http://www.deb-multimedia.org/ bookworm main non-free # Chrome deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main # Teamviewer #deb [signed-by=/usr/share/keyrings/teamviewer-keyring.gpg] #https://linux.teamviewer.com/deb stable main apt install aptitude htop smartmontools sshpass rsync curl wget nano apt-transport-https iperf zip arc arj bzip2 cabextract lzop nomarch p7zip p7zip-full pax tnef unrar-free unzip deborphan net-tools intel-microcode hdparm ncdu rename iftop nethogs tcptrack dnsutils Para instalar Dropbox","title":"STABLE"},{"location":"debian/#commands","text":"Add font fc-cache -f -v - tras haber copiado la fuente a /usr/share/fonts gpg gpg -c file.txt - cifra a archivo binario gpg -ca file.txt - cifra a archivo de texto gpg --output output.txt -d file.(gpg or txt) - para descifrar // convertir directorio en un archivo tar czf myfiles.tar.gz mydirectory/ // convertir archivo a un directorio tar xzf myfiles.tar.gz echo RELOADAGENT | gpg-connect-agent - para eliminar de la memoria la clave y que la pida al descomprimir grep Eliminar todas las lineas de una fichero que contienen un determinado 'texto' cat nombreArchivo | grep -v 'texto' > nuevoArchivo cat nombreArchivo | grep -v -e 'texto1' -e 'texto2' > nuevoArchivo cat nombreArchivo | grep -v -E 'texto1|texto2' > nuevoArchivo Coger solo las lineas de un archivo que contienen un determinado 'texto' grep -i \"texto\" nombreArchivo Eliminar lineas usando archivo temporal grep -v \"text\" archivo.txt > temp.txt && mv temp.txt archivo.txt Quedarte solo con determinadas lineas en un archivo grep -i \"text\" archivo.txt > temp.txt && mv temp.txt archivo.txt zip zip -er zipName.zip path/to/folder/ - Comprimir carpeta con contrase\u00f1a dpkg dpkg -i package.deb - apt-get -f install - reparar dependencias incumplidas si las hay dpkg -r onlyThaName - desinstalar debconf-show nombrePaquete - muestra configuracion del paquete instalado dpkg-reconfigure nombrePaquete - para reconfigurar el paquete Tama\u00f1o de ficheros y carpetas ls -lh du -ah /path du -h -d1 | sort -h Lista de directorios (ocultos incluidos) con su tama\u00f1o df -h du -sh * Lista de directorios (no ocultos) con su tama\u00f1o apt install ncdu ncdu Dividir archivo en varios Dividir archivo en trozos de 200mb asegurandoes que el corte no se produce en medio de una linea split -C 200m archivo.txt Limpieza apt-get autoclean && apt-get autoremove && apt-get remove --purge `deborphan` dpkg -l | grep -v ^ii | awk '{print $2}' | sed '1,5d'|xargs dpkg --purge Ver el tama\u00f1o de los logs y limpiar todos excepto los ultimos 3 dias journalctl --disk-usage journalctl --vacuum-time=3d Limpiar caches de imagenes du -sh ~/.cache/thumbnails rm -rf ~/.cache/thumbnails/* Process pgrep processName - buscar proceso ps - listar todos los procesos kill processNumber - matar proceso fg - continuar el proceso que estaba detenido nohup comando & - Ejecuta un comando en segundo plano y sigue ejecutandolo aunque salgamos de esa terminal ulimits error too many open files lsof - para encontrar file descriptors usados lsof -p PID | wc -l - indica cuantos file descriptors (archivos u otros recursos como conexiones http) tiene abiertos el proceso PID lsof -c PROCESS-NAME | wc -l - igual que arriba pero por nombre ulimit -n - muestra el limite de fd que el usuario puede usar ulimit -n 4096 - sube ese limite por ejemplo lo normal es 1024 a 4096 pero solo para esa sesion // Para Hacerlo permamente nano /etc/security/limits.conf userName soft nofile 2000 * hard nofile 500000 * soft nofile 500000 root hard nofile 500000 root soft nofile 500000 // Cambiar el limite de fd de un proceso en ejecucion prlimit --pid pidID --nofile=soft:hard prlimit --pid XXXX --nofile=XXXX:XXXX en nginx user www-data; worker_processes 4; pid /run/nginx.pid; worker_rlimit_nofile 50000; events { worker_connections 4000; # multi_accept on; } Buena guia Incrementar limites -> Por usuario nano /etc/security/limits.conf A\u00f1adir al final * hard nofile 500000 * soft nofile 500000 root hard nofile 500000 root soft nofile 500000 Guardar el archivo y hacer logout y login de nuevo Si esto no funciona probar con pam-limits nano /etc/pam.d/common-session a\u00f1adir session required pam_limits.so -> Para Todo el Sistema nano /etc/sysctl.conf a\u00f1adir fs.file-max = 2097152 Salimos y ejecutamos sysctl -p -> Verificar que funcionan los nuevos limites cat /proc/sys/fs/file-max Hard Limit ulimit -Hn Soft Limit ulimit -Sn verificar para un usuario su - nombreUsuario -c 'ulimit -aHS' -s '/bin/bash' Verificar para un proceso en ejecucion conseguimos el PID ps aux | grep nombreDelProceso cat /proc/XXX/limits Buscar find /path -name fileName - Buscar archivo find /path -type d -name dirName - Buscar carpeta Crear nuevo usuario useradd -d /home/username -m -s /bin/bash username - Crea un usuario con su carpeta home y consola para usar passwd username - Para crear la contrase\u00f1a del usuario Zona horaria dpkg-reconfigure tzdata - reconfigurar la zona horaria cpulimit apt-get install cpulimit ps aux | grep nombreProceso - nos da el id del proceso cpulimit -p id -l 30 - limita el proceso id al 30% cpulimit -e nombreProceso -l 50 - limita el proceso nombreProceso al 50% A\u00f1adir & para recuperar el control de la consola cpu_steal cat /proc/stat cpu 56933 276 469486 39394437 19656 0 159573 1942961 0 0 total_cpu_time = 56933 + 276 + 469486 + 39394437 + 19656 + 0 + 159573 + 1942961 + 0 + 0= 41308022 steal = (1942961 / 41308022) * 100 \u2248 4.70% cambiar hostname hostnamectl set-hostname NUEVO_HOSTNAME nano /etc/hostname nano /etc/hosts systemctl restart systemd-hostnamed averiguar la version de debian lsb_release -a dns dig domain.tld @9.9.9.9 cron crontab -e // activar los logs de cron nano /etc/rsyslog.conf // descomentar la linea #cron.* -/var/log/cron service rsyslog restart // ejecutar algo al inicio del servidor crontab -e // como root @reboot cd /home/user/donde-sea && ./programa nmap nmap -Pn X.X.X.X || hostname rename multiple files at once apt install rename // Reemplazar la 1 ocurrencia de abc por xyz rename 's/abc/xyz/' * curl // tiempo en ir, procesar y volver curl -o /dev/null -s -w 'Total: %{time_total}s\\n' https://pagina.web","title":"COMMANDS"},{"location":"debian/#security","text":"","title":"SECURITY"},{"location":"debian/#ssh","text":"aptitude install openssh-server openssh-client nano /etc/ssh/sshd_config // Para quitar acceso como root # Authentication: LoginGraceTime 120 PermitRootLogin without-password // jode mas que poner solo no StrictModes yes // Por seguridad # Para permitir contrase\u00f1as vacias pon yes (NI SE TE OCURRA HACERLO) PermitEmptyPasswords no service ssh restart sshpass -p contrase\u00f1a ssh usuario@dominio Broken pipe Para prevenir desconexiones del tipo broken pipe nano -c /etc/ssh/ssh_config Host * ServerAliveInterval 120","title":"SSH"},{"location":"debian/#sshfs","text":"mkdir /local/path sshfs user@hostname:/remote/path /local/path // al terminar fusermount -u /local/path","title":"SSHFS"},{"location":"debian/#clamav","text":"Antivirus para asegurarnos de que no somos conductores de virus entre maquinas windows y por si las moscas ... apt-get install clamav clamav-docs clamav-daemon clamav-freshclam aptitude install arc arj bzip2 cabextract lzop nomarch p7zip pax tnef unrar-free unzip zoo lha unrar - Para que escanee archivos comprimidos nano /etc/clamav/freshclam.conf - El archivo de configuracion por si queremos cambiar algo. service clamav-freshclam restart - hacerlo despues para cargar la nueva configuracion // Para actualizar, como root freshclam // Si esta bloqueado /etc/init.d/clamav-freshclam stop //despues => service clamav-freshclam start // para escanear como usuario normal clamscan -r /ruta/a/escanear","title":"CLAMAV"},{"location":"debian/#rkhunter","text":"aptitude install rkhunter //para actualizar, como root rkhunter --propupd rkhunter --update //para usar, como root tambien rkhunter --check","title":"RKHUNTER"},{"location":"debian/#fail2ban","text":"apt-get install fail2ban whois python3-systemd cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local nano /etc/fail2ban/jail.local // Aqui van las IPs que no tendran esas restricciones [DEFAULT] # \"ignoreip\" can be an IP address, a CIDR mask or a DNS host ignoreip = 127.0.0.1 192.168.1.0/24 bantime = 1800 maxretry = 3 // Correo al que avisar ante sucesos # Destination email address used solely for the interpolations in # jail.{conf,local} configuration files. destemail = root@localhost [webmin] enabled = true port = 10000 filter = webmin-auth banaction = iptables-multiport action = %(action_mwl)s logpath = /var/log/auth.log maxretry = 3 [ssh] backend=systemd enabled = true port = ssh filter = sshd logpath = /var/log/auth.log maxretry = 3 [ssh-ddos] backend=systemd enabled = true port = ssh filter = sshd-ddos logpath = /var/log/auth.log maxretry = 3 systemctl restart fail2ban.service systemctl status fail2ban.service Los logs de baneos estan en estos dos archivos /var/log/fail2ban.log /var/log/auth.log manual unban fail2ban-client set ssh unbanip X.X.X.X","title":"FAIL2BAN"},{"location":"debian/#ufw","text":"apt-get install ufw ufw allow ssh/tcp ufw logging on Antes de esto no se podia activar porque nos echa de la sesion de SSH. Ahora si => ufw enable ufw allow smtp/tcp ufw allow http/tcp ufw allow https/tcp ufw allow webmin ufw status - rules list ufw status numbered - numbered rules list ufw delete X - delete rule X bloquear IPs ufw insert 1 deny from X.X.X.X to any nano -c /etc/ufw/before.rules # End required lines -A ufw-before-input -s X.X.X.X -j DROP ufw reload","title":"UFW"},{"location":"debian/#pm2","text":"Instalar npm install pm2 -g npm remove pm2 -g Configuracion DOCS pm2 startup - como usuario y seguir instrucciones para hacer que pm2 se ejecute en los reinicios sin necesitar ser root pm2 unstartup - para desmontar el chiringuito NO SIEMPRE Para ejecutar los procesos como user y no como root chmod -R 777 /home/user/.pm2 Comandos pm2 start app.js pm2 kill // para la ejecucion pero con un reboot se activara de nuevo pm2 list pm2 stop all|number pm2 restart all|number pm2 delete 7 // elimina el proceso especifico con ese id pm2 save // salva la lista de procesos en ese momento pm2 start app.js --name \"my-name\" pm2 restart app --name \"nuevo-nombre\" --update-env // para renombrar pm2 reset app // pone el contador de restarts a cero dev pm2-dev start app.js pm2-dev start app.js --ignore folder1,folder2,file3.txt cluster variables // -i numero de procesos que levanta pm2 start name.js -i max process.env.NODE_APP_INSTANCE; process.env.name process.env.pm_id max-memory-restart pm2 start geoip.js -i max --max-memory-restart 1300M 50M 50K 1G scale // Sumar 3 procesos al actual pm2 scale app +3 // deja 3 procesos activos de todos los que este usando actualmente pm2 scale app 3 cluster logs in the same file // ecosystem.config.js module.exports = { apps: [{ name: 'codetabs', script: 'codetabs.js', ignore_watch: [\"node_modules\", \"tmp\"], output: './../logs/hits.log', error: './../logs/errors.log', env: { NODE_ENV: \"development\", }, env_production: { NODE_ENV: \"production\", }, instances: 8, max_memory_restart: \"1G\", merge_logs: true, log_date_format: 'YYYY-MM-DD HH:mm:ss', }] }; pm2 start ecosystem.config.js --env production","title":"PM2"},{"location":"debian/#npm-sin-ser-root","text":"Usando nvm https://nodejs.org/en/download # Download and install nvm: using curl | bash curl -o- https://raw.githubusercontent.com/nvm/install.sh | bash nvm install numeroVersion node -v # ver version de node nvm current # lo mismo npm -v # ver version de npm # ya esta, ahora npm install -g Usando nodesource // crear carpeta para los paquetes globales mkdir \"${HOME}/.npm-packages\" // crear .npmrc nano ${HOME}/.npmrc prefix=${HOME}/.npm-packages //editar .bashrc nano ${HOME}/.bashrc NPM_PACKAGES=\"${HOME}/.npm-packages\" PATH=\"$NPM_PACKAGES/bin:$PATH\" unset MANPATH # delete if already modified MANPATH elsewhere export MANPATH=\"$NPM_PACKAGES/share/man:$(manpath)\" // recargar la configuracion para aplicar los cambios source ~/.profile","title":"NPM sin ser ROOT"},{"location":"debian/#systemd","text":"systemctl status servidorGO - nos da informacion del servicion Crear Servicio nano /etc/systemd/servidorGO.service cp servidorGO.service /etc/systemd/system systemctl enable servidorGO.service service servidorGO.service start Borrar servicio systemctl stop [servicename] systemctl disable [servicename] rm /etc/systemd/system/[servicename] systemctl daemon-reload systemctl reset-failed nombre.service [Unit] Description= Descripcion de la tarea [Service] User=user Group=www-data Restart=on-failure WorkingDirectory=/var/www/path/to/binary/folder ExecStart=/var/www/path/to/binary/folder/binaryName [Install] WantedBy=multi-user.target Commandos service name status service name start systemctl enable name.service systemctl disable name.service systemctl start name.service systemctl stop name.service systemctl restart name.service systemctl status name.service systemctl reload name.service // Required files /etc/systemd/servidorGO.service /etc/systemd/system/servidorGO.service /etc/systemd/system/multi-user.target.wants/servidorGO.service /sys/fs/cgroup/systemd/system.slice/servidorGO.service Otra opcion ? nano /lib/systemd/system/name.service [Unit] Description= Task description [Service] Type=simple Restart=always RestartSec=5s ExecStart=/var/www/path/to/binary/folder/binaryName [Install] WantedBy=multi-user.target service name start service name status // para activarlo desde el reinicio del sistema systemctl enable name.service","title":"SYSTEMD"},{"location":"debian/#systemd-sin-ser-root","text":"Systemd sin ser ROOT Primero asegurarnos de que este instalado dbus para user apt install dbus-user-session apt install policykit-1 por si da guerra org.freedesktop.policytoolkit1 Creamos carpeta donde guardar los servicios mkdir -p ~/.config/systemd/user En esa carpeta creamos el nombreservicio.service [Unit] Description= Descripcion de la tarea After=network.target [Service] RestartSec=5s Restart=always WorkingDirectory=/ruta/a/la/carpeta/del/binario ExecStart=/ruta/a/la/carpeta/del/binario/./nombreDelBinario StandardOutput=append:/home/ruta//al/info.log StandardError=append:/home/ruta/al/error.log [Install] WantedBy=default.target Ahora hacemos que systemd reconozca los cambios systemctl --user daemon-reload Ya podemos gestionar el servicio systemctl --user start nombreDelServicio systemctl --user stop nombreDelServicio systemctl --user restart nombreDelServicio systemctl --user status nombreDelServicio Para que el servicio se inicie automaticamente cuando el usuario se loguea systemctl --user enable nombreDelServicio // sin el .service al final Para desactivarlo systemctl --user disable nombreDelServicio Hay que hacer que el servicio corra siempre, este o no logueado el due\u00f1o y al inicio del sistema. Para ello como root ejecutamos loginctl enable-linger NOMBREUSUARIO Ya como usuario normal podemos ver el estado de los servicios loginctl user-status NOMBREUSUARIO","title":"SYSTEMD sin ser ROOT"},{"location":"debian/#nginx","text":"Instalacion apt-get install nginx chown -R user:user /var/www - Para darle permisos al usuario para toda esa carpeta mkdir -p /var/www/site1 mkdir -p /var/www/site2","title":"NGINX"},{"location":"debian/#configuracion","text":"nano /etc/nginx/nginx.conf El archivo de configuracion se llama default y esta en la carpeta /etc/nginx/sites-available .Lo borramos o lo renombramos a default.old . La copia de default que esta en /etc/nginx/sites-enabled hay que borrarla Ahora podemos crear nuestro archivo/s de configuracion. nano /etc/nginx/sites-available/domain cp /etc/nginx/sites-available/domain /etc/nginx/sites-enabled/domain service nginx restart nginx -s reload solo para recargar el archivo de configuracion","title":"Configuracion"},{"location":"debian/#server-side-includes","text":"Server Side Includes Directivas y variables ssi on - /etc/nginx/sites-available Para las rutas ojo porque es desde la raiz del servidor web nginx para esa location <!-- Head --> <!--#include file=\"/_public/templates/head.html\" -->","title":"server-side-includes"},{"location":"debian/#ocultar-la-version-de-nginx","text":"nano /etc/nginx/nginx.conf http { server_tokens off; }","title":"ocultar la version de nginx"},{"location":"debian/#headerscabeceras","text":"Ojo, que algunas pueden restringir el comportamiento de las aplicaciones que tengamos # Headers to be added: add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains\" always; add_header X-Frame-Options \"DENY\"; add_header X-Content-Type-Options \"nosniff\"; add_header X-XSS-Protection \"1; mode=block\"; add_header Content-Security-Policy \"default-src 'self'\"; En el location block para evitar cualquier indexacion de esa location por parte de los robots de busqueda add_header X-Robots-Tag \"noindex, nofollow, nosnippet, noarchive\";","title":"headers(cabeceras)"},{"location":"debian/#limitar-tamano-de-los-archivos-de-subida","text":"location /count-loc/ { # set client body size to 10M client_max_body_size 10M; }","title":"Limitar tama\u00f1o de los archivos de subida"},{"location":"debian/#rate-limit","text":"nano /etc/nginx/nginx.conf // aqui definimos por ejemplo la zona=one # limit requests limit_req_zone $binary_remote_addr zone=one:10m rate=2r/s; //luego hay que aplicarlo, mejor en location que en server nano /etc/nginx/sites-available/domain location /count-loc/ { # requests limit limit_req zone=one burst=20; } Apply limits per IP geo $limit { default 1; X.X.X.X 0; Y.Y.Y.Y 0; } map $limit $limit_key { 0 \"\"; 1 $binary_remote_addr; } limit_req_zone $limit_key zone=one:10m rate=5r/s; limit_req_zone $limit_key zone=two:10m rate=1r/m; limit_req_zone $limit_key zone=three:10m rate=12r/m; limit_req_zone $limit_key zone=four:10m rate=2r/s;","title":"rate Limit"},{"location":"debian/#http2","text":"nano /etc/nginx/nginx.conf // usar solo cifrados muy seguros ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256: RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; // hay que generar una nuevas claves, lo mejor en /etc/nginx/ssl cd /etc/nginx/ssl openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048 // http2 solo funciona con https asi que en el bloque de listen 443 listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; # my cipher ssl_dhparam /etc/nginx/ssl/dhparam.pem; // para mejorar rendimiento ssl_session_cache shared:SSL:5m; ssl_session_timeout 1h;","title":"http2"},{"location":"debian/#cache","text":"// en sites-availables bloque propio # Expires map map $sent_http_content_type $expires { default off; text/html epoch; text/css 7d; application/javascript 7d; ~image/ max; } // luego en el bloque server que queramos a\u00f1adir expires $expires;","title":"cache"},{"location":"debian/#zonas-privadas","text":"// crear archivo con la contrase\u00f1a apt-get install apache2-utils cd /etc/nginx htpasswd -c .rethinkdb.pass <username> // will ask for password service nginx restart server { listen 443 ssl; server_name sub.domain.com; location / { ... } location /private/ { auth_basic \"Restricted\"; auth_basic_user_file /etc/nginx/.rethinkdb.pass; ... root or proxy for this location } }","title":"zonas privadas"},{"location":"debian/#custom-404","text":"mkdir /var/www/error => 404.html 404.css , js, png ... server { error_page 404 /404.html; location = /404.html { root /var/www/error; internal; } location = /404.css { root /var/www/error; } location = /caution.png { root /var/www/error; } } En 404.html llamamos a los recursos usando rutas absolutas <link rel=\"stylesheet\" type=\"text/css\" href=\"/404.css\">","title":"custom 404"},{"location":"debian/#block-domains","text":"map $http_referer $bad_referer { default 0; \"~spamdomain1.com\" 1; \"~spamdomain2.com\" 1; \"~spamdomain3.com\" 1; } if ($bad_referer) { return 444; }","title":"block domains"},{"location":"debian/#nginxconf","text":"actualizado 2019-05-08 user www-data; worker_processes auto; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf; events { worker_connections 768; # multi_accept on; } http { ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; server_tokens off; server_names_hash_bucket_size 64; # 128? # server_name_in_redirect off; include /etc/nginx/mime.types; default_type application/octet-stream; # set client body size to 5M # client_max_body_size 2M; # limit requests geo $limit { default 1; X.X.X.X 0; #server1 X.X.X.X 0; #server2 X.X.X:X 0; #server3 X.X.X.X 0; #server4 } map $limit $limit_key { 0 \"\"; 1 $binary_remote_addr; } limit_req_zone $limit_key zone=one:10m rate=5r/s; limit_req_zone $limit_key zone=two:10m rate=2r/m; limit_req_zone $limit_key zone=three:10m rate=12r/m; limit_req_zone $limit_key zone=four:10m rate=2r/s; limit_req_zone $limit_key zone=five:10m rate=1r/s; limit_req_zone $limit_key zone=six:1000m rate=10r/s; ## # SSL Settings ## ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA +AES256:EECDH+3DES:RSA+3DES:!MD5; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ## # Gzip Settings ## gzip on; gzip_disable \"msie6\"; gzip_vary on; gzip_proxied any; gzip_comp_level 6; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_types text/plain text/css application/json application/javascript text/xml application/xml applicati$ ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; }","title":"nginx.conf"},{"location":"debian/#dominio-templateconf","text":"actualizado 2019-05-08 ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem; ssl_session_cache shared:SSL:10m; ssl_session_timeout 1h; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # my cipher ssl_dhparam /etc/nginx/ssl/dhparam.pem; # server-side-includes ssi on; # Headers to be added: add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains\" always; add_header X-Frame-Options \"DENY\"; add_header X-Content-Type-Options \"nosniff\"; add_header X-XSS-Protection \"1; mode=block\"; #add_header Content-Security-Policy \"default-src 'self'\"; #cache # set client body size to 4M # # client_max_body_size 4M; expires $expires; # custom error error_page 404 /404.html; location = /404.html { root /var/www/codetabs/www/_error; internal; } location = /404.css { root /var/www/codetabs/www/_error; } location = /ct24r.png { root /var/www/codetabs/www/_error; } location = /ct64r.png { root /var/www/codetabs/www/_error; } error_page 429 /429.html; location = /429.html { root /var/www/codetabs/www/_error; #internal; } location /_public { # requests limit, ojo que enlentece la carga de la pagina # limit_req zone=one burst=50; alias /var/www/codetabs/www/_public; }","title":"dominio-template.conf"},{"location":"debian/#sitesdomain","text":"actualizado 2019-05-08 # Expires map map $sent_http_content_type $expires { default off; text/html epoch; text/css 7d; application/javascript 7d; ~image/ max; } server { listen 80; # Listen to your server ip address server_name 212.24.108.85; # Redirect all traffic comming from your-server-ip to your domain return 301 https://domain.com$request_uri; } server { listen 80; listen [::]:80; server_name domain.com www.domain.com; return 301 https://domain.com$request_uri; server_name *.domain.com; return 301 https://*.domain.com$request_uri; } server { listen 443 ssl; listen [::]:443 ssl; server_name www.domain.com; ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem; return 301 https://domain.com$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name domain.com; include /etc/nginx/sites-available/domain.conf; # enable CORS # add_header Access-Control-Allow-Origin '*'; location / { root /var/www/domain/html; index index.html; } location /freecodecamp { root /var/www/domain; index index.html; } location /notes { root /var/www/domain; index index.html; } } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name api.domain.com; include /etc/nginx/sites-available/domain.conf; # enable CORS add_header 'Access-Control-Allow-Origin' '*' always; location /github-stars/ { # requests limit limit_req zone=three ;#burst=50; proxy_pass http://127.0.0.1:3501/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; # Para coger ip de visitante a\u00f1adir las siguientes dos lineas proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /count-loc/ { # requests limit limit_req zone=three ;#burst=50; # set client body size to 10M client_max_body_size 10M; proxy_pass http://127.0.0.1:3502/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; # Para coger ip de visitante a\u00f1adir las siguientes dos lineas proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /game/ { # requests limit limit_req zone=three ;#burst=50; proxy_pass http://127.0.0.1:3503/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; # Para coger ip de visitante a\u00f1adir las siguientes dos lineas proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name test.domain.com; include /etc/nginx/sites-available/domain.conf; location /admin { # requests limit # limit_req zone=one ;#burst=50; auth_basic \"Area 51\"; auth_basic_user_file /etc/nginx/.admin.pass; root /var/www/domain; index admin.html; } }","title":"SITES/DOMAIN"},{"location":"debian/#subcarpeta-con-php","text":"Hracias serversforhackers.com server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name domain.com; include /etc/nginx/sites-available/domain.conf; # enable CORS #add_header Access-Control-Allow-Origin '*'; location / { root /var/www/domain/beta; index index.html; } location ^~ /blog { alias /var/www/wp-domain; index index.php; try_files $uri $uri/ @nested; location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_param SCRIPT_FILENAME $request_filename; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; } } location @nested { rewrite /blog/(.*)$ /blog/index.php?/$1 last; } location ~ /\\. { deny all; } location ~* /(?:uploads|files)/.*\\.php$ { deny all; } } Dokuwiki # DokuWiki location ^~ /wiki { alias /var/www/dokuwiki; index index.php; try_files $uri $uri/ @nested; location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_param SCRIPT_FILENAME $request_filename; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; } # dokuwiki security location ~ /wiki/(conf|bin|inc)/ { deny all; } location ~ /wiki/data/ { internal; } } location @nested { rewrite /wiki/(.*)$ /wiki/index.php?/$1 last; } location ~ /\\. { deny all; } location ~* /(?:uploads|files)/.*\\.php$ { deny all; }","title":"Subcarpeta con PHP"},{"location":"debian/#repartir-peticiones","text":"// etc/nginx/nginx.conf http { upstream backend_servers { server 127.0.0.1:3020 weight=50; # 25% del tr\u00e1fico server 127.0.0.1:3021 weight=150; # 75% del tr\u00e1fico } } // ya en pagina.cpnf en lugar del tipico #proxy_pass http://127.0.0.1:3021/servicio; proxy_pass http://backend_servers/servicio;","title":"Repartir peticiones"},{"location":"debian/#webmin","text":"Instalacion Descarga el .deb de aqui dpkg -i package.deb Si debian protesta de dependencias instala las que pida. Estas son las mas posibles: apt install perl libnet-ssleay-perl openssl libpam-runtime libio-pty-perl python libauthen-pam-perl libio-pty-perl apt-show-versions Para desinstalar paramos service webmin stop y despues /etc/webmin/uninstall.sh Modulos nginx module - https://www.justindhoffman.com/project/nginx-webmin-module webmin -> webmin configuration -> webmin modules Actualizacion Despues de actualizarse hay veces que no arranca /etc/init.d/webmin stop /etc/init.d/webmin start Cambiar el password Para cambiar la contrase\u00f1a desde la consola /usr/share/webmin/changepass.pl /etc/webmin root NEWPASSWORD Lets Encrypt Webmin webmin > webmin Configuration > SSL Encryption > SSL Settings /etc/letsencrypt/live/nombreCert/privkey.pem /etc/letsencrypt/live/nombreCert/cert.pem Apply -> service nginx restart","title":"WEBMIN"},{"location":"debian/#certificados-autofirmados","text":"cd /etc/nginx/ssl openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout selfsigned.key -out selfsigned.crt ya se pueden usar como dummies en nginx en lugar de los verdaderos de letsencrypt para simular https","title":"CERTIFICADOS AUTOFIRMADOS"},{"location":"debian/#lets-encrypt","text":"HTTPS certbot apt-get install certbot python3-certbot-nginx - install Create certificate 12-12-2024 certbot --nginx -d el.dominioquesea.com // This certificate expires on 2025-03-12. // These files will be updated when the certificate renews. // Certbot has set up a scheduled task to automatically renew // this certificate in the background. // Deploying certificate // Could not install certificate // perfecto, pues los crea sin tocar la conf de nginx // crea los certs en /etc/letsencrypt/live // luego ya los configuras en las conf de nginx Create certificate // primero parar nginx service nginx stop // Usar la opcion standalone y creamos todos los dominios juntos // (domain.com www.domain.com sub.domain.com etc) certbot certonly Saving debug log to /var/log/letsencrypt/letsencrypt.log How would you like to authenticate with the ACME CA? ------------------------------------------------------------------------- 1: Place files in webroot directory (webroot) 2: Spin up a temporary webserver (standalone) ------------------------------------------------------------------------- Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2 Please enter in your domain name(s) (comma and/or space separated) (Enter 'c' to cancel):domain.com www.domain.com sub.domain.com Obtaining a new certificate Performing the following challenges: tls-sni-01 challenge for domain.com tls-sni-01 challenge for www.domain.com Waiting for verification... Cleaning up challenges Generating key (2048 bits): /etc/letsencrypt/keys/0067_key-certbot.pem Creating CSR: /etc/letsencrypt/csr/0067_csr-certbot.pem IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/domain.com/fullchain.pem. Your cert will expire on 2017-11-11. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew *all* of your certificates, run \"certbot renew\" - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le Listar certificados certbot certificates - Lista de todos los certificados existentes A\u00f1adir certificado service nginx stop - paramos nginx certbot certonly -d admin.domain.com,api.domain.com,domain.com, sp500.domain.com,www.domain.com,otrosub.domain.com --expand - Eliminar certificado certbot delete - y seleccionamos el que queramos borrar Renovar certbot renew --dry-run - solo testea certbot renew - renueva de verdad certbot renew --force-renew - fuerza la renovacion aunque falte mucho tiempo aun para su caducidad certbot renew --dry-run --cert-name domain.tld ` webroot , no hace falta parar nginx para hacer las renovaciones Leer el manual de certot server { listen 80; listen [::]:80; server_name beta.domain.tld; # location / { # root /var/www/beta.domain.tld; # index index.html; # } return 301 https://beta.domain.tld$request_uri; # } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name beta.domain.tld; ssl_certificate /etc/letsencrypt/live/beta.domain.tld/fullchain.pem; # ssl_certificate_key /etc/letsencrypt/live/beta.domain.tld/privkey.pem; # ssl_session_cache shared:SSL:10m; ssl_session_timeout 1h; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; ssl_dhparam /etc/nginx/ssl/dhparam.pem; #add_header X-Robots-Tag \"noindex, nofollow, nosnippet, noarchive\"; location / { root /var/www/beta.domain.tld; index index.html; } } certbot certonly --webroot -w /var/www/domain.tld -d domain.tld -d www.domain.tld -d beta.domain.tld staging --staging - permite mayopr numero de intentos mientras testeamos","title":"LETS ENCRYPT"},{"location":"debian/#monitorizar-red","text":"vnstat - Bandwidth aptitude install vnstat // lista todas las interfaces de red disponibles vnstat --iflist // configura interface vnstat -u -i eth0 // comienza la ejecucion del servicio como demonio /etc/init.d/vnstat start // cambia de due\u00f1o para poder escribir en su propia base de datos chown -R vnstat:vnstat /var/lib/vnstat/ monitorizar (como un usuario normal) // tiempo real vnstat -l // serie historica por horas-dias-meses-semanas vnstat -h|d|w|m // top 10 dias vnstat -t archivo configuracion (para cambiar la interfaz que por defecto es eth0) nano /etc/vnstat.conf crontab -e 0 * * * * node /var/www/vnstat/vnstat.js // ejecutar cada hora vnstat -i eth0 --json d // dentro de vnstat.js nload apt install nload iftop apt install iftop nethogs apt install nethogs tcptrack apt install tcptrack tcptrack -i interface muestra todas las conexiones existentes en tiempo real nethogs apt install nethogs","title":"MONITORIZAR RED"},{"location":"debian/#mysql","text":"","title":"MYSQL"},{"location":"debian/#instalar-mysql-57x","text":"instalacion wget => `https://dev.mysql.com/downloads/repo/apt/` dpkg -i packake.deb nano /etc/apt/sources.list.d/mysql.list apt-get update apt-get install mysql-server mysql_secure_installation configuracion nano /etc/mysql/my.cnf // redirige a ... nano /etc/mysql/mysql.conf.d/mysqld.cnf // Descomentar esta line para evitar acceso desde el exterior bind-address = 127.0.0.1 service mysql restart // para crear otros usuarios usamos % en lugar de localhost para // permitir el acceso desde el exterior mysql -u root -pPasswordYouDesire mysql>CREATE USER 'username'@'%' IDENTIFIED BY 'password'; mysql>GRANT ALL ON databaseName.* TO 'username'@'%'; mysql> FLUSH PRIVILEGES; truncate table with fk SET FOREIGN_KEY_CHECKS = 0; TRUNCATE table table_name; SET FOREIGN_KEY_CHECKS = 1;","title":"Instalar MYSQL 5.7.X"},{"location":"debian/#instalar-mysql-80x","text":"Aviso sobre el nuevo sistema de autenticacion MySQL 8 uses a new authentication based on improved SHA256-based password methods. It is recommended that all new MySQL Server installations use this method going forward. This new authentication plugin requires new versions of connectors and clients, with support for this new 8 authentication(caching_sha2_password). Currently MySQL 8 Connectors and community drivers built with libmysqlclient21 support this new method. Clients built with older versions of libmysqlclient may not be able to connect to the new server. To retain compatibility with older client software, the default authentication plugin can be set to the legacy value (mysql_native_password) This should only be done if required third-party software has not been updated to work with the new authentication method. The change will be written to the file /etc/mysql/mysql.conf.d/default-auth-override.cnf After installation, the default can be changed by setting the default_authentication_plugin server setting. instalacion wget => `https://dev.mysql.com/downloads/repo/apt/` dpkg -i packake.deb nano /etc/apt/sources.list.d/mysql.list apt-get update apt-get install mysql-server mysql_secure_installation configuracion nano /etc/mysql/my.cnf // se ven todos los sitios donde puede estar la configuracion // vamos a ... nano /etc/mysql/mysql.conf.d/mysqld.cnf // y debajo de [mysqld] escribimos bind_address = 127.0.0.1 // para prohibir acceso desde el exterior service mysql restart // para crear otros usuarios usamos % en lugar de localhost para // permitir el acceso desde el exterior mysql -u root -pPasswordYouDesire mysql>CREATE USER 'username'@'%' IDENTIFIED BY 'password'; mysql>GRANT ALL ON databaseName.* TO 'username'@'%'; mysql> FLUSH PRIVILEGES; // para apagar mysql password validation UNINSTALL COMPONENT 'file://component_validate_password';","title":"Instalar MYSQL 8.0.X"},{"location":"debian/#redis","text":"","title":"REDIS"},{"location":"debian/#instalar-redis-40x","text":"Instalar apt -t stretch-backports install \"redis-server\" service redis status Configurar nano /etc/redis/redis.conf appendonly yes appendfsync everysec service redis restart","title":"Instalar REDIS 4.0.X"},{"location":"debian/#vps","text":"Benchmark (curl -s wget.racing/nench.sh | bash; curl -s wget.racing/nench.sh | bash) 2>&1 | tee nench.log wget -qO- bench.sh | bash Ram dmidecode -t 17 dd if=/dev/zero of=/dev/null bs=1024M count=200 iperf apt install iperf iperf -c iperf.online.net speedtest curl -Lo speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py chmod +x speedtest-cli http://speedtest.tele2.net/ download wget -O /dev/null http://speedtest.tele2.net/1GB.zip upload curl -T 1GB.zip ftp://speedtest.tele2.net/upload/ hard disk apt install smartmontools // informacion smartctl -a /dev/sda // testear smartctl -t short|long|select /dev/sda // resultados smartctl -a /dev/sda // o solo testear smartctl -l selftest /dev/sdc // informacion hdparm -I /dev/sda // testea hdparm -tT /dev/sda // testea dd if=/dev/zero of=/tmp/output conv=fdatasync bs=384k count=1k; rm -f /tmp/output dd if=/dev/zero of=testfile bs=1M count=1024 oflag=direct more benchmarks openssl speed rsa openssl speed -multi numCores rsa2048 7z b SYS arm-XT arreglar el bug de poca velocidad de subida lowendtalk apt install linux-image-4.9.0-6-armmp linux-headers-4.9.0-6-armmp apt purge *armada* reboot modprobe error ufw wget http://last.public.ovh.hdaas.snap.mirrors.ovh.net/ubuntu/pool /main/l/linux-modules-armada375/linux-modules-armada375_4.5.2-4_armhf.deb dpkg -i linux-modules-armada375_4.5.2-4_armhf.deb grub-mkconfig -o /boot/grub/grub.cfg rsync De local a otra remota rsync -aP /home/user/data/ user@destiny.com:/home/user/data # automatizado sin preguntar contrase\u00f1a rsync -arv --delete -e \"sshpass -f '/file/with/passwd' || -p 'password' ssh -p PORT -o StrictHostKeyChecking=no\" --progress /source/data/ user@domain.com:/destination/data De otra remota a local * rsync -charvzP --delete -e \"sshpass -p 'pass' ssh -p port\" --progress user@remote.host:/remote/path /local/path/","title":"VPS"},{"location":"debian/#test-api","text":"siege siege -c 30 -r 1 --no-parser https://api.codetabs.com/v1/ siege -c250 -d10 -t3 https://api.codetabs.com/v1/proxy?quest=http Apache Bench apt-get install apache2-utils - -n numero de peticiones -c concurrencias Mas info ab -n 1000 -c 10 https://jolav.github.io/ \u00a1 Ojo porque ab asume que todas las respuestas son iguales !. Si content-length es distinta lo considera un error y aparece como failed request","title":"TEST API"},{"location":"debian/#openvpn","text":"Script para instalar Crear un Kill Switch // ON-openvpn.sh #!/bin/bash ufw reset ufw default deny incoming ufw default deny outgoing ufw allow out on tun0 from any to any ufw enable // OFF-openvpn.sh #!/bin/bash ufw reset ufw default deny incoming ufw default allow outgoing ufw enable chmod +x ON-openvpn.sh OFF-openvpn.sh Conectarte a tu openVpn ./on-openvpn.sh ./off-openvpn.sh more","title":"OPENVPN"},{"location":"debian/#flash-firefox","text":"Download from here tar -xzf flash_player_ppapi_linux*.tar.gz cp libpepflashplayer.so /usr/lib/mozilla/plugins cp -r usr/* /usr // restart firefox","title":"FLASH FIREFOX"},{"location":"debian/#virtualbox","text":"Descargar de aqui en el apartado \"All distributions\" el archivo .run https://www.virtualbox.org/wiki/Linux_Downloads Si tras ejecutarlo e instalarlo dice que falta el dkms es ir aqui buscarlo, bajarlo e instalarlo https://tracker.debian.org/pkg/virtualbox Despues de instalarlo a veces sale este error There were problems setting up VirtualBox. To re-start the set-up process, ru /sbin/vboxconfig as root. If your system is using EFI Secure Boot you may need to sign the kernel modules (vboxdrv, vboxnetflt, vboxnetadp, vboxpci) before you can load them. Please see your Linux system's documentation for more information. modprobe vboxdrv","title":"VIRTUALBOX"},{"location":"debian/#gre-tunnel","text":"Tutorial patra configurar Hacerlo persistente con systemd apt install iptables iproute2 ps aux | grep gre ip tunnel show Pantalla modprobe ip_gre iptunnel del gre1 # Solo una vez #echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf #sysctl -p iptunnel add gre1 mode gre local IP_PANTALLA remote IP_SERVIDOR ttl 255 ip addr add 192.168.168.1/30 dev gre1 ip link set gre1 up # aqui ping a 192.168.168.2 # BUYVM # iptables -t nat -A POSTROUTING -s 192.168.168.0/30 ! -o gre+ -j SNAT --to-source IP_PANTALLA # aqui curl ip desde servidor # iptables -t nat -A PREROUTING -d IP_PANTALLA -j DNAT --to-destination 192.168.168.2 # iptables -A FORWARD -d 192.168.168.2 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT # If you're wanting to get more specific, you could add: -p tcp --dport 25565 # HETZNER iptables -t nat -A POSTROUTING -s 192.168.168.0/30 ! -o gre+ -j SNAT --to-source IP_PANTALLA # aqui curl ip desde servidor iptables -A FORWARD -d 192.168.168.2 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -A FORWARD -s 192.168.168.2 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT iptables -t nat -A PREROUTING -d IP_PANTALLA -p tcp -m tcp --dport 80 -j DNAT --to-destination 192.168.168.2 iptables -t nat -A PREROUTING -d IP_PANTALLA -p tcp -m tcp --dport 443 -j DNAT --to-destination 192.168.168.2 Extras keepalive en el servidor crontab -e */1 * * * * ping -c2 192.168.168.1 ps aux | grep gre ip tunnel show Servidor modprobe ip_gre iptunnel del gre1 iptunnel add gre1 mode gre local IP_SERVIDOR remote IP_PANTALLA ttl 255 ip addr add 192.168.168.2/30 dev gre1 ip link set gre1 up # TEST-1 ping a 192.168.168.1 # Solo una vez, esto solo se puede borrar luego manualmente # echo '100 GRETUNNEL1' >> /etc/iproute2/rt_tables ip rule add from 192.168.168.0/30 table GRETUNNEL1 ip route add default via 192.168.168.1 table GRETUNNEL1 # TEST-2 # curl http://www.cpanel.net/showip.cgi --interface 192.168.168.2 # wget http://www.cpanel.net/showip.cgi --bind-address=192.168.168.2 -q -O - Persistente crear en cliente y servidor en /etc/systemd/system un nuevo servicio greTunnel.service [Unit] Description=levantar gre tunnel After=network.target [Service] ExecStart=sh /ruta/hasta/el/script Restart=always User=root Group=root Type=simple [Install] WantedBy=multi-user.target","title":"GRE TUNNEL"},{"location":"expressjs/","text":"EXPRESS 4.20.X USO instalacion npm install -g express - Lo instalamos globalmente npm install -g express-generator - Y el generador de codigo plantilla que nos permite usar el comando express A pelo npm init - te pregunta muchas cosas para generar el package.json Con plantillas express -h Muestra las opciones express --hbs miApp Crea el proyecto miApp con handlebars pej cd miApp & npm install Instala las dependencias api application app Es una instancia de la aplicacion express que se usa normalmente para configurar la aplicacion request req Es una envoltura del objeto request del modulo HTTP usado para extraer informacion sobre la peticion response res Es una envoltura del objeto response del modulo HTTP usado para enviar los datos y cabeceras de la respuesta Application settings: env: production, development ... viewcache view engine: jade, ejs, hbs ... views trustproxy (NGINX) Seguimiento de una peticion en express MAIN FILE app.js o main.js Cosas que se hacen en este fichero: Dependencias - Incluir paquetes de terceros y modulos nuestros como manejadores, utilidades ayudantes y modelos Instanciaciones - configurar las opciones de express como motor de plantillas Configuraciones - ajustes y como conectar las bases de datos Middlewares - Definir middlewares Ruteo - definir rutas Arranque - iniciar la app o exportarla app como un modulo ajustes app.set(nombre, valor) - para definir un valor app.set('port', process.env.PORT || 3000); app.get(nombre) - para conseguir un valor app.enable() - app.disable() - app.enabled() - app.disabled() - env - almacena el modo de entorno actual para ese proceso de node.js. Se toma de process.env.NODE_ENV o se pone development por defecto. Opciones {development, test, stage, preview, production} view cache - ponerlo a true para produccion view engine - view engine views - la ruta absoluta al directorio con las plantillas app.set('views', path.join(__dirname, 'templates')) trust proxy - ponerlo a true se esta detras de un proxy como nginx. Por defecto esta desactivado, para activarlo app.set('trust proxy', true); app.enable('trust proxy'); jsonp callback name - vale para hacer llamadas ajax desde otros dominios usando CORS app.set('jsonp callback name', 'cb'); json replacer - json spaces - son dos parametros que se aplican a todas las funciones JSON.stringify(). replacer es un filtro spaces es valor de indentacion app.set('json replacer', function(key, value){ if (key === 'discount') return undefined; else return value; }); app.set('json spaces', 4); case sensitive routing - por defecto disabled, asi /nombre y /Nombres es la misma ruta strict routing - por defeto disabled, asi /users y /users/ son la misma ruta x-powered-by - establece la opcion de la respuesta x-powered-by con el valor Express. Por seguridad lo mejor es desactivarla app.set('x-powered-by', false) // o app.disable('x-powered-by') etag - dejarlo como esta es lo mejor query parser - para parsear las query-string enviadas en la URL. Por defecto extended (usa el modulo qs), true (qs), false (lo desactiva), simple (usa el modulo del nucleo querystring) app.set('query parser', 'simple'); app.set('query parser', false); app.set('query parser', customQueryParsingFunction); subdomain offset - Para aplicaciones desplegadas en varios subdominios contenido estatico Usar directorio de contenido estatico Para servir contenido estatico se usa el middleware express.static incorporado en express. var publicPath = path.resolve(__dirname, 'public'); app.use(express.static(publicPath)); Ya puedes cargar archivos del directorio public El nombre del directorio public no es parte de la url http://localhost:3000/css/style.css http://localhost:3000/public/css/style.css NO Usar multiples directorios de contenido estatico Express busca los archivos en el orden en el que se declaran los directorios estaticos app.use(express.static('public')); app.use(express.static('files')); Prefijo de ruta virtual app.use('/static', express.static('public')); Ahora para cargar los archivos : http://localhost:3000/static/css/style.css TEMPLATES REQUEST (Peticion) Request API req.query - Esta propiedad es un objeto que tiene una propiedad para cada query string en la ruta. Si no hay query string es un objeto vacio {}. // GET /search?q=jolav req.query.q // => \"jolav\" // GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse req.query.order // => \"desc\" req.query.shoe.color // => \"blue\" req.query.shoe.type // => \"converse\" req.params - Esta propiedad es un objeto con propiedades mapeadas a la ruta \"parametros\". Ejemmplo una ruta /usuario/:nombre, la propiedad 'nombre' esta disponoble en req.params.nombre. Por defecto el objeto es {} // GET /user/jolav on route /user/:name req.params.name // => \"jolav\" // GET /file/js/react.js on royte /file/* req.params[0] // => \"js/react.js\" req.body - Contiene pares clave-valor de datos enviados en el body de la peticion. Por defecto es undefined y se llena cuando usas un middleware body-parsing como por ejemplo body-parser o multer req.route - Contiene la ruta actual como una string app.get('/user/:id?', function userIdHandler(req, res) { console.log(req.route); res.send('GET'); }); { path: '/user/:id?', stack: [ { handle: [Function: userIdHandler], name: 'userIdHandler', params: undefined, path: undefined, keys: [], regexp: /^\\/?$/i, method: 'get' } ], methods: { get: true } } req.cookies - Al usar middleware cookie-parser esta propiedad es un objeto que contiene las cookies enviadas con la peticion. Si no hay cookies por defecto es {} req.headers - req.xhr - Es una propiedad booleana que es true si el campo de la cabecera X-Requested-With header de la peticion es \u201cXMLHttpRequest\u201d req.hostname - Contiene el hostname sacado de la cabecera Host HTTP Header de la peticion. Vamos, de que pagina web viene la peticion // Host: \"example.com:3000\" req.hostname // => \"example.com\" req.originalUrl - req.path - req.baseUrl - // GET /search?q=something req.originalUrl // => \"/search?q=something\" // example.com/users?sort=desc req.path // => \"/users\" // GET 'http://www.example.com/admin/new' app.use('/admin', function(req, res, next) { console.log(req.originalUrl); // '/admin/new' console.log(req.baseUrl); // '/admin' console.log(req.path); // '/new' next(); }); req.protocol - Contiene el protocolo de la peticion como string (http o https) RESPONSE (Respuesta) Response API res.headersSent - Propiedad booleana que indica si la aplicacion ya ha enviado cabeceras http para la respuesta (vamos, si ya ha enviado alguna respuesta) app.get('/', function (req, res) { console.log(res.headersSent); // false res.send('OK'); console.log(res.headersSent); // true }); res.cookie(name, value [, options]) - Establece el nombre de la cookie a value (que puede ser una string o un objeto convertido en JSON). Las options es un objeto que puede tener las siguientes propiedades (domain, encode, expires, httpOnly, maxAge, path, secure, signed ,sameSite) res.download(path [, filename] [, options] [, fn]) - Transfiere el archivo en la ruta (path) como un adjunto. Lo normal es que el navegador del cliente pregunte para permitir la descarga res.download('/report-12345.pdf', 'report.pdf', function(err){ if (err) { // Handle error, response may be partially-sent, check res.headersSent } else { // decrement a download credit, etc. } }); res.end([data] [, encoding]) - Finaliza el proceso de respuesta. Se usa para terminar la respuesta sin enviar ningun dato. Si necesitas respondee con datos usas metodos como res.send() o res.json() res.render(view, [locals], callback) - Renderiza una vista y envia el HTML renderizado como string al cliente res.set(field, [value]) - Determina el valor de la cabecera de respuesta http de nombre field a value. Para establecer multiples campos a la vez pasa un objeto como parametro res.set('Content-Type', 'text/plain'); res.set({ 'Content-Type': 'text/plain', 'Content-Length': '123', 'ETag': '12345' }); res.setHeader('Content-Type', 'application/json'); // res.header() is an alias of res.set() method from Express framework. // The only difference is res.setHeader() allows you only to set a // singular header and res.header() will allow you to set multiple headers // res.setHeader() is a native method of Node.js res.status(code) - Establece el estatus HTTP para la respuesta. Se puede encadenar res.status(200).send(JSON.stringify(data, null, 3)); // same as res.status(200).json(data); res.send([status], body) - Envia la respuesta HTTP. El parametro del body puede ser una objeto Buffer, una cadena, un objeto o un array res.send(new Buffer('whoop')); res.send({ some: 'json' }); res.send('<p>some html</p>'); res.status(404).send('Sorry, we cannot find that!'); res.status(500).send({ error: 'something blew up' }); res.sendFile(path [, options] [, fn]) - Envia el fichero que se encuentra el la ruta dada (path). Establece la cabecera de respuesta HTTP Content-Type segun la extension del archivo enviado. Salvo que la option root este especificada es el objeto de opciones el path debe ser ruta absoluta al archivo app.get('/file/:name', function (req, res, next) { const options = { root: __dirname + '/public/', dotfiles: 'deny', headers: { 'x-timestamp': Date.now(), 'x-sent': true } }; const fileName = req.params.name; res.sendFile(fileName, options, function (err) { if (err) { next(err); } else { console.log('Sent:', fileName); } }); }) res.json([status], json) - Envia una respuesta JSON ( con el apropiado content-type) que es el parametro convertido a JSON usando JSON.stringify() res.jsonp([status], jsonp) - Envia una respuesta JSON con soporte para JSONP. Este metodo es identico a res.json() salvo que a\u00f1ade soporte para el callback de JSONP res.redirect([status], path) - Redirige a la URL marcada en path con un HTTP status code igual a status, que si no se especifica por defecto es \"302\" res.location(path) - Establece la cabecera HTTP header Location a path res.redirect('/foo/bar'); res.redirect('http://example.com'); res.redirect(301, 'http://example.com'); res.redirect('../login'); MIDDLEWARE https://expressjs.com/en/resources/middleware.html Definicion Se usan para gestionar las peticiones HTTP hechas al servidor, manejarlas y responderlas. Son callbacks que se ejecutan cuando ocurre una peticion HTTP. La mayoria son de dise\u00f1o propio para cubrir nuestras necesidades pero tambien los hay para cosas comunes como logueos, servir ficheros estaticos, parseos y muchas mas cosas. orden - Los middlewares se ejecutan en el mismo orden en el que se cargan Que puede hacer un middleware ejecutar codigo hacer cambios en los objetos request y response terminar el ciclo request-response llamar al siguiente middleware Si el middleware en curso no termina el ciclo request-response debe llamar a next() para pasar el control al siguiente middleware o la peticion se quedara colgada. Cada funcion middleware tiene tres argumentos: req : objeto que contiene toda la informacion de la peticion HTTP res : objeto que contiene toda la informacion de la respuesta HTTP next : es el siguiente middleware definido en el orden de middlewares Crear un middleware var express = require('express'); var app = express(); // Lo definimos var myLogger = function (req, res, next) { console.log('LOGGED'); next(); }; // Lo cargamos en la app antes de definir las rutas o nunca se ejecutara app.use(myLogger); app.get('/', function (req, res) { res.send('Hello World!'); }); app.listen(3000); Otro ejemplo middleware pero este manipula la peticion var express = require('express'); var app = express(); // Lo definimos var requestTime = function (req, res, next) { req.requestTime = Date.now(); next(); }; // Lo cargamos en la app antes de definir las rutas o nunca se ejecutara app.use(requestTime); app.get('/', function (req, res) { var responseText = 'Hello World!<br>'; responseText += '<small>Requested at: ' + req.requestTime + '</small>'; res.send(responseText); }); app.listen(3000); Limitar un middleware a una cierta rutas app.use(/ruta, middlewareParaEsaRuta); Para cada ciclo request-response de una aplicacion Express Se ejecutan los middlewares de arriba a abajo Para no terminar el ciclo un middleware debe pasar el control al siguiente mediante un next(); next('route'); se salta el resto de middlewares del stack de rutas Para terminar un ciclo debemos usar res.end o usar res.send() \u00f3 res.sendFile() que internamente llaman a res.end Tipos A nivel de aplicacion const app = express(); app.use() app.METHOD() [METHOD = GET, PUT, POST, UPDATE ...] A nivel de router const router = express.Router(); router.use() router.METHOD() [METHOD = GET, PUT, POST, UPDATE ...] Manejo de error Tienen un argumento mas (err) app.use(function(err, req, res, next) { console.error(err.stack); res.status(500).send('Error : something broke!'); }); Incorporados de serie express.static - sirve recursos estaticos como archivos html, imagenes y cosas asi. express.json``- parsea peticiones entrantes con JSON . express.urlencoded` - parsea peticiones entrantes con URLEncoded Terceros npm install middleware; const middleware = require('middleware'); app.use(middleware()); Esenciales compression - gzips los datos transferidos. Debe ponerse my arriba para que comprima los datos de otros middlewares y rutas npm install compression var compression = require('compression'); app.use(compression()); express-static contenido estatico morgan - antiguo logger. Lleva registro de todas las peticiones y otra informacion importante npm install morgan var logger = require('morgan'); app.use(logger(\"common | dev | short | tiny | y mas\")); // usar dev cors - soporte cors para express cors = require('cors'); app.use(cors()); Si no usamos el middleware poner antes de las rutas este codigo para a\u00f1adir las cabeceras app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With Content-Type, Accept\"); next(); }); helmet - middlewares de seguridad var helmet = require('helmet'); app.use(helmet()); body-parser - permite procesar los datos que vienen y convertirlos en objetos javascript/node usables. npm install body-parser var bodyParser = require('body-parser'); app.use(bodyParser.json()); app.use(bodyParser.urlencoded({ extended: false })); errorhandler - se usa para manejo basico de errores en desarrollo y prototipado npm install errorhandler var errorHandler = require('errorhandler'); if (app.get('env') === 'development') { app.use(errorhandler()); } connect-busboy - para usar el parseador de formularios busboy npm install connect-busboy var busboy = require('connect-busboy'); app.use('/upload', busboy({immediate: true })); cookie-parser - permite acceder los valores de las cookies del usuario del objeto req.cookie npm install cookie-parser var cookieParser = require('cookie-parser'); app.use(cookieParser()); method-override - permite al servidor soportar metodos http que el cliente no soporte. npm install method-override var methodOverride = require('method-override'); app.use(methodOverride(\"loQueToque\")); serve-index - como un ls en la terminal npm install serve-index var serveIndex = require('serve-index'); app.use('/shared', serveIndex( path.join('public','shared'), {'icons': true} )); express-session - permite al servidor usar sesiones web. Necesita tener activo antes a cookie-parser. npm install express-session response-time - a\u00f1ade la cabecera \"X-Response-Time\" con un tiempo en ms con un numero de 3 digitos por defecto desde el momento en el que la peticion entro en este middleware. npm install response-time var responseTime = require('response-time'); app.use(responseTime(4)); // cambio a 4 digitos csurf - para prevenir CSRF npm install csurf var csrf = require('csurf'); app.use(csrf()); serve-favicon - para configurar el favicon que querramos npm install serve-favicon var favicon = require('serve-favicon'); app.use(favicon(path.join(__dirname, 'public', 'favicon.ico'))); app.use(favicon(path.join(__dirname + '/public', 'favicon.ico'))); passport y express-session - autenticacion var passport = require('passport'); var session = require('express-session'); // required for passport app.use(session({ secret: 'kk', saveUninitialized: true, resave: true})); app.use(passport.initialize()); app.use(passport.session()); // persistent login sessions vhost - para usar diferentes rutas basadas en dominios. Por ejemplo tenemos dos apps con express (api y web) para organizar el codigo para diferentes rutas basadas en los dominios api.dominio.com y web.dominio.com npm install vhost var api = express() var web = express() app.use(vhost('www.dominio.com', web)) app.use(vhost('api.dominio.com', api)) connect-timeout - establece un temporizador npm install connect-timeout var timeout = require('connect-timeout'); cookie-session - almacen de sesion de cookies raw-body - para peticiones como buffers express-validator - para sanear y validar datos que se reciben oauth2-server - autenticacion connect-redis - almacen de la sesion en redis SESIONES + COOKIES Actualizacion 04-07-2019 Ya no hacen falta ni cookie-parser , ni body-parser OJO con los dominios desarrollando en local, si expressjs se levanta en localhost, poner el navegador tambien en localhost y no con 127.0.0.1 o las cookies no se podran leer (aunque si funcionan) app.use(express.json()); // to support JSON-encoded bodies app.use(express.urlencoded({ // to support URL-encoded bodies extended: true })); app.set('trust proxy', 1); // trust first proxy app.use(session({ secret: \"process.env.secretSession\", name: 'alpha', saveUninitialized: false, resave: false, cookie: { httpOnly: false, // true to production //secure: true // comment for localhost, only works for https secure: false, path: \"/\" }, })); ROUTING El ruteo determina como responde una aplicacion a una peticion de un cliente que contiene una URI (o ruta) y un metodo HTTP (GET, POST ...) Cada ruta puede tener una o mas funciones manejadoras que se ejecutan cuando la ruta coincide. Las rutas se pueden hacer con expresiones regulares protocolo hostname port path querystring fragment http:// localhost :3000 /about ?test=1 #history http:// www.bing.com /search ?q=grunt&first https:// google.com / #q=express app.METHOD app.METHOD(path, [handler], handler); path es la ruta en el servidor que pueden ser cadenas, patrones de cadenas o expresiones regulares handler es la funcion que se ejecuta cuando la ruta coincide. Cuando hay varios manejadores para evitar que se ejecuten todos hay que invocar next('route') y saltara a la siguiente METHOD get, leer post, crear put, actualizar delete, borrar hay otros cuantos all, para todos // Ejemplos app.get('/', function (req, res) { // GET method route res.send('GET request to the homepage'); }); app.post('/', function (req, res) { // POST method route res.send('POST request to the homepage'); }); parametros en la ruta La ruta puede contener parametros que se capturan en req.params Route path: /users/:userId/books/:bookId Request URL: http://localhost:3000/users/34/books/8989 req.params: { \"userId\": \"34\", \"bookId\": \"8989\" } multiples manejadores de ruta Se puede establecer m\u00faltiples callbacks (manejadores) que se comportan como middlewares para gestionar una petici\u00f3n. La unica excepcion es que podrian invocar next(\"route\") para evitar los restantes manejadores de esa ruta Los manejadores de ruta pueden ser una funcion, un array de funciones o una combinacion de ambos // varias funciones independientes app.get('/example/b', function (req, res, next) { console.log('the response will be sent by the next function ...'); next(); }, function (req, res) { res.send('Hello from B!'); }); // array de funciones var cb0 = function (req, res, next) { console.log('CB0'); next(); } var cb1 = function (req, res, next) { console.log('CB1'); next(); } var cb2 = function (req, res) { res.send('Hello from C!'); } app.get('/example/c', [cb0, cb1, cb2]); // mix de funciones independientes y array de funciones var cb0 = function (req, res, next) { console.log('CB0'); next(); } var cb1 = function (req, res, next) { console.log('CB1'); next(); } app.get('/example/d', [cb0, cb1], function (req, res, next) { console.log('the response will be sent by the next function ...'); next(); }, function (req, res) { res.send('Hello from D!'); }); app.route() cadena de manejadores de ruta app.route('/book') .get(function(req, res) { res.send('Get a random book'); }) .post(function(req, res) { res.send('Add a book'); }) .put(function(req, res) { res.send('Update the book'); }); clase express.Router La clase express.Router se usa para crear manejadores modulares Creamos un archivo perfil.js en el subdirectorio para rutas /routes var express = require('express'); var perfil = express.Router(); // middleware especifico para esta ruta si nos hace falta, es opcional perfil.use (function(req, res, next) { console.log('Hora = ', Date.now()); next(); }); perfil.get(\"/\", function(req, res, next) { res.send(\"En ruta /\"); }); perfil.get(\"/username\", function(req, res, next) { res.send(\"En /username\"); }); module.exports = perfil; Cargamos el modulo de router en la aplicacion en app.js // en app.js con esto creamos dos rutas \"/profile\" y \"/profile/:username\" var perfiles = require('./routes/perfil.js'); app.use('/perfiles', perfiles); Ahora la app ya atiende a las rutas /perfil y /perfil/:username Cada router puede cargar otros router hasta cargar todos en pej index.js y al cargar en app,js /controller/index.js ya estaran todas las rutas ERRORES El middleware de manejo de errores se define el ultimo despues de todos los app.use() y manejo de rutas. En desarrollo if (app.get('env') === 'development') { app.use(function(err, req, res, next) { res.status(err.status || 500); res.render('error', { message: err.message, error: err }); }); } En produccion app.use(function(err, req, res, next) { res.status(err.status || 500); res.render('error', { message: err.message, error: {} }); }); Se produce un error en express cuando llamamos un next(\"algo ha pasado\") Se saltara los middleware que haya hasta llegar al primer middleware que maneje errores Express no maneja errores producidos por la palabra clave throw y tiene protecciones para estas excepciones. La app retirnara un error 500 y esa peticion fallara pero la app continuara ejecutandose. Sin embargo los errores de sintaxis cascan el programa app.use(function(req, res, next) { if (req.url === \"/\") { next(); } else if (req.url === \"/throw\") { throw new Error(\"Gimme that error\"); } else { next(\"You didn't visit the root!\"); } }); app.use(function(req, res) { res.send(\"Welcome to the homepage.\"); }); app.use(function(err, req, res, next) { console.error(err); res.status(500); next(err); }); app.use(function(err, req, res, next) { res.send(\"Got an error: \" + err); }); APIs RESTful API CRUD api crear -> POST leer -> GET actualizar -> PUT borrar -> DELETE Versiones Patron para mantener la retrocompatibilidad api1.js var express = require(\"express\"); var api = express.Router(); api.get(\"/timezone\", function(req, res) { res.send(\"Sample response for /timezone\"); }); api.get(\"/all_timezones\", function(req, res) { res.send(\"Sample response for /all_timezones\"); }); module.exports = api; api2.js var express = require(\"express\"); var api = express.Router(); api.get(\"/timezone\", function(req, res) { res.send(\"API 2: super cool new response for /timezone\"); }); module.exports = api; app.js var express = require(\"express\"); var apiVersion1 = require(\"./api1.js\"); var apiVersion2 = require(\"./api2.js\"); var app = express(); app.use(\"/v1\", apiVersion1); app.use(\"/v2\", apiVersion2); app.listen(3000, function() { console.log(\"App started on port 3000\"); }); SEGURIDAD Seguridad en express Cross-site request forgery npm install --save csurf - Se evita al usar el middleware csurf Debe ir precedido por cookie-parser y express-session var cookieParser = require('cookie-parser'), var session = require('express-session'); var csrf = require(\"csurf\"); app.use(cookieParser('FE28D342-4040-4D0E-B080-B85E85DAF7FD')); app.use(session({ secret: 'BD564488-5105-4202-8927-5A5C9AE9154E', resave: true, saveUninitialized: true })); app.use(csrf()); app.use(function (request, response, next) { response.locals.csrftoken = request.csrfToken(); next(); }); Permisos en procesos No correr servicios como root. Los servicios se pueden cambiar de usuario en ejecucion usando GID (group ID) y UID (user ID) var app = express(); http.createServer(app).listen(app.get('port'), function(){ console.log(\"Express server listening on port \" + app.get('port')); process.setgid(parseInt(process.env.GID, 10)); process.setuid(parseInt(process.env.UID, 10)); }); HTTP Security Headess Instalar middleware helmet que es un conjunto de middlewares de seguridad npm install --save helmet var helmet = require('helmet'); app.use(helmet()); Input Validation Chequear manualmente los datos con expresiones regulares de las rutas que aceptan datos externos Deben tambien controlarse el mapeo de objetos de los datos La validacion en el navegador es solo por criterios de usabilidad, no aporta proteccion a la aplicacion web npm install --save express-validator var validator = require('express-validator'); // lo aplico despues del body-parser app.use(bodyParser.json()); app.use(bodyParser.urlencoded({extended: true})); app.use(validator()); Ahora en los manejadores tenemos acceso a req.assert y req.validationErrors() app.post('/login', function(req, res){ req.assert('password', 'Password is required').notEmpty(); req.assert('email', 'A valid email is required').notEmpty().isEmail(); var errors = req.validationErrors(); if (errors) { res.render('index', {errors: errors}); } else { res.render('login', {email: request.email}); } }); Seguridad de los paquetes npm npm install -g nsp nsp check --output summary app.disable('x-powered-by');","title":"Expressjs"},{"location":"expressjs/#express-420x","text":"","title":"EXPRESS 4.20.X"},{"location":"expressjs/#uso","text":"","title":"USO"},{"location":"expressjs/#instalacion","text":"npm install -g express - Lo instalamos globalmente npm install -g express-generator - Y el generador de codigo plantilla que nos permite usar el comando express A pelo npm init - te pregunta muchas cosas para generar el package.json Con plantillas express -h Muestra las opciones express --hbs miApp Crea el proyecto miApp con handlebars pej cd miApp & npm install Instala las dependencias","title":"instalacion"},{"location":"expressjs/#api","text":"application app Es una instancia de la aplicacion express que se usa normalmente para configurar la aplicacion request req Es una envoltura del objeto request del modulo HTTP usado para extraer informacion sobre la peticion response res Es una envoltura del objeto response del modulo HTTP usado para enviar los datos y cabeceras de la respuesta Application settings: env: production, development ... viewcache view engine: jade, ejs, hbs ... views trustproxy (NGINX) Seguimiento de una peticion en express","title":"api"},{"location":"expressjs/#main-file","text":"app.js o main.js Cosas que se hacen en este fichero: Dependencias - Incluir paquetes de terceros y modulos nuestros como manejadores, utilidades ayudantes y modelos Instanciaciones - configurar las opciones de express como motor de plantillas Configuraciones - ajustes y como conectar las bases de datos Middlewares - Definir middlewares Ruteo - definir rutas Arranque - iniciar la app o exportarla app como un modulo","title":"MAIN FILE"},{"location":"expressjs/#ajustes","text":"app.set(nombre, valor) - para definir un valor app.set('port', process.env.PORT || 3000); app.get(nombre) - para conseguir un valor app.enable() - app.disable() - app.enabled() - app.disabled() - env - almacena el modo de entorno actual para ese proceso de node.js. Se toma de process.env.NODE_ENV o se pone development por defecto. Opciones {development, test, stage, preview, production} view cache - ponerlo a true para produccion view engine - view engine views - la ruta absoluta al directorio con las plantillas app.set('views', path.join(__dirname, 'templates')) trust proxy - ponerlo a true se esta detras de un proxy como nginx. Por defecto esta desactivado, para activarlo app.set('trust proxy', true); app.enable('trust proxy'); jsonp callback name - vale para hacer llamadas ajax desde otros dominios usando CORS app.set('jsonp callback name', 'cb'); json replacer - json spaces - son dos parametros que se aplican a todas las funciones JSON.stringify(). replacer es un filtro spaces es valor de indentacion app.set('json replacer', function(key, value){ if (key === 'discount') return undefined; else return value; }); app.set('json spaces', 4); case sensitive routing - por defecto disabled, asi /nombre y /Nombres es la misma ruta strict routing - por defeto disabled, asi /users y /users/ son la misma ruta x-powered-by - establece la opcion de la respuesta x-powered-by con el valor Express. Por seguridad lo mejor es desactivarla app.set('x-powered-by', false) // o app.disable('x-powered-by') etag - dejarlo como esta es lo mejor query parser - para parsear las query-string enviadas en la URL. Por defecto extended (usa el modulo qs), true (qs), false (lo desactiva), simple (usa el modulo del nucleo querystring) app.set('query parser', 'simple'); app.set('query parser', false); app.set('query parser', customQueryParsingFunction); subdomain offset - Para aplicaciones desplegadas en varios subdominios","title":"ajustes"},{"location":"expressjs/#contenido-estatico","text":"Usar directorio de contenido estatico Para servir contenido estatico se usa el middleware express.static incorporado en express. var publicPath = path.resolve(__dirname, 'public'); app.use(express.static(publicPath)); Ya puedes cargar archivos del directorio public El nombre del directorio public no es parte de la url http://localhost:3000/css/style.css http://localhost:3000/public/css/style.css NO Usar multiples directorios de contenido estatico Express busca los archivos en el orden en el que se declaran los directorios estaticos app.use(express.static('public')); app.use(express.static('files')); Prefijo de ruta virtual app.use('/static', express.static('public')); Ahora para cargar los archivos : http://localhost:3000/static/css/style.css","title":"contenido estatico"},{"location":"expressjs/#templates","text":"","title":"TEMPLATES"},{"location":"expressjs/#request-peticion","text":"Request API req.query - Esta propiedad es un objeto que tiene una propiedad para cada query string en la ruta. Si no hay query string es un objeto vacio {}. // GET /search?q=jolav req.query.q // => \"jolav\" // GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse req.query.order // => \"desc\" req.query.shoe.color // => \"blue\" req.query.shoe.type // => \"converse\" req.params - Esta propiedad es un objeto con propiedades mapeadas a la ruta \"parametros\". Ejemmplo una ruta /usuario/:nombre, la propiedad 'nombre' esta disponoble en req.params.nombre. Por defecto el objeto es {} // GET /user/jolav on route /user/:name req.params.name // => \"jolav\" // GET /file/js/react.js on royte /file/* req.params[0] // => \"js/react.js\" req.body - Contiene pares clave-valor de datos enviados en el body de la peticion. Por defecto es undefined y se llena cuando usas un middleware body-parsing como por ejemplo body-parser o multer req.route - Contiene la ruta actual como una string app.get('/user/:id?', function userIdHandler(req, res) { console.log(req.route); res.send('GET'); }); { path: '/user/:id?', stack: [ { handle: [Function: userIdHandler], name: 'userIdHandler', params: undefined, path: undefined, keys: [], regexp: /^\\/?$/i, method: 'get' } ], methods: { get: true } } req.cookies - Al usar middleware cookie-parser esta propiedad es un objeto que contiene las cookies enviadas con la peticion. Si no hay cookies por defecto es {} req.headers - req.xhr - Es una propiedad booleana que es true si el campo de la cabecera X-Requested-With header de la peticion es \u201cXMLHttpRequest\u201d req.hostname - Contiene el hostname sacado de la cabecera Host HTTP Header de la peticion. Vamos, de que pagina web viene la peticion // Host: \"example.com:3000\" req.hostname // => \"example.com\" req.originalUrl - req.path - req.baseUrl - // GET /search?q=something req.originalUrl // => \"/search?q=something\" // example.com/users?sort=desc req.path // => \"/users\" // GET 'http://www.example.com/admin/new' app.use('/admin', function(req, res, next) { console.log(req.originalUrl); // '/admin/new' console.log(req.baseUrl); // '/admin' console.log(req.path); // '/new' next(); }); req.protocol - Contiene el protocolo de la peticion como string (http o https)","title":"REQUEST (Peticion)"},{"location":"expressjs/#response-respuesta","text":"Response API res.headersSent - Propiedad booleana que indica si la aplicacion ya ha enviado cabeceras http para la respuesta (vamos, si ya ha enviado alguna respuesta) app.get('/', function (req, res) { console.log(res.headersSent); // false res.send('OK'); console.log(res.headersSent); // true }); res.cookie(name, value [, options]) - Establece el nombre de la cookie a value (que puede ser una string o un objeto convertido en JSON). Las options es un objeto que puede tener las siguientes propiedades (domain, encode, expires, httpOnly, maxAge, path, secure, signed ,sameSite) res.download(path [, filename] [, options] [, fn]) - Transfiere el archivo en la ruta (path) como un adjunto. Lo normal es que el navegador del cliente pregunte para permitir la descarga res.download('/report-12345.pdf', 'report.pdf', function(err){ if (err) { // Handle error, response may be partially-sent, check res.headersSent } else { // decrement a download credit, etc. } }); res.end([data] [, encoding]) - Finaliza el proceso de respuesta. Se usa para terminar la respuesta sin enviar ningun dato. Si necesitas respondee con datos usas metodos como res.send() o res.json() res.render(view, [locals], callback) - Renderiza una vista y envia el HTML renderizado como string al cliente res.set(field, [value]) - Determina el valor de la cabecera de respuesta http de nombre field a value. Para establecer multiples campos a la vez pasa un objeto como parametro res.set('Content-Type', 'text/plain'); res.set({ 'Content-Type': 'text/plain', 'Content-Length': '123', 'ETag': '12345' }); res.setHeader('Content-Type', 'application/json'); // res.header() is an alias of res.set() method from Express framework. // The only difference is res.setHeader() allows you only to set a // singular header and res.header() will allow you to set multiple headers // res.setHeader() is a native method of Node.js res.status(code) - Establece el estatus HTTP para la respuesta. Se puede encadenar res.status(200).send(JSON.stringify(data, null, 3)); // same as res.status(200).json(data); res.send([status], body) - Envia la respuesta HTTP. El parametro del body puede ser una objeto Buffer, una cadena, un objeto o un array res.send(new Buffer('whoop')); res.send({ some: 'json' }); res.send('<p>some html</p>'); res.status(404).send('Sorry, we cannot find that!'); res.status(500).send({ error: 'something blew up' }); res.sendFile(path [, options] [, fn]) - Envia el fichero que se encuentra el la ruta dada (path). Establece la cabecera de respuesta HTTP Content-Type segun la extension del archivo enviado. Salvo que la option root este especificada es el objeto de opciones el path debe ser ruta absoluta al archivo app.get('/file/:name', function (req, res, next) { const options = { root: __dirname + '/public/', dotfiles: 'deny', headers: { 'x-timestamp': Date.now(), 'x-sent': true } }; const fileName = req.params.name; res.sendFile(fileName, options, function (err) { if (err) { next(err); } else { console.log('Sent:', fileName); } }); }) res.json([status], json) - Envia una respuesta JSON ( con el apropiado content-type) que es el parametro convertido a JSON usando JSON.stringify() res.jsonp([status], jsonp) - Envia una respuesta JSON con soporte para JSONP. Este metodo es identico a res.json() salvo que a\u00f1ade soporte para el callback de JSONP res.redirect([status], path) - Redirige a la URL marcada en path con un HTTP status code igual a status, que si no se especifica por defecto es \"302\" res.location(path) - Establece la cabecera HTTP header Location a path res.redirect('/foo/bar'); res.redirect('http://example.com'); res.redirect(301, 'http://example.com'); res.redirect('../login');","title":"RESPONSE (Respuesta)"},{"location":"expressjs/#middleware","text":"https://expressjs.com/en/resources/middleware.html","title":"MIDDLEWARE"},{"location":"expressjs/#definicion","text":"Se usan para gestionar las peticiones HTTP hechas al servidor, manejarlas y responderlas. Son callbacks que se ejecutan cuando ocurre una peticion HTTP. La mayoria son de dise\u00f1o propio para cubrir nuestras necesidades pero tambien los hay para cosas comunes como logueos, servir ficheros estaticos, parseos y muchas mas cosas. orden - Los middlewares se ejecutan en el mismo orden en el que se cargan Que puede hacer un middleware ejecutar codigo hacer cambios en los objetos request y response terminar el ciclo request-response llamar al siguiente middleware Si el middleware en curso no termina el ciclo request-response debe llamar a next() para pasar el control al siguiente middleware o la peticion se quedara colgada. Cada funcion middleware tiene tres argumentos: req : objeto que contiene toda la informacion de la peticion HTTP res : objeto que contiene toda la informacion de la respuesta HTTP next : es el siguiente middleware definido en el orden de middlewares Crear un middleware var express = require('express'); var app = express(); // Lo definimos var myLogger = function (req, res, next) { console.log('LOGGED'); next(); }; // Lo cargamos en la app antes de definir las rutas o nunca se ejecutara app.use(myLogger); app.get('/', function (req, res) { res.send('Hello World!'); }); app.listen(3000); Otro ejemplo middleware pero este manipula la peticion var express = require('express'); var app = express(); // Lo definimos var requestTime = function (req, res, next) { req.requestTime = Date.now(); next(); }; // Lo cargamos en la app antes de definir las rutas o nunca se ejecutara app.use(requestTime); app.get('/', function (req, res) { var responseText = 'Hello World!<br>'; responseText += '<small>Requested at: ' + req.requestTime + '</small>'; res.send(responseText); }); app.listen(3000); Limitar un middleware a una cierta rutas app.use(/ruta, middlewareParaEsaRuta); Para cada ciclo request-response de una aplicacion Express Se ejecutan los middlewares de arriba a abajo Para no terminar el ciclo un middleware debe pasar el control al siguiente mediante un next(); next('route'); se salta el resto de middlewares del stack de rutas Para terminar un ciclo debemos usar res.end o usar res.send() \u00f3 res.sendFile() que internamente llaman a res.end","title":"Definicion"},{"location":"expressjs/#tipos","text":"A nivel de aplicacion const app = express(); app.use() app.METHOD() [METHOD = GET, PUT, POST, UPDATE ...] A nivel de router const router = express.Router(); router.use() router.METHOD() [METHOD = GET, PUT, POST, UPDATE ...] Manejo de error Tienen un argumento mas (err) app.use(function(err, req, res, next) { console.error(err.stack); res.status(500).send('Error : something broke!'); }); Incorporados de serie express.static - sirve recursos estaticos como archivos html, imagenes y cosas asi. express.json``- parsea peticiones entrantes con JSON . express.urlencoded` - parsea peticiones entrantes con URLEncoded Terceros npm install middleware; const middleware = require('middleware'); app.use(middleware());","title":"Tipos"},{"location":"expressjs/#esenciales","text":"compression - gzips los datos transferidos. Debe ponerse my arriba para que comprima los datos de otros middlewares y rutas npm install compression var compression = require('compression'); app.use(compression()); express-static contenido estatico morgan - antiguo logger. Lleva registro de todas las peticiones y otra informacion importante npm install morgan var logger = require('morgan'); app.use(logger(\"common | dev | short | tiny | y mas\")); // usar dev cors - soporte cors para express cors = require('cors'); app.use(cors()); Si no usamos el middleware poner antes de las rutas este codigo para a\u00f1adir las cabeceras app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With Content-Type, Accept\"); next(); }); helmet - middlewares de seguridad var helmet = require('helmet'); app.use(helmet()); body-parser - permite procesar los datos que vienen y convertirlos en objetos javascript/node usables. npm install body-parser var bodyParser = require('body-parser'); app.use(bodyParser.json()); app.use(bodyParser.urlencoded({ extended: false })); errorhandler - se usa para manejo basico de errores en desarrollo y prototipado npm install errorhandler var errorHandler = require('errorhandler'); if (app.get('env') === 'development') { app.use(errorhandler()); } connect-busboy - para usar el parseador de formularios busboy npm install connect-busboy var busboy = require('connect-busboy'); app.use('/upload', busboy({immediate: true })); cookie-parser - permite acceder los valores de las cookies del usuario del objeto req.cookie npm install cookie-parser var cookieParser = require('cookie-parser'); app.use(cookieParser()); method-override - permite al servidor soportar metodos http que el cliente no soporte. npm install method-override var methodOverride = require('method-override'); app.use(methodOverride(\"loQueToque\")); serve-index - como un ls en la terminal npm install serve-index var serveIndex = require('serve-index'); app.use('/shared', serveIndex( path.join('public','shared'), {'icons': true} )); express-session - permite al servidor usar sesiones web. Necesita tener activo antes a cookie-parser. npm install express-session response-time - a\u00f1ade la cabecera \"X-Response-Time\" con un tiempo en ms con un numero de 3 digitos por defecto desde el momento en el que la peticion entro en este middleware. npm install response-time var responseTime = require('response-time'); app.use(responseTime(4)); // cambio a 4 digitos csurf - para prevenir CSRF npm install csurf var csrf = require('csurf'); app.use(csrf()); serve-favicon - para configurar el favicon que querramos npm install serve-favicon var favicon = require('serve-favicon'); app.use(favicon(path.join(__dirname, 'public', 'favicon.ico'))); app.use(favicon(path.join(__dirname + '/public', 'favicon.ico'))); passport y express-session - autenticacion var passport = require('passport'); var session = require('express-session'); // required for passport app.use(session({ secret: 'kk', saveUninitialized: true, resave: true})); app.use(passport.initialize()); app.use(passport.session()); // persistent login sessions vhost - para usar diferentes rutas basadas en dominios. Por ejemplo tenemos dos apps con express (api y web) para organizar el codigo para diferentes rutas basadas en los dominios api.dominio.com y web.dominio.com npm install vhost var api = express() var web = express() app.use(vhost('www.dominio.com', web)) app.use(vhost('api.dominio.com', api)) connect-timeout - establece un temporizador npm install connect-timeout var timeout = require('connect-timeout'); cookie-session - almacen de sesion de cookies raw-body - para peticiones como buffers express-validator - para sanear y validar datos que se reciben oauth2-server - autenticacion connect-redis - almacen de la sesion en redis","title":"Esenciales"},{"location":"expressjs/#sesiones-cookies","text":"Actualizacion 04-07-2019 Ya no hacen falta ni cookie-parser , ni body-parser OJO con los dominios desarrollando en local, si expressjs se levanta en localhost, poner el navegador tambien en localhost y no con 127.0.0.1 o las cookies no se podran leer (aunque si funcionan) app.use(express.json()); // to support JSON-encoded bodies app.use(express.urlencoded({ // to support URL-encoded bodies extended: true })); app.set('trust proxy', 1); // trust first proxy app.use(session({ secret: \"process.env.secretSession\", name: 'alpha', saveUninitialized: false, resave: false, cookie: { httpOnly: false, // true to production //secure: true // comment for localhost, only works for https secure: false, path: \"/\" }, }));","title":"SESIONES + COOKIES"},{"location":"expressjs/#routing","text":"El ruteo determina como responde una aplicacion a una peticion de un cliente que contiene una URI (o ruta) y un metodo HTTP (GET, POST ...) Cada ruta puede tener una o mas funciones manejadoras que se ejecutan cuando la ruta coincide. Las rutas se pueden hacer con expresiones regulares protocolo hostname port path querystring fragment http:// localhost :3000 /about ?test=1 #history http:// www.bing.com /search ?q=grunt&first https:// google.com / #q=express","title":"ROUTING"},{"location":"expressjs/#appmethod","text":"app.METHOD(path, [handler], handler); path es la ruta en el servidor que pueden ser cadenas, patrones de cadenas o expresiones regulares handler es la funcion que se ejecuta cuando la ruta coincide. Cuando hay varios manejadores para evitar que se ejecuten todos hay que invocar next('route') y saltara a la siguiente METHOD get, leer post, crear put, actualizar delete, borrar hay otros cuantos all, para todos // Ejemplos app.get('/', function (req, res) { // GET method route res.send('GET request to the homepage'); }); app.post('/', function (req, res) { // POST method route res.send('POST request to the homepage'); }); parametros en la ruta La ruta puede contener parametros que se capturan en req.params Route path: /users/:userId/books/:bookId Request URL: http://localhost:3000/users/34/books/8989 req.params: { \"userId\": \"34\", \"bookId\": \"8989\" } multiples manejadores de ruta Se puede establecer m\u00faltiples callbacks (manejadores) que se comportan como middlewares para gestionar una petici\u00f3n. La unica excepcion es que podrian invocar next(\"route\") para evitar los restantes manejadores de esa ruta Los manejadores de ruta pueden ser una funcion, un array de funciones o una combinacion de ambos // varias funciones independientes app.get('/example/b', function (req, res, next) { console.log('the response will be sent by the next function ...'); next(); }, function (req, res) { res.send('Hello from B!'); }); // array de funciones var cb0 = function (req, res, next) { console.log('CB0'); next(); } var cb1 = function (req, res, next) { console.log('CB1'); next(); } var cb2 = function (req, res) { res.send('Hello from C!'); } app.get('/example/c', [cb0, cb1, cb2]); // mix de funciones independientes y array de funciones var cb0 = function (req, res, next) { console.log('CB0'); next(); } var cb1 = function (req, res, next) { console.log('CB1'); next(); } app.get('/example/d', [cb0, cb1], function (req, res, next) { console.log('the response will be sent by the next function ...'); next(); }, function (req, res) { res.send('Hello from D!'); });","title":"app.METHOD"},{"location":"expressjs/#approute","text":"cadena de manejadores de ruta app.route('/book') .get(function(req, res) { res.send('Get a random book'); }) .post(function(req, res) { res.send('Add a book'); }) .put(function(req, res) { res.send('Update the book'); });","title":"app.route()"},{"location":"expressjs/#clase-expressrouter","text":"La clase express.Router se usa para crear manejadores modulares Creamos un archivo perfil.js en el subdirectorio para rutas /routes var express = require('express'); var perfil = express.Router(); // middleware especifico para esta ruta si nos hace falta, es opcional perfil.use (function(req, res, next) { console.log('Hora = ', Date.now()); next(); }); perfil.get(\"/\", function(req, res, next) { res.send(\"En ruta /\"); }); perfil.get(\"/username\", function(req, res, next) { res.send(\"En /username\"); }); module.exports = perfil; Cargamos el modulo de router en la aplicacion en app.js // en app.js con esto creamos dos rutas \"/profile\" y \"/profile/:username\" var perfiles = require('./routes/perfil.js'); app.use('/perfiles', perfiles); Ahora la app ya atiende a las rutas /perfil y /perfil/:username Cada router puede cargar otros router hasta cargar todos en pej index.js y al cargar en app,js /controller/index.js ya estaran todas las rutas","title":"clase express.Router"},{"location":"expressjs/#errores","text":"El middleware de manejo de errores se define el ultimo despues de todos los app.use() y manejo de rutas. En desarrollo if (app.get('env') === 'development') { app.use(function(err, req, res, next) { res.status(err.status || 500); res.render('error', { message: err.message, error: err }); }); } En produccion app.use(function(err, req, res, next) { res.status(err.status || 500); res.render('error', { message: err.message, error: {} }); }); Se produce un error en express cuando llamamos un next(\"algo ha pasado\") Se saltara los middleware que haya hasta llegar al primer middleware que maneje errores Express no maneja errores producidos por la palabra clave throw y tiene protecciones para estas excepciones. La app retirnara un error 500 y esa peticion fallara pero la app continuara ejecutandose. Sin embargo los errores de sintaxis cascan el programa app.use(function(req, res, next) { if (req.url === \"/\") { next(); } else if (req.url === \"/throw\") { throw new Error(\"Gimme that error\"); } else { next(\"You didn't visit the root!\"); } }); app.use(function(req, res) { res.send(\"Welcome to the homepage.\"); }); app.use(function(err, req, res, next) { console.error(err); res.status(500); next(err); }); app.use(function(err, req, res, next) { res.send(\"Got an error: \" + err); });","title":"ERRORES"},{"location":"expressjs/#apis","text":"RESTful API CRUD api crear -> POST leer -> GET actualizar -> PUT borrar -> DELETE Versiones Patron para mantener la retrocompatibilidad api1.js var express = require(\"express\"); var api = express.Router(); api.get(\"/timezone\", function(req, res) { res.send(\"Sample response for /timezone\"); }); api.get(\"/all_timezones\", function(req, res) { res.send(\"Sample response for /all_timezones\"); }); module.exports = api; api2.js var express = require(\"express\"); var api = express.Router(); api.get(\"/timezone\", function(req, res) { res.send(\"API 2: super cool new response for /timezone\"); }); module.exports = api; app.js var express = require(\"express\"); var apiVersion1 = require(\"./api1.js\"); var apiVersion2 = require(\"./api2.js\"); var app = express(); app.use(\"/v1\", apiVersion1); app.use(\"/v2\", apiVersion2); app.listen(3000, function() { console.log(\"App started on port 3000\"); });","title":"APIs"},{"location":"expressjs/#seguridad","text":"Seguridad en express Cross-site request forgery npm install --save csurf - Se evita al usar el middleware csurf Debe ir precedido por cookie-parser y express-session var cookieParser = require('cookie-parser'), var session = require('express-session'); var csrf = require(\"csurf\"); app.use(cookieParser('FE28D342-4040-4D0E-B080-B85E85DAF7FD')); app.use(session({ secret: 'BD564488-5105-4202-8927-5A5C9AE9154E', resave: true, saveUninitialized: true })); app.use(csrf()); app.use(function (request, response, next) { response.locals.csrftoken = request.csrfToken(); next(); }); Permisos en procesos No correr servicios como root. Los servicios se pueden cambiar de usuario en ejecucion usando GID (group ID) y UID (user ID) var app = express(); http.createServer(app).listen(app.get('port'), function(){ console.log(\"Express server listening on port \" + app.get('port')); process.setgid(parseInt(process.env.GID, 10)); process.setuid(parseInt(process.env.UID, 10)); }); HTTP Security Headess Instalar middleware helmet que es un conjunto de middlewares de seguridad npm install --save helmet var helmet = require('helmet'); app.use(helmet()); Input Validation Chequear manualmente los datos con expresiones regulares de las rutas que aceptan datos externos Deben tambien controlarse el mapeo de objetos de los datos La validacion en el navegador es solo por criterios de usabilidad, no aporta proteccion a la aplicacion web npm install --save express-validator var validator = require('express-validator'); // lo aplico despues del body-parser app.use(bodyParser.json()); app.use(bodyParser.urlencoded({extended: true})); app.use(validator()); Ahora en los manejadores tenemos acceso a req.assert y req.validationErrors() app.post('/login', function(req, res){ req.assert('password', 'Password is required').notEmpty(); req.assert('email', 'A valid email is required').notEmpty().isEmail(); var errors = req.validationErrors(); if (errors) { res.render('index', {errors: errors}); } else { res.render('login', {email: request.email}); } }); Seguridad de los paquetes npm npm install -g nsp nsp check --output summary app.disable('x-powered-by');","title":"SEGURIDAD"},{"location":"frontend/","text":"FRONT END IMAGENES IMAGENES tynypng - Comprimir imagenes shrinktheweb - Capturar instantaneas de paginas web ICONOS SoftIcons Material design Iconfinder COLORES Color-hex - Para elegir colores SPRITES css sprites - Generador de sprites y su CSS EDITORES ONLINE Luna pic Resize Image IMAGENES GRATUITAS Pixabay Pexels FUENTES GOOGLE FONTS se pueden importar desde el HTML o desde el CSS <link href=\"https://fonts.googleapis.com/css?family= name:400,900|other+font\" rel=\"stylesheet\"> @import url('https://fonts.googleapis.com/css?family=name:400,500'); Lato Roboto Oxygen Fira Sans IBM Plex Sans Exo Titillium Web Rambla Open Sans Ovo Varela Varela Round PT Sans Audiowide Orbitron Alegreya Patrick Hand SC Indie Flower Chewy Righteous Pacifico Press Start 2P Luckiest Guy Bungee SEGURIDAD Y ESTADISTICAS STATS Pingdom - Mide la velocidad de carga de las paginas WebPageTets - Mide la velocidad de carga de las paginas GT Metrix - Mide la velocidad de carga de las paginas Google PageSpeed - Optimiza la velocidad de carga de las paginas SECURITY CertBot - Para manejar lor certificados lets encrypt Secarma - Prueba la seguridad de las cabeceras del servidor MXToolbox - Todo sobre DNS SSL Labs - Testea la seguridad del SSL del servidor Scan My Server - Testeo completo sobre las vulnerabilidades del servidor y la pagina UTILS XML Sitemaps - Generador de sitemap.xml FUENTES DE INFORMACION APIs LIST List of public APIs - Github repo con lista de APIs publicas Programmableweb - Pagina con listado de APIs GOVs data Data Gov - Datos del Gobierno USA EU Open Data Portal - Datos de la CEE Spain Gov Data - Datos del Gobierno Espa\u00f1ol FOOD Nutritionix - Api completa sobre comida STOCK MARKET IEX Trading - Api en tiempo real Alphavantage - API en tiempo real Quandl - Bases de datos financieras y economicas LIVE-SERVER // se recarga al cambiar archivos css (que por defecto no lo hace) live-server --no-css-inject // por efecto abre en 127.0.0.1 , para cambiarlo live-server --no-css-inject --host=localhost","title":"Front End"},{"location":"frontend/#front-end","text":"","title":"FRONT END"},{"location":"frontend/#imagenes","text":"IMAGENES tynypng - Comprimir imagenes shrinktheweb - Capturar instantaneas de paginas web ICONOS SoftIcons Material design Iconfinder COLORES Color-hex - Para elegir colores SPRITES css sprites - Generador de sprites y su CSS EDITORES ONLINE Luna pic Resize Image IMAGENES GRATUITAS Pixabay Pexels","title":"IMAGENES"},{"location":"frontend/#fuentes","text":"GOOGLE FONTS se pueden importar desde el HTML o desde el CSS <link href=\"https://fonts.googleapis.com/css?family= name:400,900|other+font\" rel=\"stylesheet\"> @import url('https://fonts.googleapis.com/css?family=name:400,500'); Lato Roboto Oxygen Fira Sans IBM Plex Sans Exo Titillium Web Rambla Open Sans Ovo Varela Varela Round PT Sans Audiowide Orbitron Alegreya Patrick Hand SC Indie Flower Chewy Righteous Pacifico Press Start 2P Luckiest Guy Bungee","title":"FUENTES"},{"location":"frontend/#seguridad-y-estadisticas","text":"STATS Pingdom - Mide la velocidad de carga de las paginas WebPageTets - Mide la velocidad de carga de las paginas GT Metrix - Mide la velocidad de carga de las paginas Google PageSpeed - Optimiza la velocidad de carga de las paginas SECURITY CertBot - Para manejar lor certificados lets encrypt Secarma - Prueba la seguridad de las cabeceras del servidor MXToolbox - Todo sobre DNS SSL Labs - Testea la seguridad del SSL del servidor Scan My Server - Testeo completo sobre las vulnerabilidades del servidor y la pagina UTILS XML Sitemaps - Generador de sitemap.xml","title":"SEGURIDAD Y ESTADISTICAS"},{"location":"frontend/#fuentes-de-informacion","text":"APIs LIST List of public APIs - Github repo con lista de APIs publicas Programmableweb - Pagina con listado de APIs GOVs data Data Gov - Datos del Gobierno USA EU Open Data Portal - Datos de la CEE Spain Gov Data - Datos del Gobierno Espa\u00f1ol FOOD Nutritionix - Api completa sobre comida STOCK MARKET IEX Trading - Api en tiempo real Alphavantage - API en tiempo real Quandl - Bases de datos financieras y economicas","title":"FUENTES DE INFORMACION"},{"location":"frontend/#live-server","text":"// se recarga al cambiar archivos css (que por defecto no lo hace) live-server --no-css-inject // por efecto abre en 127.0.0.1 , para cambiarlo live-server --no-css-inject --host=localhost","title":"LIVE-SERVER"},{"location":"golang-bases-de-datos/","text":"GOLANG para BASES DE DATOS MYSQL driver go-sql-driver go get -u github.com/go-sql-driver/mysql Crear conexion a la BBDD package store import ( \"database/sql\" \"fmt\" // mysql driver _ \"github.com/go-sql-driver/mysql\" ) type configDB struct { DatabaseType string `json:\"databaseType\"` Host string `json:\"host\"` Port int `json:\"port\"` DB string `json:\"db\"` User string `json:\"user\"` Password string `json:\"password\"` } // DB ... type DB struct { *sql.DB } // NewDB ... func NewDB(mode string) (*DB, error) { var c configDB loadConfigJSON(&c) setDBConnConfig(mode, &c) connPath := fmt.Sprintf(\"%s:%s@tcp(%s:%d)/%s?parseTime=true\", c.User, c.Password, c.Host, c.Port, c.DB, ) //fmt.Println(\"CONNPATH => \", connPath) db, err := sql.Open(c.DatabaseType, connPath) if err != nil { return nil, err } err = db.Ping() if err != nil { return nil, err } return &DB{db}, nil } // lo llamo desde otro paquete package login import ( store \"casServer/login/store\" ) var loginDB *store.DB func init() { db, err := store.NewDB(checkAppConfMode()) if err != nil { log.Fatal(\"Error connecting DataBase => \", err) } loginDB = db //users, _ := loginDB.AccountList() //fmt.Println(len(users)) } Select func (loginDB *DB) Account(name string) (*User, error) { //fmt.Println(\"SEARCHING ...\", name) u := new(User) query := fmt.Sprintf(` SELECT * FROM %s WHERE nickID=? `, usersTable, ) //fmt.Println(query) stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"ERROR 1 DB %s\\n\", err) return u, err } defer stmt.Close() err = stmt.QueryRow(name).Scan( &u.NickID, &u.Nick, &u.PassHashed, &u.Email, &u.Verified, &u.Logo, &u.SecretQuest, &u.SecretHashed, &u.CreatedAt, &u.LastSeen, &u.Online) if err != nil { if err == sql.ErrNoRows { // no result //log.Println(\"NO RESULT\", u) return u, nil } log.Printf(\"ERROR 2 DB %s\\n\", err) return nil, err } return u, nil } func (loginDB *DB) AccountList() ([]*User, error) { query := fmt.Sprintf(` SELECT nickID FROM %s `, usersTable, ) stmt, err := loginDB.Prepare(query) if err != nil { return nil, err } defer stmt.Close() rows, err := stmt.Query() if err != nil { return nil, err } defer rows.Close() users := make([]*User, 0) for rows.Next() { user := new(User) err := rows.Scan( &user.NickID, ) if err != nil { return nil, err } users = append(users, user) } return users, nil } func (loginDB *DB) UserSession(usernameID string) (*Session, error) { s := NewSession() query := fmt.Sprintf(` SELECT * FROM %s WHERE nickID=? `, sessionsTable, ) stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"ERROR 3 DB SESSIONS %s\\n\", err) return s, err } defer stmt.Close() err = stmt.QueryRow(usernameID).Scan( &s.NickID, &s.SessionID, &s.Expires, ) if err != nil { if err == sql.ErrNoRows { // no result //log.Println(\"NO RESULT\", s) return s, nil } log.Printf(\"ERROR 4 DB SESSIONS %s\\n\", err) return nil, err } return s, nil } Insert func (loginDB *DB) NewAccount(u *User) error { //fmt.Println(\"USER => \", u) query := fmt.Sprintf(` INSERT INTO %s ( nickID, nick, passHashed, email, verified, logo, secretQuest, secretHashed, createdAt, lastSeen, online ) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) `, usersTable, ) stmt, err := loginDB.Prepare(query) //fmt.Println(query) if err != nil { log.Printf(\"ERROR 3 DB USERS %s -> %s\\n\", u.Nick, err) return err } defer stmt.Close() _, err = stmt.Exec( u.NickID, u.Nick, u.PassHashed, u.Email, u.Verified, u.Logo, u.SecretQuest, u.SecretHashed, u.CreatedAt, u.LastSeen, u.Online, ) if err != nil { log.Printf(\"ERROR 4 DB USERS %s -> %s\\n\", u.Nick, err) return err } return nil } func (loginDB *DB) SaveSession(s *Session) error { query := fmt.Sprintf(` INSERT INTO %s ( nickID, sessionID, expires ) values (?, ?, ?) ON DUPLICATE KEY UPDATE sessionID=? , expires= ? `, sessionsTable) stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"ERROR 1 DB SESSIONS %s -> %s\\n\", s.NickID, err) return err } defer stmt.Close() _, err = stmt.Exec( s.NickID, s.SessionID, s.Expires, s.SessionID, s.Expires, ) if err != nil { log.Printf(\"ERROR 2 DB SESSIONS %s -> %s\\n\", s.NickID, err) return err } return nil } Update func (loginDB *DB) UpdateAccount(u *User) error { query := ` UPDATE users SET passHashed = ?, email = ?, verified = ?, lastSeen = ?, online = ? WHERE nickID = ? ` stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"Error preparando actualizaci\u00f3n: %s\", err) return err } defer stmt.Close() _, err = stmt.Exec( u.PassHashed, u.Email, u.Verified, u.LastSeen, u.Online, u.NickID, ) if err != nil { log.Printf(\"Error ejecutando actualizaci\u00f3n: %s\", err) return err } return nil } Delete func (loginDB *DB) DeleteSession(usernameID string) error { query := fmt.Sprintf(` DELETE FROM %s WHERE nickID = ? `, sessionsTable) stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"ERROR 5 DB SESSIONS %s -> %s\\n\", usernameID, err) return err } defer stmt.Close() _, err = stmt.Exec( usernameID, ) if err != nil { log.Printf(\"ERROR 6 DB SESSIONS %s -> %s\\n\", usernameID, err) return err } return nil }","title":"Golang Bases de Datos"},{"location":"golang-bases-de-datos/#golang-para-bases-de-datos","text":"","title":"GOLANG para BASES DE DATOS"},{"location":"golang-bases-de-datos/#mysql","text":"","title":"MYSQL"},{"location":"golang-bases-de-datos/#driver","text":"go-sql-driver go get -u github.com/go-sql-driver/mysql","title":"driver"},{"location":"golang-bases-de-datos/#crear-conexion-a-la-bbdd","text":"package store import ( \"database/sql\" \"fmt\" // mysql driver _ \"github.com/go-sql-driver/mysql\" ) type configDB struct { DatabaseType string `json:\"databaseType\"` Host string `json:\"host\"` Port int `json:\"port\"` DB string `json:\"db\"` User string `json:\"user\"` Password string `json:\"password\"` } // DB ... type DB struct { *sql.DB } // NewDB ... func NewDB(mode string) (*DB, error) { var c configDB loadConfigJSON(&c) setDBConnConfig(mode, &c) connPath := fmt.Sprintf(\"%s:%s@tcp(%s:%d)/%s?parseTime=true\", c.User, c.Password, c.Host, c.Port, c.DB, ) //fmt.Println(\"CONNPATH => \", connPath) db, err := sql.Open(c.DatabaseType, connPath) if err != nil { return nil, err } err = db.Ping() if err != nil { return nil, err } return &DB{db}, nil } // lo llamo desde otro paquete package login import ( store \"casServer/login/store\" ) var loginDB *store.DB func init() { db, err := store.NewDB(checkAppConfMode()) if err != nil { log.Fatal(\"Error connecting DataBase => \", err) } loginDB = db //users, _ := loginDB.AccountList() //fmt.Println(len(users)) }","title":"Crear conexion a la BBDD"},{"location":"golang-bases-de-datos/#select","text":"func (loginDB *DB) Account(name string) (*User, error) { //fmt.Println(\"SEARCHING ...\", name) u := new(User) query := fmt.Sprintf(` SELECT * FROM %s WHERE nickID=? `, usersTable, ) //fmt.Println(query) stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"ERROR 1 DB %s\\n\", err) return u, err } defer stmt.Close() err = stmt.QueryRow(name).Scan( &u.NickID, &u.Nick, &u.PassHashed, &u.Email, &u.Verified, &u.Logo, &u.SecretQuest, &u.SecretHashed, &u.CreatedAt, &u.LastSeen, &u.Online) if err != nil { if err == sql.ErrNoRows { // no result //log.Println(\"NO RESULT\", u) return u, nil } log.Printf(\"ERROR 2 DB %s\\n\", err) return nil, err } return u, nil } func (loginDB *DB) AccountList() ([]*User, error) { query := fmt.Sprintf(` SELECT nickID FROM %s `, usersTable, ) stmt, err := loginDB.Prepare(query) if err != nil { return nil, err } defer stmt.Close() rows, err := stmt.Query() if err != nil { return nil, err } defer rows.Close() users := make([]*User, 0) for rows.Next() { user := new(User) err := rows.Scan( &user.NickID, ) if err != nil { return nil, err } users = append(users, user) } return users, nil } func (loginDB *DB) UserSession(usernameID string) (*Session, error) { s := NewSession() query := fmt.Sprintf(` SELECT * FROM %s WHERE nickID=? `, sessionsTable, ) stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"ERROR 3 DB SESSIONS %s\\n\", err) return s, err } defer stmt.Close() err = stmt.QueryRow(usernameID).Scan( &s.NickID, &s.SessionID, &s.Expires, ) if err != nil { if err == sql.ErrNoRows { // no result //log.Println(\"NO RESULT\", s) return s, nil } log.Printf(\"ERROR 4 DB SESSIONS %s\\n\", err) return nil, err } return s, nil }","title":"Select"},{"location":"golang-bases-de-datos/#insert","text":"func (loginDB *DB) NewAccount(u *User) error { //fmt.Println(\"USER => \", u) query := fmt.Sprintf(` INSERT INTO %s ( nickID, nick, passHashed, email, verified, logo, secretQuest, secretHashed, createdAt, lastSeen, online ) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) `, usersTable, ) stmt, err := loginDB.Prepare(query) //fmt.Println(query) if err != nil { log.Printf(\"ERROR 3 DB USERS %s -> %s\\n\", u.Nick, err) return err } defer stmt.Close() _, err = stmt.Exec( u.NickID, u.Nick, u.PassHashed, u.Email, u.Verified, u.Logo, u.SecretQuest, u.SecretHashed, u.CreatedAt, u.LastSeen, u.Online, ) if err != nil { log.Printf(\"ERROR 4 DB USERS %s -> %s\\n\", u.Nick, err) return err } return nil } func (loginDB *DB) SaveSession(s *Session) error { query := fmt.Sprintf(` INSERT INTO %s ( nickID, sessionID, expires ) values (?, ?, ?) ON DUPLICATE KEY UPDATE sessionID=? , expires= ? `, sessionsTable) stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"ERROR 1 DB SESSIONS %s -> %s\\n\", s.NickID, err) return err } defer stmt.Close() _, err = stmt.Exec( s.NickID, s.SessionID, s.Expires, s.SessionID, s.Expires, ) if err != nil { log.Printf(\"ERROR 2 DB SESSIONS %s -> %s\\n\", s.NickID, err) return err } return nil }","title":"Insert"},{"location":"golang-bases-de-datos/#update","text":"func (loginDB *DB) UpdateAccount(u *User) error { query := ` UPDATE users SET passHashed = ?, email = ?, verified = ?, lastSeen = ?, online = ? WHERE nickID = ? ` stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"Error preparando actualizaci\u00f3n: %s\", err) return err } defer stmt.Close() _, err = stmt.Exec( u.PassHashed, u.Email, u.Verified, u.LastSeen, u.Online, u.NickID, ) if err != nil { log.Printf(\"Error ejecutando actualizaci\u00f3n: %s\", err) return err } return nil }","title":"Update"},{"location":"golang-bases-de-datos/#delete","text":"func (loginDB *DB) DeleteSession(usernameID string) error { query := fmt.Sprintf(` DELETE FROM %s WHERE nickID = ? `, sessionsTable) stmt, err := loginDB.Prepare(query) if err != nil { log.Printf(\"ERROR 5 DB SESSIONS %s -> %s\\n\", usernameID, err) return err } defer stmt.Close() _, err = stmt.Exec( usernameID, ) if err != nil { log.Printf(\"ERROR 6 DB SESSIONS %s -> %s\\n\", usernameID, err) return err } return nil }","title":"Delete"},{"location":"golang-para-web/","text":"GOLANG PARA DESARROLLO WEB NET/HTTP import net/http Static // sirve el directorio entero func main() { dir := http.Dir(\"./files\") http.ListenAndServe(\":8080\", http.FileServer(dir)) http.HandleFunc(\"/\", readme) } // ServeFile sirve un archivo o un directorio como 3er argumento func main() { http.HandleFunc(\"/\", public) http.ListenAndServe(\":8080\", nil) } func public(w http.ResponseWriter, r *http.Request) { http.ServeFile(w, r, \"./files/hola.html\") // http.ServeFile(w, r, \"./files/\") } // sirve el directorio ./files en la ruta /static/ // ./files puede estar en cualquier sitio del sistema de archivos // no solo en el dir de la aplicacion func main() { dir := http.Dir(\"./files/\") handler := http.StripPrefix(\"/static/\", http.FileServer(dir)) http.Handle(\"/static/\", handler) http.HandleFunc(\"/\", homePage) http.ListenAndServe(\":8080\", nil) } Handler - Handlers son cualquier struct que tiene un metodo ServeHTTP(w http.ResponseWriter, r *http.Request) con dos parametros: una interface HTTPResponseWriter y un puntero a una Request struct. - Handler functions son funciones que se comportan como handlers. Tienen la misma firma que el metodo ServeHTTP y se utiizan para procesar peticiones (Requests) - Handlers y handler functions se pueden encadenar para permitir el procesado en partes de peticiones mediante la separacion de asuntos. - Multiplexers(routers) tambien son handlers. ServeMux es un router de peticiones HTTP. Acepta peticiones HTTP y las redirige al handler adecuado segun la URL de la peticion. DefaultServeMux es una instancia de ServeMux que se usa como router por defecto Handler // multi handler and chain handler package main import ( \"fmt\" \"net/http\" ) type helloHandler struct{} func (h *helloHandler) ServeHTTP(w http.ResponseWriter, r *http.Request){ fmt.Fprintf(w, \"Hello!\") } type worldHandler struct{} func (h *worldHandler) ServeHTTP(w http.ResponseWriter, r *http.Request){ fmt.Fprintf(w, \"World!\") } func log(h http.Handler) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){ fmt.Printf(\"Handler called - %T\\n\", h) h.ServeHTTP(w, r) }) } func protect(h http.Handler) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){ // some code to make sure the user is authorized h.ServeHTTP(w, r) }) } func main() { hello := helloHandler{} world := worldHandler{} server := http.Server{ Addr: \"127.0.0.1:8080\", } http.Handle(\"/hello\", protect(log(&hello))) http.Handle(\"/world\", &world) server.ListenAndServe() } HandleFunc package main import ( \"fmt\" \"net/http\" \"reflect\" \"runtime\" ) func hello(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Hello!\") } func world(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"World!\") } func log(h http.HandlerFunc) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { name := runtime.FuncForPC(reflect.ValueOf(h).Pointer()).Name() fmt.Println(\"Handler function called - \" + name) h(w, r) } } func main() { server := http.Server{ Addr: \"127.0.0.1:8080\", } http.HandleFunc(\"/hello\", log(hello)) http.HandleFunc(\"/world\", world) server.ListenAndServe() } Request URL https://golang.org/src/net/url/url.go type URL struct { Scheme string Opaque string // encoded opaque data User *Userinfo // username and password information Host string // host or host:port Path string RawPath string // encoded path hint ForceQuery bool // append a query ('?') even if RawQuery is empty RawQuery string // encoded query values, without '?' Fragment string // fragment for references, without '#' } algunos metodos // EscapedPath returns the escaped form of u.Path. func (u *URL) EscapedPath() string {} // IsAbs reports whether the URL is absolute. func (u *URL) IsAbs() bool {} // Query parses RawQuery and returns the corresponding values. func (u *URL) Query() Values {} type Values map[string][]string Headers type Header func (h Header) Add(key, value string) func (h Header) Del(key string) func (h Header) Get(key string) string func (h Header) Set(key, value string) func (h Header) Write(w io.Writer) error func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error func headers(w http.ResponseWriter, r *http.Request) { h := r.Header // h := r.Header[\"Accept-Encoding\"] // devuelve un map de strings // h := r.Header.Get(\"Accept-Encoding\") // devuelve string fmt.Fprintln(w, h) } http.HandleFunc(\"/headers\", headers) Body func body(w http.ResponseWriter, r *http.Request) { len := r.ContentLength body := make([]byte, len) r.Body.Read(body) fmt.Fprintln(w, string(body)) } http.HandleFunc(\"/body\", body) ResponseWriter La interface ResponseWriter tiene tres metodos: - Write - coge un []bytes y lo escribe en el body de la respuesta HTTP. Si la cabecera no especifica content-type usa los los primeros 512 bytes de datos para detectar el tipo de contenido - WriteHeader - envia un numero entero que representa el codigo de estado de la respuesta HTTP. Despues de usar este metodo no se puede escribir ni modificar nada en la cabecera. Si no se use este metodo por defecto cuando se llama a Write se envia el codigo 200 OK Es muy util para enviar codigos de errores - Header - devuelve un map de campos de la cabecera que se pueden modificar y que seran enviados en la respuesta al cliente type post struct { User string Langs []string } func writeExample(w http.ResponseWriter, r *http.Request) { str := `<html> <head><title>Write Example</title></head> <body><h1>Hello World</h1></body> </html>` w.Write([]byte(str)) } func writeHeaderExample(w http.ResponseWriter, r *http.Request) { w.WriteHeader(501) fmt.Fprintln(w, \"Not implemented yet\") } func headerExample(w http.ResponseWriter, r *http.Request) { w.Header().Set(\"Location\", \"https://jolav.github.io\") w.WriteHeader(302) } func jsonExample(w http.ResponseWriter, r *http.Request) { w.Header().Set(\"Content-Type\", \"application/json\") post := &post{ User: \"jolav\", Langs: []string{\"Go\", \"HTML\", \"Javascript\"}, } json, _ := json.Marshal(post) w.Write(json) } func main() { server := http.Server{ Addr: \"127.0.0.1:8080\", } http.HandleFunc(\"/write\", writeExample) http.HandleFunc(\"/writeheader\", writeHeaderExample) http.HandleFunc(\"/redirect\", headerExample) http.HandleFunc(\"/json\", jsonExample) server.ListenAndServe() } Middleware type Middleware []http.Handler // Adds a handler to the middleware func (m *Middleware) Add(handler http.Handler) { *m = append(*m, handler) } func (m Middleware) ServeHTTP(w http.ResponseWriter, r *http. \u27a5Request) { // Process the middleware } Cookies https://golang.org/src/net/http/cookie.go type Cookie struct { Name string Value string Path string // optional Domain string // optional Expires time.Time // optional RawExpires string // for reading cookies only // MaxAge=0 means no 'Max-Age' attribute specified. // MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0' // MaxAge>0 means Max-Age attribute present and given in seconds MaxAge int Secure bool HttpOnly bool Raw string Unparsed []string // Raw text of unparsed attribute-value pairs } Si no se usa el campo Expires la cookie es de sesion o temporal y se eliminan del navegador cuando este se cierra. De lo contrario la cookie es persistente y dura hasta que expire o se elimine. Usar MaxAge en lugar de Expires que esta deprecada package main import ( \"encoding/base64\" \"fmt\" \"net/http\" \"time\" ) func setCookie(w http.ResponseWriter, r *http.Request) { c1 := http.Cookie{ Name: \"first cookie\", Value: \"Valor de la primera galleta\", HttpOnly: true, } c2 := http.Cookie{ Name: \"second cookie\", Value: \"Valor de la segunda galleta\", HttpOnly: true, } http.SetCookie(w, &c1) http.SetCookie(w, &c2) } func getCookie(w http.ResponseWriter, r *http.Request) { c1, err := r.Cookie(\"first cookie\") if err != nil { fmt.Fprintln(w, \"Cannot get the first cookie\") } cs := r.Cookies() fmt.Fprintln(w, c1) fmt.Fprintln(w, cs) } func setMessage(w http.ResponseWriter, r *http.Request) { msg := []byte(\"Hello World!\") c := http.Cookie{ Name: \"flash\", Value: base64.URLEncoding.EncodeToString(msg), } http.SetCookie(w, &c) } func showMessage(w http.ResponseWriter, r *http.Request) { c, err := r.Cookie(\"flash\") if err != nil { if err == http.ErrNoCookie { fmt.Fprintln(w, \"No message found\") } } else { rc := http.Cookie{ Name: \"flash\", MaxAge: -1, Expires: time.Unix(1, 0), } http.SetCookie(w, &rc) val, _ := base64.URLEncoding.DecodeString(c.Value) fmt.Fprintln(w, string(val)) } } func main() { server := http.Server{ Addr: \"127.0.0.1:8080\", } http.HandleFunc(\"/setCookie\", setCookie) http.HandleFunc(\"/getCookie\", getCookie) http.HandleFunc(\"/setMessage\", setMessage) http.HandleFunc(\"/showMessage\", showMessage) server.ListenAndServe() } Sessions Forms 1\u00ba - Parseamos la peticion con ParseForm o ParseMultipartForm 2\u00ba - Accedemos al formulario // formulario para process1 <form action=\"http://127.0.0.1:8080/process1?hello=world&thread=123\" method=\"post\" enctype=\"application/x-www-form-urlencoded\"> <input type=\"text\" name=\"hello\" value=\"jolav\" /> <input type=\"text\" name=\"post\" value=\"1234\" /> <input type=\"submit\" /> </form> <!-- Obtendriamos map[thread:[123] hello:[jolav world] post:[1234]] Tenemos los valores de la URL mas los del formulario Para sacar solo un campo usamos notacion r.Form[\"post\"] Si usamos r.PostForm se ignoran los pares de la URL y solo se usan los del formulario resultando map[post:[1234] hello:[jolav]] Tambien existe ParseMultipartForm --> // formulario para process2 y process3 <form action=\"http://localhost:8080/process?hello=world&thread=123\" method=\"post\" enctype=\"multipart/form-data\"> <input type=\"text\" name=\"hello\" value=\"jolav\" /> <input type=\"text\" name=\"post\" value=\"1234\" /> <input type=\"file\" name=\"uploaded\"> <input type=\"submit\"> </form> package main import ( \"fmt\" \"io/ioutil\" \"net/http\" ) func process1(w http.ResponseWriter, r *http.Request) { r.ParseForm() fmt.Fprintln(w, r.Form[\"campo\"][0]) fmt.Prinltln(w, r.Form.Get(\"campo\")) // fmt.Fprintln(w, r.PostForm) } func process2(w http.ResponseWriter, r *http.Request) { file, _, err := r.FormFile(\"uploaded\") if err == nil { data, err := ioutil.ReadAll(file) if err == nil { fmt.Fprintln(w, string(data)) } } } func process3(w http.ResponseWriter, r *http.Request) { r.ParseMultipartForm(1024) fileHeader := r.MultipartForm.File[\"uploaded\"][0] file, err := fileHeader.Open() if err == nil { data, err := ioutil.ReadAll(file) if err == nil { fmt.Fprintln(w, string(data)) } } } func main() { server := http.Server{ Addr: \"127.0.0.1:8080\", } http.HandleFunc(\"/process1\", process1) http.HandleFunc(\"/process2\", process2) http.HandleFunc(\"/process3\", process3) server.ListenAndServe() } Cliente HTTP type Client func (c *Client) Do(req *Request) (*Response, error) func (c *Client) Get(url string) (resp *Response, err error) func (c *Client) Head(url string) (resp *Response, err error) func (c *Client) Post(url string, bodyType string, body io.Reader) (resp *Response, err error) func (c *Client) PostForm(url string, data url.Values) (resp *Response, err error) Ejemplo Hacer peticiones get Poner en el main o donde sea para asegurarse que tiene un tiempo maximo de espera y no se queda colgado esperando hasta el infinito (que es el valor por defecto) https://reddit.com/r/golang/comments/45mzie/dont_use_gos_default_http_client/ http.DefaultClient.Timeout = 10 * time.Second func getHttpRequest() { url := \"https://codetabs.com/tools/geoip/geoip.html\" resp, err := http.Get(url) if err != nil { log.Fatal(err) } defer resp.Body.Close() decoder := json.NewDecoder(resp.Body) err = decoder.Decode(&geo) if err != nil { panic(err) } aux.SendDataToClient(w, r, geo) } ServeMux func mainNormal() { // assets for all apps assets := http.FileServer(http.Dir(\"_public\")) http.Handle(\"/\", http.StripPrefix(\"/\", assets)) // assets for individual apps votingRes := http.FileServer(http.Dir(\"voting/assets\")) http.Handle(\"/voting/assets/\", http.StripPrefix(\"/voting/assets/\", votingRes)) book := http.FileServer(http.Dir(\"./book/\")) nightlife := http.FileServer(http.Dir(\"./nightlife/\")) stock := http.FileServer(http.Dir(\"./stock/\")) http.Handle(\"/book/\", http.StripPrefix(\"/book\", book)) http.Handle(\"/nightlife/\", http.StripPrefix(\"/nightlife\", nightlife)) http.Handle(\"/stock/\", http.StripPrefix(\"/stock\", stock)) // any /voting/* will redirect to voting.Voting http.HandleFunc(\"/voting/\", voting.Router) // any /pintelest/* will redirect to voting.Voting http.HandleFunc(\"/pintelest/\", nodePintelest) server := http.Server{ Addr: \"localhost:3006\", } server.ListenAndServe() } func mainMux() { mux := http.NewServeMux() // assets for all apps assets := http.FileServer(http.Dir(\"_public\")) mux.Handle(\"/\", http.StripPrefix(\"/\", assets)) // assets for individual apps votingRes := http.FileServer(http.Dir(\"voting/assets\")) mux.Handle(\"/voting/assets/\", http.StripPrefix(\"/voting/assets/\", votingRes)) book := http.FileServer(http.Dir(\"./book/\")) nightlife := http.FileServer(http.Dir(\"./nightlife/\")) stock := http.FileServer(http.Dir(\"./stock/\")) mux.Handle(\"/book/\", http.StripPrefix(\"/book\", book)) mux.Handle(\"/nightlife/\", http.StripPrefix(\"/nightlife\", nightlife)) mux.Handle(\"/stock/\", http.StripPrefix(\"/stock\", stock)) mux.HandleFunc(\"/voting/\", voting.Router) //mux.HandleFunc(\"/voting/p/\", nodePintelest) // any /pintelest/* will redirect to nodePintelest mux.HandleFunc(\"/pintelest/\", nodePintelest) server := http.Server{ Addr: \"localhost:3006\", Handler: mux, } server.ListenAndServe() } // http://codepodu.com/subdomains-with-golang/ type Subdomains map[string]http.Handler func (subdomains Subdomains) ServeHTTP(w http.ResponseWriter, r *http.Request) { domainParts := strings.Split(r.Host, \".\") if mux := subdomains[domainParts[0]]; mux != nil { // Let the appropriate mux serve the request mux.ServeHTTP(w, r) } else { // Handle 404 http.Error(w, \"Not found\", 404) } } type Mux struct { http.Handler } func (mux Mux) ServeHTTP(w http.ResponseWriter, r *http.Request) { mux.ServeHTTP(w, r) } func adminHandlerOne(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"It's adminHandlerOne , Hello, %q\", r.URL.Path[1:]) } func adminHandlerTwo(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"It's adminHandlerTwo , Hello, %q\", r.URL.Path[1:]) } func analyticsHandlerOne(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"It's analyticsHandlerOne , Hello, %q\", r.URL.Path[1:]) } func analyticsHandlerTwo(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"It's analyticsHandlerTwo , Hello, %q\", r.URL.Path[1:]) } func main() { adminMux := http.NewServeMux() adminMux.HandleFunc(\"/admin/pathone\", adminHandlerOne) adminMux.HandleFunc(\"/admin/pathtwo\", adminHandlerTwo) analyticsMux := http.NewServeMux() analyticsMux.HandleFunc(\"/analytics/pathone\", analyticsHandlerOne) analyticsMux.HandleFunc(\"/analytics/pathtwo\", analyticsHandlerTwo) subdomains := make(Subdomains) subdomains[\"admin\"] = adminMux subdomains[\"analytics\"] = analyticsMux http.ListenAndServe(\":8080\", subdomains) } HTML/TEMPLATE import html/template Para usarlo hay que importar el paquete html/template crear la plantilla t, _ := template.ParseFiles(\"index.html\") asignar valor a variables de plantilla template_value := \"Hola\" servir la pagina t.Execute(w, template_values) index.html <!doctype html> <html> <head> <meta charset=\"utf-8\"> <title>Hello World</title> </head> <body> Hello {{ . }} </body> </html> pagina.go package main import ( \"html/template\" \"net/http\" ) func handler(w http.ResponseWriter, r *http.Request) { t, _ := template.ParseFiles(\"index.html\") name := \"World\" t.Execute(w, name) } func main() { http.HandleFunc(\"/\", handler) http.ListenAndServe(\":8080\", nil) } Fields {{}} cualquier cosa a ser renderizada debe ir entre dobles parentesis {{.}} abreviatura para el objeto actual {{ .FieldName}} campo FieldName del objecto actual Arrays and slices type Friend struct { Fname string } type Person struct { UserName string Emails []string Friends []*Friend } func main() { f1 := Friend{Fname: \"minux.ma\"} f2 := Friend{Fname: \"xushiwei\"} t := template.New(\"fieldname example\") t, _ = t.Parse(`hello {{.UserName}}! {{range .Emails}} an email {{.}} {{end}} {{with .Friends}} {{range .}} my friend name is {{.Fname}} {{end}} {{end}} `) p := Person{UserName: \"Astaxie\", Emails: []string{\"astaxie@beego.me\", \"astaxie@gmail.com\"}, Friends: []*Friend{&f1, &f2}} t.Execute(os.Stdout, p) } Arrays and slices index const tmpl = ` {{range $index, $link := .}} {{$index}}: <a href=\"{{$link.Href}}\">{{$link.Name}}</a> {{end}} ` type Link struct { Name string Href string } func main() { // arrays var la [2]Link la[0] = Link{\"Google\", \"https://www.google.com/\"} la[1] = Link{\"Facebook\", \"https://www.facebook.com/\"} t, _ := template.New(\"foo\").Parse(tmpl) t.Execute(os.Stdout, la) // slices var ls []Link ls = append(ls, Link{\"Google\", \"https://www.google.com/\"}) ls = append(ls, Link{\"Facebook\", \"https://www.facebook.com/\"}) t.Execute(os.Stdout, ls) } Maps const tmpl = ` {{range $name, $href := .}} <a href=\"{{$href}}\">{{$name}}</a> {{end}} ` func main() { // map var m = map[string]string{ \"Google\": \"https://www.google.com/\", \"Facebook\": \"https://www.facebook.com/\", } t, _ := template.New(\"foo\").Parse(tmpl) t.Execute(os.Stdout, m) } Conditions {{if}} {{else}} : Solo para valores booleanos, no hace comparaciones {{if ``}} Will not print. {{end}} {{if `anything`}} Will print. {{end}} {{if `anything`}} Print IF part. {{else}} Print ELSE part. {{end}} Pipelines {{ . | html}} Por ejemplo usamos esto para coger el objto actual '.' y aplicarle escape a HTML al objeto Variables Pasar variables a templates // usando anonymous structs var templates = template.Must(template.ParseGlob(\"templates/*\")) func handle(w http.ResponseWriter, r *http.Request) { w.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\") templates.ExecuteTemplate(w, \"page.html\", struct { PageTitle string Message string User string }{\"Template example: struct\", \"Hello\", \"World\"}) } // usando Maps var templates = template.Must(template.ParseGlob(\"templates/*\")) func handle(w http.ResponseWriter, r *http.Request) { w.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\") m := make(map[string]interface{}) m[\"PageTitle\"] = \"Template example: map\" m[\"Message\"] = \"Hello\" m[\"User\"] = \"World\" templates.ExecuteTemplate(w, \"page.html\", m) } // mapa m := map[string]interface{}{ \"imgs\": imgs, // {{range .imgs.Image}}{{.}}{{end}} \"user\": p, //{{.user.Name}} } // struct , Images []Image type Data struct { I Images P Profile } var d Data d.I = imgs // {{range .I.Image}}{{.}}{{end}} d.P = p // {{.P.Name}}*/ t.Execute(w, &m) Funciones Predefinidas Por ejemplo print equivale a fmt.Sprintf func main() { texto := \"{{with $x := `hello`}}{{printf `%s %s` $x `Mary`}} {{end}}!\\n\" t := template.New(\"test\") t = template.Must(t.Parse(texto)) t.Execute(os.Stdout, nil) // Resultado -> hello Mary! De Dise\u00f1o const tmpl = ` <span>hello {{gettext .}}</span> <span>hello {{. | gettext}}</span> ` var funcMap = template.FuncMap{ \"gettext\": gettext, } func gettext(s string) string { if s == \"world\" { return \"otraCosa\" } return s } func main() { t, _ := template.New(\"foo\").Funcs(funcMap).Parse(tmpl) s := \"world\" t.Execute(os.Stdout, s) } Must Es una funcion del paquete template para validar plantillas Nested templates Se puede declarar una plantilla: {{ define \"sub-plantilla\"}} contenido que sea {{ end}} Luego esa plantilla se inserta {{ template \"sub-plantilla\" }} base.html {{define \"base\"}} <!doctype html> <html> <head> <meta charset=\"utf-8\"> <title>{{template \"title\" .}}</title> </head> <body> {{template \"content\" .}} </body> </html> {{end}} index.html {{template \"base\" .}} {{define \"title\"}}my title{{end}} {{define \"content\"}} <div>hello {{.}}</div> {{end}} nestedTemplates.go func main() { // cannot put base.html before index.html will give empty output // t, _ := template.ParseFiles(\"base.html\", \"index.html\") t, _ := template.ParseFiles(\"index.html\", \"base.html\") name := \"world\" t.Execute(os.Stdout, name) } Pasar vars a js Pasar variables golang a cliente js <!-- guest.html--> <script type=\"text/javascript\"> // Pass golang vars to client js //window.addEventListener('load', voting.init({{.}})) var golang = {{.}} // pasa como variable global objeto //var golang = \"{{ .}}\"; // lo pasa como string window.addEventListener('load', function () { voting.init() }) </script> // voting.go func guest(w http.ResponseWriter, r *http.Request) { var data aPoll data = aPoll{Question: \"Texto de la cuestion\"} tmpl[\"guest.html\"].ExecuteTemplate(w, \"guest.html\", data) } var voting = (function () { function init () { console.log(\"Data from golang\", golang); } return { init: init }; }()); NET/URL A\u00f1adir parametros a URL // sobre una URL existente values := r.URL.Query() values.Add(\"nombreNuevoParamatro\", valor) values.Get(\"nombreDelValor\", valor) r.URL.RawQuery = values.Encode() fmt.Println(r.URL.String()) fmt.Println(values[\"nombreNuevoParametro\"]) // construyendo una URL urlData, err := url.Parse(\"https://apisquesea.com/custom/v1?q=\") params := url.Values{} params.Add(\"q\", r.URL.Query().Get(\"q\")) params.Add(\"cx\", c.APIImage.CseID) params.Add(\"key\", c.APIImage.Key) params.Add(\"num\", r.URL.Query().Get(\"num\")) params.Add(\"offset\", r.URL.Query().Get(\"offset\")) urlData.RawQuery = params.Encode() URL parsing UTILIDADES fresh https://github.com/pilu/fresh - Especie de nodemon para golang. archivo de configuracion que se ejecuta con fresh -c ruta/al/archivo root: . tmp_path: ./tmp build_name: runner-build build_log: runner-build-errors.log valid_ext: .go, .tpl, .tmpl, .html, .css, .js ignored: assets, tmp, pintelest build_delay: 600 colors: 1 log_color_main: cyan log_color_build: yellow log_color_runner: green log_color_watcher: magenta log_color_app:","title":"Golang para web"},{"location":"golang-para-web/#golang-para-desarrollo-web","text":"","title":"GOLANG PARA DESARROLLO WEB"},{"location":"golang-para-web/#nethttp","text":"import net/http","title":"NET/HTTP"},{"location":"golang-para-web/#static","text":"// sirve el directorio entero func main() { dir := http.Dir(\"./files\") http.ListenAndServe(\":8080\", http.FileServer(dir)) http.HandleFunc(\"/\", readme) } // ServeFile sirve un archivo o un directorio como 3er argumento func main() { http.HandleFunc(\"/\", public) http.ListenAndServe(\":8080\", nil) } func public(w http.ResponseWriter, r *http.Request) { http.ServeFile(w, r, \"./files/hola.html\") // http.ServeFile(w, r, \"./files/\") } // sirve el directorio ./files en la ruta /static/ // ./files puede estar en cualquier sitio del sistema de archivos // no solo en el dir de la aplicacion func main() { dir := http.Dir(\"./files/\") handler := http.StripPrefix(\"/static/\", http.FileServer(dir)) http.Handle(\"/static/\", handler) http.HandleFunc(\"/\", homePage) http.ListenAndServe(\":8080\", nil) }","title":"Static"},{"location":"golang-para-web/#handler","text":"- Handlers son cualquier struct que tiene un metodo ServeHTTP(w http.ResponseWriter, r *http.Request) con dos parametros: una interface HTTPResponseWriter y un puntero a una Request struct. - Handler functions son funciones que se comportan como handlers. Tienen la misma firma que el metodo ServeHTTP y se utiizan para procesar peticiones (Requests) - Handlers y handler functions se pueden encadenar para permitir el procesado en partes de peticiones mediante la separacion de asuntos. - Multiplexers(routers) tambien son handlers. ServeMux es un router de peticiones HTTP. Acepta peticiones HTTP y las redirige al handler adecuado segun la URL de la peticion. DefaultServeMux es una instancia de ServeMux que se usa como router por defecto Handler // multi handler and chain handler package main import ( \"fmt\" \"net/http\" ) type helloHandler struct{} func (h *helloHandler) ServeHTTP(w http.ResponseWriter, r *http.Request){ fmt.Fprintf(w, \"Hello!\") } type worldHandler struct{} func (h *worldHandler) ServeHTTP(w http.ResponseWriter, r *http.Request){ fmt.Fprintf(w, \"World!\") } func log(h http.Handler) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){ fmt.Printf(\"Handler called - %T\\n\", h) h.ServeHTTP(w, r) }) } func protect(h http.Handler) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){ // some code to make sure the user is authorized h.ServeHTTP(w, r) }) } func main() { hello := helloHandler{} world := worldHandler{} server := http.Server{ Addr: \"127.0.0.1:8080\", } http.Handle(\"/hello\", protect(log(&hello))) http.Handle(\"/world\", &world) server.ListenAndServe() } HandleFunc package main import ( \"fmt\" \"net/http\" \"reflect\" \"runtime\" ) func hello(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Hello!\") } func world(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"World!\") } func log(h http.HandlerFunc) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { name := runtime.FuncForPC(reflect.ValueOf(h).Pointer()).Name() fmt.Println(\"Handler function called - \" + name) h(w, r) } } func main() { server := http.Server{ Addr: \"127.0.0.1:8080\", } http.HandleFunc(\"/hello\", log(hello)) http.HandleFunc(\"/world\", world) server.ListenAndServe() }","title":"Handler"},{"location":"golang-para-web/#request","text":"URL https://golang.org/src/net/url/url.go type URL struct { Scheme string Opaque string // encoded opaque data User *Userinfo // username and password information Host string // host or host:port Path string RawPath string // encoded path hint ForceQuery bool // append a query ('?') even if RawQuery is empty RawQuery string // encoded query values, without '?' Fragment string // fragment for references, without '#' } algunos metodos // EscapedPath returns the escaped form of u.Path. func (u *URL) EscapedPath() string {} // IsAbs reports whether the URL is absolute. func (u *URL) IsAbs() bool {} // Query parses RawQuery and returns the corresponding values. func (u *URL) Query() Values {} type Values map[string][]string Headers type Header func (h Header) Add(key, value string) func (h Header) Del(key string) func (h Header) Get(key string) string func (h Header) Set(key, value string) func (h Header) Write(w io.Writer) error func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error func headers(w http.ResponseWriter, r *http.Request) { h := r.Header // h := r.Header[\"Accept-Encoding\"] // devuelve un map de strings // h := r.Header.Get(\"Accept-Encoding\") // devuelve string fmt.Fprintln(w, h) } http.HandleFunc(\"/headers\", headers) Body func body(w http.ResponseWriter, r *http.Request) { len := r.ContentLength body := make([]byte, len) r.Body.Read(body) fmt.Fprintln(w, string(body)) } http.HandleFunc(\"/body\", body)","title":"Request"},{"location":"golang-para-web/#responsewriter","text":"La interface ResponseWriter tiene tres metodos: - Write - coge un []bytes y lo escribe en el body de la respuesta HTTP. Si la cabecera no especifica content-type usa los los primeros 512 bytes de datos para detectar el tipo de contenido - WriteHeader - envia un numero entero que representa el codigo de estado de la respuesta HTTP. Despues de usar este metodo no se puede escribir ni modificar nada en la cabecera. Si no se use este metodo por defecto cuando se llama a Write se envia el codigo 200 OK Es muy util para enviar codigos de errores - Header - devuelve un map de campos de la cabecera que se pueden modificar y que seran enviados en la respuesta al cliente type post struct { User string Langs []string } func writeExample(w http.ResponseWriter, r *http.Request) { str := `<html> <head><title>Write Example</title></head> <body><h1>Hello World</h1></body> </html>` w.Write([]byte(str)) } func writeHeaderExample(w http.ResponseWriter, r *http.Request) { w.WriteHeader(501) fmt.Fprintln(w, \"Not implemented yet\") } func headerExample(w http.ResponseWriter, r *http.Request) { w.Header().Set(\"Location\", \"https://jolav.github.io\") w.WriteHeader(302) } func jsonExample(w http.ResponseWriter, r *http.Request) { w.Header().Set(\"Content-Type\", \"application/json\") post := &post{ User: \"jolav\", Langs: []string{\"Go\", \"HTML\", \"Javascript\"}, } json, _ := json.Marshal(post) w.Write(json) } func main() { server := http.Server{ Addr: \"127.0.0.1:8080\", } http.HandleFunc(\"/write\", writeExample) http.HandleFunc(\"/writeheader\", writeHeaderExample) http.HandleFunc(\"/redirect\", headerExample) http.HandleFunc(\"/json\", jsonExample) server.ListenAndServe() }","title":"ResponseWriter"},{"location":"golang-para-web/#middleware","text":"type Middleware []http.Handler // Adds a handler to the middleware func (m *Middleware) Add(handler http.Handler) { *m = append(*m, handler) } func (m Middleware) ServeHTTP(w http.ResponseWriter, r *http. \u27a5Request) { // Process the middleware }","title":"Middleware"},{"location":"golang-para-web/#cookies","text":"https://golang.org/src/net/http/cookie.go type Cookie struct { Name string Value string Path string // optional Domain string // optional Expires time.Time // optional RawExpires string // for reading cookies only // MaxAge=0 means no 'Max-Age' attribute specified. // MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0' // MaxAge>0 means Max-Age attribute present and given in seconds MaxAge int Secure bool HttpOnly bool Raw string Unparsed []string // Raw text of unparsed attribute-value pairs } Si no se usa el campo Expires la cookie es de sesion o temporal y se eliminan del navegador cuando este se cierra. De lo contrario la cookie es persistente y dura hasta que expire o se elimine. Usar MaxAge en lugar de Expires que esta deprecada package main import ( \"encoding/base64\" \"fmt\" \"net/http\" \"time\" ) func setCookie(w http.ResponseWriter, r *http.Request) { c1 := http.Cookie{ Name: \"first cookie\", Value: \"Valor de la primera galleta\", HttpOnly: true, } c2 := http.Cookie{ Name: \"second cookie\", Value: \"Valor de la segunda galleta\", HttpOnly: true, } http.SetCookie(w, &c1) http.SetCookie(w, &c2) } func getCookie(w http.ResponseWriter, r *http.Request) { c1, err := r.Cookie(\"first cookie\") if err != nil { fmt.Fprintln(w, \"Cannot get the first cookie\") } cs := r.Cookies() fmt.Fprintln(w, c1) fmt.Fprintln(w, cs) } func setMessage(w http.ResponseWriter, r *http.Request) { msg := []byte(\"Hello World!\") c := http.Cookie{ Name: \"flash\", Value: base64.URLEncoding.EncodeToString(msg), } http.SetCookie(w, &c) } func showMessage(w http.ResponseWriter, r *http.Request) { c, err := r.Cookie(\"flash\") if err != nil { if err == http.ErrNoCookie { fmt.Fprintln(w, \"No message found\") } } else { rc := http.Cookie{ Name: \"flash\", MaxAge: -1, Expires: time.Unix(1, 0), } http.SetCookie(w, &rc) val, _ := base64.URLEncoding.DecodeString(c.Value) fmt.Fprintln(w, string(val)) } } func main() { server := http.Server{ Addr: \"127.0.0.1:8080\", } http.HandleFunc(\"/setCookie\", setCookie) http.HandleFunc(\"/getCookie\", getCookie) http.HandleFunc(\"/setMessage\", setMessage) http.HandleFunc(\"/showMessage\", showMessage) server.ListenAndServe() }","title":"Cookies"},{"location":"golang-para-web/#sessions","text":"","title":"Sessions"},{"location":"golang-para-web/#forms","text":"1\u00ba - Parseamos la peticion con ParseForm o ParseMultipartForm 2\u00ba - Accedemos al formulario // formulario para process1 <form action=\"http://127.0.0.1:8080/process1?hello=world&thread=123\" method=\"post\" enctype=\"application/x-www-form-urlencoded\"> <input type=\"text\" name=\"hello\" value=\"jolav\" /> <input type=\"text\" name=\"post\" value=\"1234\" /> <input type=\"submit\" /> </form> <!-- Obtendriamos map[thread:[123] hello:[jolav world] post:[1234]] Tenemos los valores de la URL mas los del formulario Para sacar solo un campo usamos notacion r.Form[\"post\"] Si usamos r.PostForm se ignoran los pares de la URL y solo se usan los del formulario resultando map[post:[1234] hello:[jolav]] Tambien existe ParseMultipartForm --> // formulario para process2 y process3 <form action=\"http://localhost:8080/process?hello=world&thread=123\" method=\"post\" enctype=\"multipart/form-data\"> <input type=\"text\" name=\"hello\" value=\"jolav\" /> <input type=\"text\" name=\"post\" value=\"1234\" /> <input type=\"file\" name=\"uploaded\"> <input type=\"submit\"> </form> package main import ( \"fmt\" \"io/ioutil\" \"net/http\" ) func process1(w http.ResponseWriter, r *http.Request) { r.ParseForm() fmt.Fprintln(w, r.Form[\"campo\"][0]) fmt.Prinltln(w, r.Form.Get(\"campo\")) // fmt.Fprintln(w, r.PostForm) } func process2(w http.ResponseWriter, r *http.Request) { file, _, err := r.FormFile(\"uploaded\") if err == nil { data, err := ioutil.ReadAll(file) if err == nil { fmt.Fprintln(w, string(data)) } } } func process3(w http.ResponseWriter, r *http.Request) { r.ParseMultipartForm(1024) fileHeader := r.MultipartForm.File[\"uploaded\"][0] file, err := fileHeader.Open() if err == nil { data, err := ioutil.ReadAll(file) if err == nil { fmt.Fprintln(w, string(data)) } } } func main() { server := http.Server{ Addr: \"127.0.0.1:8080\", } http.HandleFunc(\"/process1\", process1) http.HandleFunc(\"/process2\", process2) http.HandleFunc(\"/process3\", process3) server.ListenAndServe() }","title":"Forms"},{"location":"golang-para-web/#cliente-http","text":"type Client func (c *Client) Do(req *Request) (*Response, error) func (c *Client) Get(url string) (resp *Response, err error) func (c *Client) Head(url string) (resp *Response, err error) func (c *Client) Post(url string, bodyType string, body io.Reader) (resp *Response, err error) func (c *Client) PostForm(url string, data url.Values) (resp *Response, err error) Ejemplo Hacer peticiones get Poner en el main o donde sea para asegurarse que tiene un tiempo maximo de espera y no se queda colgado esperando hasta el infinito (que es el valor por defecto) https://reddit.com/r/golang/comments/45mzie/dont_use_gos_default_http_client/ http.DefaultClient.Timeout = 10 * time.Second func getHttpRequest() { url := \"https://codetabs.com/tools/geoip/geoip.html\" resp, err := http.Get(url) if err != nil { log.Fatal(err) } defer resp.Body.Close() decoder := json.NewDecoder(resp.Body) err = decoder.Decode(&geo) if err != nil { panic(err) } aux.SendDataToClient(w, r, geo) }","title":"Cliente HTTP"},{"location":"golang-para-web/#servemux","text":"func mainNormal() { // assets for all apps assets := http.FileServer(http.Dir(\"_public\")) http.Handle(\"/\", http.StripPrefix(\"/\", assets)) // assets for individual apps votingRes := http.FileServer(http.Dir(\"voting/assets\")) http.Handle(\"/voting/assets/\", http.StripPrefix(\"/voting/assets/\", votingRes)) book := http.FileServer(http.Dir(\"./book/\")) nightlife := http.FileServer(http.Dir(\"./nightlife/\")) stock := http.FileServer(http.Dir(\"./stock/\")) http.Handle(\"/book/\", http.StripPrefix(\"/book\", book)) http.Handle(\"/nightlife/\", http.StripPrefix(\"/nightlife\", nightlife)) http.Handle(\"/stock/\", http.StripPrefix(\"/stock\", stock)) // any /voting/* will redirect to voting.Voting http.HandleFunc(\"/voting/\", voting.Router) // any /pintelest/* will redirect to voting.Voting http.HandleFunc(\"/pintelest/\", nodePintelest) server := http.Server{ Addr: \"localhost:3006\", } server.ListenAndServe() } func mainMux() { mux := http.NewServeMux() // assets for all apps assets := http.FileServer(http.Dir(\"_public\")) mux.Handle(\"/\", http.StripPrefix(\"/\", assets)) // assets for individual apps votingRes := http.FileServer(http.Dir(\"voting/assets\")) mux.Handle(\"/voting/assets/\", http.StripPrefix(\"/voting/assets/\", votingRes)) book := http.FileServer(http.Dir(\"./book/\")) nightlife := http.FileServer(http.Dir(\"./nightlife/\")) stock := http.FileServer(http.Dir(\"./stock/\")) mux.Handle(\"/book/\", http.StripPrefix(\"/book\", book)) mux.Handle(\"/nightlife/\", http.StripPrefix(\"/nightlife\", nightlife)) mux.Handle(\"/stock/\", http.StripPrefix(\"/stock\", stock)) mux.HandleFunc(\"/voting/\", voting.Router) //mux.HandleFunc(\"/voting/p/\", nodePintelest) // any /pintelest/* will redirect to nodePintelest mux.HandleFunc(\"/pintelest/\", nodePintelest) server := http.Server{ Addr: \"localhost:3006\", Handler: mux, } server.ListenAndServe() } // http://codepodu.com/subdomains-with-golang/ type Subdomains map[string]http.Handler func (subdomains Subdomains) ServeHTTP(w http.ResponseWriter, r *http.Request) { domainParts := strings.Split(r.Host, \".\") if mux := subdomains[domainParts[0]]; mux != nil { // Let the appropriate mux serve the request mux.ServeHTTP(w, r) } else { // Handle 404 http.Error(w, \"Not found\", 404) } } type Mux struct { http.Handler } func (mux Mux) ServeHTTP(w http.ResponseWriter, r *http.Request) { mux.ServeHTTP(w, r) } func adminHandlerOne(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"It's adminHandlerOne , Hello, %q\", r.URL.Path[1:]) } func adminHandlerTwo(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"It's adminHandlerTwo , Hello, %q\", r.URL.Path[1:]) } func analyticsHandlerOne(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"It's analyticsHandlerOne , Hello, %q\", r.URL.Path[1:]) } func analyticsHandlerTwo(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"It's analyticsHandlerTwo , Hello, %q\", r.URL.Path[1:]) } func main() { adminMux := http.NewServeMux() adminMux.HandleFunc(\"/admin/pathone\", adminHandlerOne) adminMux.HandleFunc(\"/admin/pathtwo\", adminHandlerTwo) analyticsMux := http.NewServeMux() analyticsMux.HandleFunc(\"/analytics/pathone\", analyticsHandlerOne) analyticsMux.HandleFunc(\"/analytics/pathtwo\", analyticsHandlerTwo) subdomains := make(Subdomains) subdomains[\"admin\"] = adminMux subdomains[\"analytics\"] = analyticsMux http.ListenAndServe(\":8080\", subdomains) }","title":"ServeMux"},{"location":"golang-para-web/#htmltemplate","text":"import html/template Para usarlo hay que importar el paquete html/template crear la plantilla t, _ := template.ParseFiles(\"index.html\") asignar valor a variables de plantilla template_value := \"Hola\" servir la pagina t.Execute(w, template_values) index.html <!doctype html> <html> <head> <meta charset=\"utf-8\"> <title>Hello World</title> </head> <body> Hello {{ . }} </body> </html> pagina.go package main import ( \"html/template\" \"net/http\" ) func handler(w http.ResponseWriter, r *http.Request) { t, _ := template.ParseFiles(\"index.html\") name := \"World\" t.Execute(w, name) } func main() { http.HandleFunc(\"/\", handler) http.ListenAndServe(\":8080\", nil) }","title":"HTML/TEMPLATE"},{"location":"golang-para-web/#fields","text":"{{}} cualquier cosa a ser renderizada debe ir entre dobles parentesis {{.}} abreviatura para el objeto actual {{ .FieldName}} campo FieldName del objecto actual Arrays and slices type Friend struct { Fname string } type Person struct { UserName string Emails []string Friends []*Friend } func main() { f1 := Friend{Fname: \"minux.ma\"} f2 := Friend{Fname: \"xushiwei\"} t := template.New(\"fieldname example\") t, _ = t.Parse(`hello {{.UserName}}! {{range .Emails}} an email {{.}} {{end}} {{with .Friends}} {{range .}} my friend name is {{.Fname}} {{end}} {{end}} `) p := Person{UserName: \"Astaxie\", Emails: []string{\"astaxie@beego.me\", \"astaxie@gmail.com\"}, Friends: []*Friend{&f1, &f2}} t.Execute(os.Stdout, p) } Arrays and slices index const tmpl = ` {{range $index, $link := .}} {{$index}}: <a href=\"{{$link.Href}}\">{{$link.Name}}</a> {{end}} ` type Link struct { Name string Href string } func main() { // arrays var la [2]Link la[0] = Link{\"Google\", \"https://www.google.com/\"} la[1] = Link{\"Facebook\", \"https://www.facebook.com/\"} t, _ := template.New(\"foo\").Parse(tmpl) t.Execute(os.Stdout, la) // slices var ls []Link ls = append(ls, Link{\"Google\", \"https://www.google.com/\"}) ls = append(ls, Link{\"Facebook\", \"https://www.facebook.com/\"}) t.Execute(os.Stdout, ls) } Maps const tmpl = ` {{range $name, $href := .}} <a href=\"{{$href}}\">{{$name}}</a> {{end}} ` func main() { // map var m = map[string]string{ \"Google\": \"https://www.google.com/\", \"Facebook\": \"https://www.facebook.com/\", } t, _ := template.New(\"foo\").Parse(tmpl) t.Execute(os.Stdout, m) }","title":"Fields"},{"location":"golang-para-web/#conditions","text":"{{if}} {{else}} : Solo para valores booleanos, no hace comparaciones {{if ``}} Will not print. {{end}} {{if `anything`}} Will print. {{end}} {{if `anything`}} Print IF part. {{else}} Print ELSE part. {{end}}","title":"Conditions"},{"location":"golang-para-web/#pipelines","text":"{{ . | html}} Por ejemplo usamos esto para coger el objto actual '.' y aplicarle escape a HTML al objeto","title":"Pipelines"},{"location":"golang-para-web/#variables","text":"Pasar variables a templates // usando anonymous structs var templates = template.Must(template.ParseGlob(\"templates/*\")) func handle(w http.ResponseWriter, r *http.Request) { w.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\") templates.ExecuteTemplate(w, \"page.html\", struct { PageTitle string Message string User string }{\"Template example: struct\", \"Hello\", \"World\"}) } // usando Maps var templates = template.Must(template.ParseGlob(\"templates/*\")) func handle(w http.ResponseWriter, r *http.Request) { w.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\") m := make(map[string]interface{}) m[\"PageTitle\"] = \"Template example: map\" m[\"Message\"] = \"Hello\" m[\"User\"] = \"World\" templates.ExecuteTemplate(w, \"page.html\", m) } // mapa m := map[string]interface{}{ \"imgs\": imgs, // {{range .imgs.Image}}{{.}}{{end}} \"user\": p, //{{.user.Name}} } // struct , Images []Image type Data struct { I Images P Profile } var d Data d.I = imgs // {{range .I.Image}}{{.}}{{end}} d.P = p // {{.P.Name}}*/ t.Execute(w, &m)","title":"Variables"},{"location":"golang-para-web/#funciones","text":"","title":"Funciones"},{"location":"golang-para-web/#predefinidas","text":"Por ejemplo print equivale a fmt.Sprintf func main() { texto := \"{{with $x := `hello`}}{{printf `%s %s` $x `Mary`}} {{end}}!\\n\" t := template.New(\"test\") t = template.Must(t.Parse(texto)) t.Execute(os.Stdout, nil) // Resultado -> hello Mary!","title":"Predefinidas"},{"location":"golang-para-web/#de-diseno","text":"const tmpl = ` <span>hello {{gettext .}}</span> <span>hello {{. | gettext}}</span> ` var funcMap = template.FuncMap{ \"gettext\": gettext, } func gettext(s string) string { if s == \"world\" { return \"otraCosa\" } return s } func main() { t, _ := template.New(\"foo\").Funcs(funcMap).Parse(tmpl) s := \"world\" t.Execute(os.Stdout, s) }","title":"De Dise\u00f1o"},{"location":"golang-para-web/#must","text":"Es una funcion del paquete template para validar plantillas","title":"Must"},{"location":"golang-para-web/#nested-templates","text":"Se puede declarar una plantilla: {{ define \"sub-plantilla\"}} contenido que sea {{ end}} Luego esa plantilla se inserta {{ template \"sub-plantilla\" }} base.html {{define \"base\"}} <!doctype html> <html> <head> <meta charset=\"utf-8\"> <title>{{template \"title\" .}}</title> </head> <body> {{template \"content\" .}} </body> </html> {{end}} index.html {{template \"base\" .}} {{define \"title\"}}my title{{end}} {{define \"content\"}} <div>hello {{.}}</div> {{end}} nestedTemplates.go func main() { // cannot put base.html before index.html will give empty output // t, _ := template.ParseFiles(\"base.html\", \"index.html\") t, _ := template.ParseFiles(\"index.html\", \"base.html\") name := \"world\" t.Execute(os.Stdout, name) }","title":"Nested templates"},{"location":"golang-para-web/#pasar-vars-a-js","text":"Pasar variables golang a cliente js <!-- guest.html--> <script type=\"text/javascript\"> // Pass golang vars to client js //window.addEventListener('load', voting.init({{.}})) var golang = {{.}} // pasa como variable global objeto //var golang = \"{{ .}}\"; // lo pasa como string window.addEventListener('load', function () { voting.init() }) </script> // voting.go func guest(w http.ResponseWriter, r *http.Request) { var data aPoll data = aPoll{Question: \"Texto de la cuestion\"} tmpl[\"guest.html\"].ExecuteTemplate(w, \"guest.html\", data) } var voting = (function () { function init () { console.log(\"Data from golang\", golang); } return { init: init }; }());","title":"Pasar vars a js"},{"location":"golang-para-web/#neturl","text":"","title":"NET/URL"},{"location":"golang-para-web/#anadir-parametros-a-url","text":"// sobre una URL existente values := r.URL.Query() values.Add(\"nombreNuevoParamatro\", valor) values.Get(\"nombreDelValor\", valor) r.URL.RawQuery = values.Encode() fmt.Println(r.URL.String()) fmt.Println(values[\"nombreNuevoParametro\"]) // construyendo una URL urlData, err := url.Parse(\"https://apisquesea.com/custom/v1?q=\") params := url.Values{} params.Add(\"q\", r.URL.Query().Get(\"q\")) params.Add(\"cx\", c.APIImage.CseID) params.Add(\"key\", c.APIImage.Key) params.Add(\"num\", r.URL.Query().Get(\"num\")) params.Add(\"offset\", r.URL.Query().Get(\"offset\")) urlData.RawQuery = params.Encode() URL parsing","title":"A\u00f1adir parametros a URL"},{"location":"golang-para-web/#utilidades","text":"","title":"UTILIDADES"},{"location":"golang-para-web/#fresh","text":"https://github.com/pilu/fresh - Especie de nodemon para golang. archivo de configuracion que se ejecuta con fresh -c ruta/al/archivo root: . tmp_path: ./tmp build_name: runner-build build_log: runner-build-errors.log valid_ext: .go, .tpl, .tmpl, .html, .css, .js ignored: assets, tmp, pintelest build_delay: 600 colors: 1 log_color_main: cyan log_color_build: yellow log_color_runner: green log_color_watcher: magenta log_color_app:","title":"fresh"},{"location":"golang-snippets/","text":"GOLANG SNIPPETS SEND/RECEIVE DATA SendResponse // SendResponse... func SendResponse(w http.ResponseWriter, d interface{}, s int) { if d == nil { w.WriteHeader(s) return } dataJSON, err := json.MarshalIndent(d, \"\", \" \") if err != nil { log.Printf(\"ERROR Marshaling %v\\n\", err) http.Error(w, \"Internal Server Error\", http.StatusInternalServerError) return } w.Header().Set(\"Content-Type\", \"application/json\") w.WriteHeader(s) _, err = w.Write(dataJSON) if err != nil { log.Printf(\"ERROR writing JSON response: %v\\n\", err) } } // SendtResponseXML ... func SendResponseXML(w http.ResponseWriter, d interface{}, s int) { w.WriteHeader(s) if d == nil { return } w.Header().Set(\"Content-Type\", \"application/xml\") dataXML, err := xml.MarshalIndent(d, \"\", \" \") if err != nil { log.Printf(\"ERROR Marshaling XML: %v\\n\", err) http.Error(w, \"Internal Server Error\", http.StatusInternalServerError) return } _, err = w.Write(dataXML) if err != nil { log.Printf(\"ERROR writing XML response: %v\\n\", err) } } Fetch GET // FetchGET ... func FetchGET(url string, d interface{}) error { client := &http.Client{ Timeout: 10 * time.Second, } // PARAMS IN URL u, err := url.Parse(BASE_URL) if err != nil { err := fmt.Sprintf(\"ERROR Parsing URL => %v\", err) } params := url.Values{ \"key\": {API_KEY}, \"aqi\": {\"no\"}, \"q\": {city}, } u.RawQuery = params.Encode() path := u.String() // HEADERS req, err := http.NewRequest(\"GET\", path, nil) if err != nil { log.Printf(\"ERROR: creating request %s => %v\", path, err) return err } req.Header.Set(\"Authorization\", \"Bearer ACCESS_TOKEN\") req.Header.Set(\"Accept\", \"application/json\") resp, err := client.Do(req) if err != nil { log.Printf(\"ERROR: Request %s => %v\", path, err) return err } ///// // NO HEADERS resp, err := client.Get(path) if err != nil { log.Printf(\"ERROR: Request %s => %v\", path, err) return err } ///// // common defer resp.Body.Close() if resp.StatusCode < 200 || resp.StatusCode >= 300 { err := errors.New(\"HTTP status:\" + http.StatusText(resp.StatusCode)) log.Printf(\"ERROR: %v\", err) return err } decoder := json.NewDecoder(resp.Body) err = decoder.Decode(&d) if err != nil { log.Printf(\"ERROR unnmarshalling => %v\", err) return err } return nil } DoGetConcurrentRequest func fillDefaultStocks(links []string) { ch := make(chan []byte) for _, link := range links { go doGetConcurrentRequest(link, ch) } for range links { json.Unmarshal(<-ch, &stocks) } } func doGetConcurrentRequest(url string, ch chan<- []byte) { resp, err := http.Get(url) if err != nil { msg := fmt.Sprintf(\"ERROR 1 HTTP Request %s\", err) log.Printf(msg) ch <- []byte(msg) return } if resp.StatusCode != 200 { msg := fmt.Sprintf(\"ERROR 2 Status Code %d\", resp.StatusCode) log.Printf(msg) ch <- []byte(msg) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { msg := fmt.Sprintf(\"ERROR 3 HTTP Request %s\", err) log.Printf(msg) ch <- []byte(msg) return } ch <- body } fetchPOST // FetchPOST ... func FetchPOST(url string, d interface{}) error { client := &http.Client{ Timeout: 10 * time.Second, } jsonData, err := json.Marshal(d) if err != nil { log.Printf(\"ERROR: Failed to marshal request body => %v\", err) return err } req, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData)) if err != nil { log.Printf(\"ERROR: Failed to create request for %s => %v\", url, err) return err } req.Header.Set(\"Authorization\", \"Bearer ACCESS_TOKEN\") req.Header.Set(\"Accept\", \"application/json\") req.Header.Set(\"Content-Type\", \"application/json\") resp, err := client.Do(req) if err != nil { log.Printf(\"ERROR: Request %s => %v\", url, err) return err } defer resp.Body.Close() if resp.StatusCode < 200 || resp.StatusCode >= 300 { err := errors.New(\"HTTP status: \" + http.StatusText(resp.StatusCode)) log.Printf(\"ERROR: %v\", err) return err } decoder := json.NewDecoder(resp.Body) err = decoder.Decode(&d) if err != nil { log.Printf(\"ERROR unmarshalling => %v\", err) return err } return nil } fetchPOST with params import ( url \"net/url\" ) // FetchPOSTparams ... func FetchPOSTparams(path string, d map[string]string) error { client := &http.Client{ Timeout: 10 * time.Second, } params := url.Values{} for key, value := range d { params.Add(key, value) } /*params := url.Values{ \"test\": {myTest}, \"data\": {myData}, }*/ body := bytes.NewBufferString(params.Encode()) req, err := http.NewRequest(\"POST\", path, body) if err != nil { log.Printf(\"ERROR: Failed to create request for %s => %v\", path, err) return err } req.Header.Set(\"Authorization\", \"Bearer YOUR_ACCESS_TOKEN\") req.Header.Set(\"Accept-Charset\", \"utf-8\") req.Header.Set(\"Content-Type\", \"application/x-www-form-pathencoded\") resp, err := client.Do(req) if err != nil { log.Printf(\"ERROR: Request %s => %v\", path, err) return err } defer resp.Body.Close() if resp.StatusCode < 200 || resp.StatusCode >= 300 { err := errors.New(\"HTTP status: \" + http.StatusText(resp.StatusCode)) log.Printf(\"ERROR: %v\", err) return err } return nil } GetInterfacesTypes // GetInterfacesTypes ... func GetInterfacesTypes(f interface{}) { switch vf := f.(type) { case map[string]interface{}: //fmt.Println(\"is a map:\") for k, v := range vf { switch vv := v.(type) { case string: //fmt.Printf(\"%v: is string - %q\\n\", k, vv) case int: //fmt.Printf(\"%v: is int - %q\\n\", k, vv) case float64: //fmt.Printf(\"%v: is float64 - %g\\n\", k, vv) default: fmt.Sprintln(k, v, vv) //fmt.Printf(\"%v: \", k) GetInterfacesTypes(v) } } case []interface{}: //fmt.Println(\"is an array:\") for k, v := range vf { switch vv := v.(type) { case string: //fmt.Printf(\"%v: is string - %q\\n\", k, vv) case int: //fmt.Printf(\"%v: is int - %q\\n\", k, vv) case float64: //fmt.Printf(\"%v: is float64 - %g\\n\", k, vv) if k == 4 { fmt.Println(`ALELUYA==>`, vv) } default: fmt.Sprintln(k, v, vv) //fmt.Printf(\"%v: \", k) GetInterfacesTypes(v) } } } } IsJSON // IsJSON ... func IsJSON(str string) bool { var js json.RawMessage return json.Unmarshal([]byte(str), &js) == nil } IsPointer func IsPointer(d interface{}) bool { return reflect.TypeOf(d).Kind() == reflect.Ptr } FILES ReadFile // ReadFile ... func ReadFile(filePath string) (string, error) { data, err := ioutil.ReadFile(filePath) if err != nil { return \"\", err } return string(data), nil } // ReadFileLineByLine ... func ReadFileLineByLine(filePath string) ([]string, error) { file, err := os.Open(filePath) if err != nil { return nil, err } defer file.Close() var lines []string scanner := bufio.NewScanner(file) for scanner.Scan() { lines = append(lines, scanner.Text()) } if err := scanner.Err(); err != nil { return nil, err } return lines, nil } WriteFile // WriteFile ... func WriteFile(filePath string, content string) error { file, err := os.Create(filePath) if err != nil { return err } defer file.Close() _, err = file.WriteString(content) if err != nil { return err } return nil } LoadJSON from File // LoadJSONFIleDecoder ... use streams func LoadJSONFileDecoder(filePath string, data interface{}) error { file, err := os.Open(filePath) if err != nil { return err } defer file.Close() decoder := json.NewDecoder(file) err = decoder.Decode(data) if err != nil { return err } return nil } // LoadJSONFileMarschall ... loads all func LoadJSONFileMarshall(filePath string, data interface{}) error { file, err := os.Open(filePath) if err != nil { return err } defer file.Close() body, err := ioutil.ReadAll(file) if err != nil { return err } err = json.Unmarshal(body, data) if err != nil { return err } return nil } WriteJSONtoFile // WriteJSONtoFile ... func WriteJSONtoFile(filePath string, d interface{}) error { f, err := os.Create(filePath) if err != nil { return err } defer f.Close() encoder := json.NewEncoder(f) err = encoder.Encode(d) if err != nil { return err } return nil } DownloadFile // DownloadFile ... func DownloadFile(filePath string, url string) error { out, err := os.Create(filePath) if err != nil { return err } defer out.Close() resp, err := http.Get(url) if err != nil { return err } defer resp.Body.Close() if resp.StatusCode != http.StatusOK { return fmt.Errorf(\"ERROR Downloading file: %d\", resp.StatusCode) } _, err = io.Copy(out, resp.Body) if err != nil { return err } return nil } SendFileFromServerToClient func Index(w http.ResponseWriter, r *http.Request) { url := \"http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png\" timeout := time.Duration(5) * time.Second transport := &http.Transport{ ResponseHeaderTimeout: timeout, Dial: func(network, addr string) (net.Conn, error) { return net.DialTimeout(network, addr, timeout) }, DisableKeepAlives: true, } client := &http.Client{ Transport: transport, } resp, err := client.Get(url) if err != nil { fmt.Println(err) } defer resp.Body.Close() //copy the relevant headers. If you want to preserve the downloaded // file name, extract it with go's url parser. w.Header().Set(\"Content-Disposition\", \"attachment; filename=Wiki.png\") w.Header().Set(\"Content-Type\", r.Header.Get(\"Content-Type\")) w.Header().Set(\"Content-Length\", r.Header.Get(\"Content-Length\")) //stream the body to the client without fully loading it into memory io.Copy(w, resp.Body) } func main() { http.HandleFunc(\"/\", Index) err := http.ListenAndServe(\":8000\", nil) if err != nil { fmt.Println(err) } } ParseCSVFile // file.csv \"AAPL\",\"Apple Inc\",\"4.10%\" \"AMZN\",\"Amazon.com Inc\",\"3.49%\" \"MSFT\",\"Microsoft Corp\",\"3.23%\" \"GOOGL\",\"Alphabet Inc\",\"3.09%\" type stock struct { Symbol string `json:\"symbol\"` } func main() { csvFile, _ := os.Open(\"sp.csv\") reader := csv.NewReader(bufio.NewReader(csvFile)) var stocks []stock for { line, error := reader.Read() if error == io.EOF { break } aux := stock{ Symbol: line[0], } stocks = append(stocks, aux) } //stocksJSON, _ := json.Marshal(stocks) //fmt.Println(string(stocksJSON)) f, err := os.Create(\"spList.json\") if err != nil { panic(err) } defer f.Close() e := json.NewEncoder(f) e.Encode(&stocks) fmt.Println(`END`) } // result [ { \"symbol\": \"AAPL\" }, { \"symbol\": \"AMZN\" }, { \"symbol\": \"MSFT\" }, { \"symbol\": \"GOOGL\" } ] HTTP SERVER Lectura Request Handling in Go type Handler interface { ServeHttp( ResponseWriter, *Request ) } Wrapper Es muy sencillo pero luego complica para testearlo mux.HandleFunc(\"/path\", func(w http.ResponseWriter, r *http.Request) { nombreFuncion(w, r, loQueQueramosPasar) }) Handle + HandleFunc package main import ( \"fmt\" \"net/http\" \"time\" ) func timeHandler1(w http.ResponseWriter, r *http.Request) { tm := time.Now().Format(time.RFC1123) fmt.Println(\"/time/\" + tm) w.Write([]byte(\"The time is: \" + tm)) } func timeHandler2(format string) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){ tm := time.Now().Format(format) fmt.Println(\"/time/\" + tm) w.Write([]byte(\"The time is: \" + tm)) }) } /* lo mismo pero con conversion implicita al tipo HandlerFunc func timeHandler2(format string) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { tm := time.Now().Format(format) fmt.Println(\"/time/\" + tm) w.Write([]byte(\"The time is: \" + tm)) } } */ func hiHandler(w http.ResponseWriter, r *http.Request) { fmt.Println(\"/hello\") w.Write([]byte(\"/hello\")) } func main() { mux := http.NewServeMux() // Creamos un closure con las variables que queremos usar th2 := timeHandler2(time.RFC3339) mux.HandleFunc(\"/time/1\", timeHandler1) mux.Handle(\"/time/2\", th2) mux.HandleFunc(\"/hello\", hiHandler) //http.HandleFunc(\"/time/1\", timeHandler1) //http.Handle(\"/time/2\", th2) //http.HandleFunc(\"/hello\", hiHandler) http.ListenAndServe(\":3000\", mux /*nil*/) } Handler type specificHandler struct { Thing string } func(h *specificHandler)ServeHTTP(w http.ResponseWriter,r *http.Request) { w.Write(h.Thing) } func main() { http.Handle(\"/something\", &specificHandler{Thing: \"Hello world!\"}) http.ListenAndServe(\":8080\", nil) } package main import ( \"fmt\" \"net/http\" \"time\" ) type timeHandler struct { format string } func (th *timeHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { tm := time.Now().Format(th.format) fmt.Println(\"/time/\" + tm) w.Write([]byte(\"The time is: \" + tm)) } type hiHandler struct{} func (ti *hiHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { fmt.Println(\"/hello\") w.Write([]byte(\"/hello\")) } func main() { /mux := http.NewServeMux() th1 := &timeHandler{format: time.RFC1123} th2 := &timeHandler{format: time.RFC3339} hi := &hiHandler{} mux.Handle(\"/time/1\", th1) mux.Handle(\"/time/2\", th2) mux.Handle(\"/hello\", hi) //http.Handle(\"/time/1\", th1) //http.Handle(\"/time/2\", th2) //http.Handle(\"/hello\", hi) http.ListenAndServe(\":3000\", /*nil*/ mux) } Ejemplo Completo package main import ( \"errors\" \"fmt\" \"log\" \"net/http\" \"os\" \"time\" _ \"github.com/go-sql-driver/mysql\" ) type app struct { Config struct { Mode string `json:\"mode\"` Port int `json:\"port\"` Valid string `json:\"valid\"` ErrorsLogFile string `json:\"errorsLogFile\"` HitsLogFile string `json:\"hitsLogFile\"` } `json:\"config\"` Mysql struct { User string `json:\"user\"` Password string `json:\"password\"` DB string `json:\"db\"` Host string `json:\"host\"` Port int `json:\"port\"` TableBW string `json:\"tableBw\"` TableHits string `json:\"tableHits\"` } } type requestError struct { Error error `json:\"-\"` Message string `json:\"message\"` StatusCode int `json:\"-\"` } func (a *app) ServeHTTP(w http.ResponseWriter, r *http.Request) { r.ParseForm() valid := r.Form.Get(\"test\") if valid != a.Config.Valid { http.Error(w, \"Unauthorized\", http.StatusUnauthorized) return } updateBw(w, r, a) } func main() { var a app loadConfigJSON(&a) checkMode(&a) // Custom Log File if a.Config.Mode == \"production\" { var f = a.Config.ErrorsLogFile mylog, err := os.OpenFile(f, os.O_WRONLY|os.O_CREATE|os.O_APPEND , 0644) if err != nil { log.Printf(\"ERROR opening log file %s\\n\", err) } defer mylog.Close() // defer must be in main log.SetOutput(mylog) } mux := http.NewServeMux() mux.Handle(\"/savebw/\", &a) mux.Handle(\"/saveHits/\", checkValid( func(w http.ResponseWriter, r *http.Request) { updateHits(w, r, &a) }, a.Config.Valid)) mux.HandleFunc(\"/get/\", checkValid( func(w http.ResponseWriter, r *http.Request) { getStats(w, r, &a) }, a.Config.Valid)) mux.HandleFunc(\"/\", badRequest) server := http.Server{ Addr: fmt.Sprintf(\"localhost:%d\", a.Config.Port), Handler: mux, ReadTimeout: 10 * time.Second, WriteTimeout: 30 * time.Second, MaxHeaderBytes: 1 << 20, } log.Printf(\"Server up listening %s in mode %s\", server.Addr , a.Config.Mode) server.ListenAndServe() } func checkValid(next http.HandlerFunc, test string) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { r.ParseForm() valid := r.Form.Get(\"test\") if valid != test { http.Error(w, \"Unauthorized\", http.StatusUnauthorized) return } next.ServeHTTP(w, r) } } func badRequest(w http.ResponseWriter, r *http.Request) { re := &requestError{ Error: errors.New(\"Unexistent Endpoint\"), Message: \"Bad Request\", StatusCode: 400, } sendErrorToClient(w, re) } NETWORK GetIP // GetIP ... func GetIP(r *http.Request) string { headers := []string{ \"X-Forwarded-For\", \"X-Real-IP\", \"CF-Connecting-IP\", } for _, header := range headers { ips := r.Header.Get(header) if ips != \"\" { return strings.TrimSpace(strings.Split(ips, \",\")[0]) } } ip := r.RemoteAddr colon := strings.LastIndex(ip, \":\") if colon != -1 { ip = ip[:colon] } return strings.TrimSpace(ip) } GetRequestOrigin func GetRequestOrigin(r *http.Request) string { switch { case r.Header.Get(\"Host\") != \"\": return r.Header.Get(\"Host\") case r.Header.Get(\"Origin\") != \"\": return r.Header.Get(\"Origin\") case r.Header.Get(\"Referer\") != \"\": return r.Header.Get(\"Referer\") default: return \"?????\" } } IsValidURL // IsValidURL ... func IsValidURL(rawurl string) bool { rawurl = strings.TrimSpace(rawurl) parsedURL, err := url.Parse(rawurl) if err != nil { return false } if parsedURL.Scheme != \"http\" && parsedURL.Scheme != \"https\" { return false } if parsedURL.Host == \"\" { return false } return true } ExistsURL // ExistsURL ... func ExistsURL(myUrl string) bool { client := http.Client{ Timeout: 5 * time.Second, CheckRedirect: func(req *http.Request, via []*http.Request) error { return http.ErrUseLastResponse // Dont follow redirections }, } resp, err := client.Head(myUrl) if err != nil { return false } defer resp.Body.Close() return resp.StatusCode >= 200 && resp.StatusCode < 400 } GetLanguage // GetLanguage ... func GetLanguage(r *http.Request) string { lang := r.Header.Get(\"Accept-Language\") if lang != \"\" { langs := strings.SplitN(lang, \",\", 2) return strings.ToLower(strings.TrimSpace(langs[0])) } return \"en\" } RemoveProtocolFromURL // RemoveProtocol ... func RemoveProtocol(url string) string { if strings.HasPrefix(url, \"https://\") { return url[8:] } if strings.HasPrefix(url, \"http://\") { return url[7:] } return url } RemoveProtocolAndWWWFromURL // RemoveProtocolAndWWW ... func RemoveProtocolAndWWWL(url string) string { url = RemoveProtocol(url) if strings.HasPrefix(url, \"www.\") { return url[4:] } return url } Nginx return 444 func close(w http.ResponseWriter, r *http.Request) { hijacker, ok := w.(http.Hijacker) if !ok { http.Error(w, \"Server does not support hijacking\", http.StatusInternalServerError) return } conn, _, err := hijacker.Hijack() if err != nil { http.Error(w, err.Error(), http.StatusInternalServerError) return } conn.Close() return } Slow Response func slowSend(w http.ResponseWriter, r *http.Request) { flusher, ok := w.(http.Flusher) if !ok { err := \"Server does not support flusher\" http.Error(w, err, http.StatusInternalServerError) return } w.Header().Set(\"Content-Type\", \"text/plain\") fmt.Fprintln(w, \"Initiating slow response...\") for i := 0; i < 100; i++ { fmt.Fprintf(w, \"Fragmento %d\\n\", i+1) flusher.Flush() time.Sleep(1 * time.Second) } fmt.Fprintln(w, \"Task accomplished\") } func holdConn(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Begin.............\") time.Sleep(60 * time.Second) fmt.Fprintf(w, \"Thats all\") } NUMBERS GetRandomInt import ( \"time\" \"golang.org/x/exp/rand\" ) // RandomInt ... min and max included func RandomInt(min, max int) int { r := rand.New(rand.NewSource(time.Now().UnixNano())) return r.Intn(max-min+1) + min } RoundFloat64 // RoundFloat64 ... rounds float64 into integer func RoundFloat64(num float64) int { if num < 0 { return int(num - 0.5) } return int(num + 0.5) } RoundFloat32 // RoundFloat32 ... rounds float32 into integer func RoundFloat32(num float32) int { if num < 0 { return int(num - 0.5) } return int(num + 0.5) } ReverseSliceInt // ReverseSliceInt ... [0,1,2,3,4,5] ==> [5,4,3,2,1,0] func ReverseSliceInt(reverse []int) []int { for i, j := 0, len(reverse)-1; i < j; i, j = i+1, j-1 { reverse[i], reverse[j] = reverse[j], reverse[i] } return reverse } TransposeMatrixInt // TransposeMatrixInt ... rows > cols or cols > rows // but rows.elements >= cols.elements func TransposeMatrixInt(matrix [][]int) [][]int { if len(matrix) == 0 { return [][]int{} } result := make([][]int, len(matrix[0])) for i := range result { result[i] = make([]int, len(matrix)) } for y, row := range matrix { for x, value := range row { result[x][y] = value } } return result } SliceContainsInt // SliceContainsInt ... returns true/false func SliceContainsInt(num int, slice []int) bool { for _, v := range slice { if v == num { return true } } return false } STRINGS RemoveAllWhitespaces import \"strings\" // RemoveAllWhitespaces ... func RemoveAllWhitespaces(str string) string { return strings.ReplaceAll(str, \" \", \"\") } ReplaceAllWhitespacesByChar import \"strings\" // ReplaceAllWhitespacesByChar ... func ReplaceAllWhitespacesByChar(str, otherChar string) string { return strings.ReplaceAll(str, \" \", otherChar) } ReverseSliceString // ReverseSliceString [\"H\",\"O\",\"L\",\"A\"] ==> [\"A\",\"L\",\"O\",\"H\"] func ReverseSliceString(reverse []string) []string { for i, j := 0, len(reverse)-1; i < j; i, j = i+1, j-1 { reverse[i], reverse[j] = reverse[j], reverse[i] } return reverse } TransposeMatrixString // TransposeMatrixString rows > cols or cols > rows // but rows.elements >= cols.elements func TransposeMatrixString(matrix [][]string) [][]string { if len(matrix) == 0 || len(matrix[0]) == 0 { return [][]string{} } result := make([][]string, len(matrix[0])) for i := range result { result[i] = make([]string, len(matrix)) } for y, row := range matrix { for x, value := range row { result[x][y] = value } } return result } SliceContainsString // SliceContainsString ... returns true/false func SliceContainsString(str string, slice []string) bool { for _, v := range slice { if v == str { return true } } return false } OS execCommand import ( \"fmt\" \"os/exec\" ) func main() { command := []string{\"vnstat\", \"-i\", ifinterface, \"--json\"} ///fmt.Println(\"Command =>\", command) chunk, err := execCommand(command) if err != nil { log.Fatal(err) } //fmt.Println(`CHUNK =>`, string(chunk)) } func execCommand(args []string) (err error) { _, err = exec.Command(args[0], args[1:]...).CombinedOutput() if err != nil { fmt.Println(err) return err } return err } func execCommand(args []string) (c []byte, err error) { c, err = exec.Command(args[0], args[1:]...).CombinedOutput() if err != nil { return nil, err } return c, err } func execCommand(comm string) { _, err := exec.Command(\"sh\", \"-c\", comm).CombinedOutput() if err != nil { log.Fatal(err) } } TIME ParseStringToTime import \"time\" // ParseStringToTime ... func ParseStringToTime(start string) (time.Time, error) { formats := []string{ time.RFC3339, \"2006-01-02T15:04:05\", \"2006-01-02\", } for _, layout := range formats { t, err := time.Parse(layout, start) if err == nil { return t, nil } } fail := fmt.Errorf(\"Fail parsing time: %s\", start) return time.Time{}, fail } OnceADayTask func main() { go onceADayTask(3, 10, 10) select {} } func onceADayTask(h, m, s int) { t := time.Now() n := time.Date( t.Year(), t.Month(), t.Day(), h, m, s, 0, t.Location(), ) if n.Before(t) { n = n.Add(24 * time.Hour) } for { time.Sleep(time.Until(n)) doSomeTask() n = n.Add(24 * time.Hour) } } func doSomeTask() { fmt.Printf(\"Hi: %s\\n\", time.Now().Format(\"03:04:05 PM\")) } SetInterval func main() { ticker := time.NewTicker(1 * time.Second) defer ticker.Stop() done := make(chan bool) go func() { for { select { case <-ticker.C: fmt.Println(\"Ticker every X * time.Second\") case <-done: return } } }() time.Sleep(5 * time.Second) done <- true fmt.Println(\"Ticker stopped. Exiting program.\") } func main() { go interval() select {} } func interval() { ticker := time.NewTicker(2 * time.Second) defer ticker.Stop() for range ticker.C { fmt.Println(\"Hi Every 2 secs\") } } LOGS Custom Logs // main.go /////// Custom Error Log File + Custom Info Log File ///////// iLog := createCustomInfoLogFile2(a.Conf.InfoLogFile) mylog := createCustomErrorLogFile(a.Conf.ErrorsLogFile) defer mylog.Close() ////////////////////////////////////////////////////////////// // ya por donde queramos func createCustomErrorLogFile(f string) *os.File { mylog,err:=os.OpenFile(f,os.O_WRONLY|os.O_CREATE|os.O_APPEND,0644) if err != nil { log.Fatalf(\"ERROR opening Error log file %s\\n\", err) } log.SetOutput(mylog) return mylog } func createCustomInfoLogFile2(f string) *log.Logger { infoLog,err:=os.OpenFile(f,os.O_WRONLY|os.O_CREATE|os.O_APPEND,0644) if err != nil { log.Fatalf(\"ERROR opening Info log file %s\\n\", err) } var iLog *log.Logger iLog = log.New(infoLog, \"INFO :\\t\", log.Ldate|log.Ltime) return iLog } const ( errorLogFile = \"error.log\" infoLogFile = \"info.log\" ) func openLogFile(filename string) (*os.File, error) { return os.OpenFile( filename, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0664, ) } func main() { errorFile, err := openLogFile(errorLogFile) if err != nil { log.Fatalf(\"ERROR opening error log: %s: %v\", errorLogFile, err) } defer errorFile.Close() infoFile, err := openLogFile(infoLogFile) if err != nil { log.Fatalf(\"ERRRO opening info log: %s: %v\", infoLogFile, err) } defer infoFile.Close() eLog := log.New(errorFile, \"ERROR: \", log.Ldate|log.Ltime|log.Lshortfile) iLog := log.New(infoFile, \"INFO: \", log.Ldate|log.Ltime) eLog.Println(\"ERROR\") iLog.Println(\"INFO\") } PrettyPrint Structs func prettyPrintStruct(s interface{}) { result, _ := json.MarshalIndent(s, \"\", \"\\t\") fmt.Print(string(result), \"\\n\") } FLAGS Binarios con versiones package main import ( \"flag\" \"fmt\" \"os\" ) var version = \"0.0.0\" var when = \"undefined\" func main() { checkFlags() fmt.Println(\"Continue...\") } func checkFlags() { versionFlag := flag.Bool(\"v\", false, \"Show current version and exit\") flag.Parse() switch { case *versionFlag: fmt.Printf(\"Version:\\t: %s\\n\", version) fmt.Printf(\"Date :\\t: %s\\n\", when) os.Exit(0) } } /* go build -ldflags=\" -X 'main.version=v0.2.0' -X 'main.when=$(date -u +%F_%T)'\" go build -ldflags=\"-X 'main.when=$(date -u +%F_%T)'\" luego podemos hacer ./binary -v */ Args + Flags + test #go build -ldflags=\"-X 'main.when=$(date -u +%F_%T)'\" DATE=$(shell date -u +%F_%T) LDFLAGS=-ldflags \"-X main.when=$(DATE)\" all: build build: go build $(LDFLAGS) clean: rm binary // main.go var version = \"0.0.1\" var when = \"\" func main() { tasks := checkFlags() fmt.Println(\"USER => \", getUserName()) fmt.Println(\"TASKS=\", tasks) } func checkFlags() []string { if len(os.Args) > 1 && os.Args[1] == \"-v\" { versionFlag := flag.Bool(\"v\", false, \"Show Version\") flag.Parse() if *versionFlag { fmt.Printf(\"Version ->\\t%s\\n\", version) fmt.Printf(\"Date ->\\t%s\\n\", when) os.Exit(0) } } var result []string validFlags := []string{\"vnstat\", \"www\", \"cloud\", \"mysql\", \"rsync\"} for _, arg := range os.Args[1:] { if strings.HasPrefix(arg, \"-\") { flag := strings.TrimPrefix(arg, \"-\") for _, validFlag := range validFlags { if flag == validFlag { if !includes(result, validFlag) { result = append(result, validFlag) } } } } } return result } func getUserName() string { currentUser, err := user.Current() if err != nil { fmt.Println(\"Error:\", err) os.Exit(0) } return currentUser.Username } func includes(slice []string, element string) bool { for _, v := range slice { if v == element { return true } } return false } // main_test.go func TestCheckFlags(t *testing.T) { tests := []struct { name string args []string expected []string }{ {\"Test vnstat flag\", []string{\"cmd\", \"-vnstat\"}, []string{\"vnstat\"}}, {\"Test www flag\", []string{\"cmd\", \"-www\"}, []string{\"www\"}}, {\"Test cloud flag\", []string{\"cmd\", \"-cloud\"}, []string{\"cloud\"}}, {\"Test mysql flag\", []string{\"cmd\", \"-mysql\"}, []string{\"mysql\"}}, {\"Test rsync flag\", []string{\"cmd\", \"-rsync\"}, []string{\"rsync\"}}, {\"Test vnstat and mysql flags\", []string{\"cmd\", \"-vnstat\", \"-mysql\"}, []string{\"vnstat\", \"mysql\"}}, {\"Test no flags\", []string{\"cmd\"}, []string{}}, {\"Test repeated flags\", []string{\"cmd\", \"-www\", \"-www\"}, []string{\"www\"}}, {\"Test unknown flag\", []string{\"cmd\", \"-unknown\"}, []string{}}, {\"Test multiple unknown flags\", []string{\"cmd\", \"-unknown\", \"-anotherunknown\"}, []string{}}, {\"Test multiple unknown and known flags\", []string{\"cmd\", \"-www\", \"-unknown\", \"-rsync\", \"-anotherunk\"}, []string{\"www\", \"rsync\"}}, } for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { os.Args = tt.args flag.CommandLine = flag.NewFlagSet(os.Args[0], flag.ExitOnError) result := checkFlags() if len(result) != len(tt.expected) { t.Errorf(\"expected length %d, got %d\", len(tt.expected), len(result)) } for i, v := range tt.expected { if result[i] != v { t.Errorf(\"expected %s at index %d, got %s\", v, i, result[i]) } } }) } } ORGANIZACION DE CODIGO Compartir structs entre paquetes // main.go package main import ( s \"pruebas/secondarypkg\" \"time\" ) func main() { p := &s.Placeholder{ Name: \"FooBar\", Date: time.Now().String(), } s.Foo(p) } // secondarypkg/otro.go package secondarypkg import \"fmt\" type Placeholder struct { Name string Date string } func Foo(p *Placeholder) { fmt.Println(p.Date, p.Name) } // main.go package main import ( s \"pruebas/paquete\" \"time\" ) func main() { p := s.NewPlaceHolder(\"FooBar\", time.Now().String()) p.Foo() } // secondarypkg/otro.go package secondarypkg import \"fmt\" type Placeholder struct { Name string Date string } func (p *Placeholder) Foo() { fmt.Println(p.Date, p.Name) } func NewPlaceHolder(name string, date string) *Placeholder { return &Placeholder{ Name: name, Date: date, } } Lo mismo usando interfaces // main.go package main import ( s \"pruebas/paquete\" \"time\" ) func main() { p := s.NewPlaceHolder(\"FooBar\", time.Now().String()) p.Foo() } // secondarypkg/otro.go package secondarypkg import \"fmt\" type PlaceHolder interface { Foo() } type placeholder struct { Name string Date string } func (p *placeholder) Foo() { fmt.Println(p.Date, p.Name) } func NewPlaceHolder(name string, date string) PlaceHolder { return &placeholder{ Name: name, Date: date, } }","title":"Golang snippets"},{"location":"golang-snippets/#golang-snippets","text":"","title":"GOLANG SNIPPETS"},{"location":"golang-snippets/#sendreceive-data","text":"","title":"SEND/RECEIVE DATA"},{"location":"golang-snippets/#sendresponse","text":"// SendResponse... func SendResponse(w http.ResponseWriter, d interface{}, s int) { if d == nil { w.WriteHeader(s) return } dataJSON, err := json.MarshalIndent(d, \"\", \" \") if err != nil { log.Printf(\"ERROR Marshaling %v\\n\", err) http.Error(w, \"Internal Server Error\", http.StatusInternalServerError) return } w.Header().Set(\"Content-Type\", \"application/json\") w.WriteHeader(s) _, err = w.Write(dataJSON) if err != nil { log.Printf(\"ERROR writing JSON response: %v\\n\", err) } } // SendtResponseXML ... func SendResponseXML(w http.ResponseWriter, d interface{}, s int) { w.WriteHeader(s) if d == nil { return } w.Header().Set(\"Content-Type\", \"application/xml\") dataXML, err := xml.MarshalIndent(d, \"\", \" \") if err != nil { log.Printf(\"ERROR Marshaling XML: %v\\n\", err) http.Error(w, \"Internal Server Error\", http.StatusInternalServerError) return } _, err = w.Write(dataXML) if err != nil { log.Printf(\"ERROR writing XML response: %v\\n\", err) } }","title":"SendResponse"},{"location":"golang-snippets/#fetch-get","text":"// FetchGET ... func FetchGET(url string, d interface{}) error { client := &http.Client{ Timeout: 10 * time.Second, } // PARAMS IN URL u, err := url.Parse(BASE_URL) if err != nil { err := fmt.Sprintf(\"ERROR Parsing URL => %v\", err) } params := url.Values{ \"key\": {API_KEY}, \"aqi\": {\"no\"}, \"q\": {city}, } u.RawQuery = params.Encode() path := u.String() // HEADERS req, err := http.NewRequest(\"GET\", path, nil) if err != nil { log.Printf(\"ERROR: creating request %s => %v\", path, err) return err } req.Header.Set(\"Authorization\", \"Bearer ACCESS_TOKEN\") req.Header.Set(\"Accept\", \"application/json\") resp, err := client.Do(req) if err != nil { log.Printf(\"ERROR: Request %s => %v\", path, err) return err } ///// // NO HEADERS resp, err := client.Get(path) if err != nil { log.Printf(\"ERROR: Request %s => %v\", path, err) return err } ///// // common defer resp.Body.Close() if resp.StatusCode < 200 || resp.StatusCode >= 300 { err := errors.New(\"HTTP status:\" + http.StatusText(resp.StatusCode)) log.Printf(\"ERROR: %v\", err) return err } decoder := json.NewDecoder(resp.Body) err = decoder.Decode(&d) if err != nil { log.Printf(\"ERROR unnmarshalling => %v\", err) return err } return nil }","title":"Fetch GET"},{"location":"golang-snippets/#dogetconcurrentrequest","text":"func fillDefaultStocks(links []string) { ch := make(chan []byte) for _, link := range links { go doGetConcurrentRequest(link, ch) } for range links { json.Unmarshal(<-ch, &stocks) } } func doGetConcurrentRequest(url string, ch chan<- []byte) { resp, err := http.Get(url) if err != nil { msg := fmt.Sprintf(\"ERROR 1 HTTP Request %s\", err) log.Printf(msg) ch <- []byte(msg) return } if resp.StatusCode != 200 { msg := fmt.Sprintf(\"ERROR 2 Status Code %d\", resp.StatusCode) log.Printf(msg) ch <- []byte(msg) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { msg := fmt.Sprintf(\"ERROR 3 HTTP Request %s\", err) log.Printf(msg) ch <- []byte(msg) return } ch <- body }","title":"DoGetConcurrentRequest"},{"location":"golang-snippets/#fetchpost","text":"// FetchPOST ... func FetchPOST(url string, d interface{}) error { client := &http.Client{ Timeout: 10 * time.Second, } jsonData, err := json.Marshal(d) if err != nil { log.Printf(\"ERROR: Failed to marshal request body => %v\", err) return err } req, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData)) if err != nil { log.Printf(\"ERROR: Failed to create request for %s => %v\", url, err) return err } req.Header.Set(\"Authorization\", \"Bearer ACCESS_TOKEN\") req.Header.Set(\"Accept\", \"application/json\") req.Header.Set(\"Content-Type\", \"application/json\") resp, err := client.Do(req) if err != nil { log.Printf(\"ERROR: Request %s => %v\", url, err) return err } defer resp.Body.Close() if resp.StatusCode < 200 || resp.StatusCode >= 300 { err := errors.New(\"HTTP status: \" + http.StatusText(resp.StatusCode)) log.Printf(\"ERROR: %v\", err) return err } decoder := json.NewDecoder(resp.Body) err = decoder.Decode(&d) if err != nil { log.Printf(\"ERROR unmarshalling => %v\", err) return err } return nil }","title":"fetchPOST"},{"location":"golang-snippets/#fetchpost-with-params","text":"import ( url \"net/url\" ) // FetchPOSTparams ... func FetchPOSTparams(path string, d map[string]string) error { client := &http.Client{ Timeout: 10 * time.Second, } params := url.Values{} for key, value := range d { params.Add(key, value) } /*params := url.Values{ \"test\": {myTest}, \"data\": {myData}, }*/ body := bytes.NewBufferString(params.Encode()) req, err := http.NewRequest(\"POST\", path, body) if err != nil { log.Printf(\"ERROR: Failed to create request for %s => %v\", path, err) return err } req.Header.Set(\"Authorization\", \"Bearer YOUR_ACCESS_TOKEN\") req.Header.Set(\"Accept-Charset\", \"utf-8\") req.Header.Set(\"Content-Type\", \"application/x-www-form-pathencoded\") resp, err := client.Do(req) if err != nil { log.Printf(\"ERROR: Request %s => %v\", path, err) return err } defer resp.Body.Close() if resp.StatusCode < 200 || resp.StatusCode >= 300 { err := errors.New(\"HTTP status: \" + http.StatusText(resp.StatusCode)) log.Printf(\"ERROR: %v\", err) return err } return nil }","title":"fetchPOST with params"},{"location":"golang-snippets/#getinterfacestypes","text":"// GetInterfacesTypes ... func GetInterfacesTypes(f interface{}) { switch vf := f.(type) { case map[string]interface{}: //fmt.Println(\"is a map:\") for k, v := range vf { switch vv := v.(type) { case string: //fmt.Printf(\"%v: is string - %q\\n\", k, vv) case int: //fmt.Printf(\"%v: is int - %q\\n\", k, vv) case float64: //fmt.Printf(\"%v: is float64 - %g\\n\", k, vv) default: fmt.Sprintln(k, v, vv) //fmt.Printf(\"%v: \", k) GetInterfacesTypes(v) } } case []interface{}: //fmt.Println(\"is an array:\") for k, v := range vf { switch vv := v.(type) { case string: //fmt.Printf(\"%v: is string - %q\\n\", k, vv) case int: //fmt.Printf(\"%v: is int - %q\\n\", k, vv) case float64: //fmt.Printf(\"%v: is float64 - %g\\n\", k, vv) if k == 4 { fmt.Println(`ALELUYA==>`, vv) } default: fmt.Sprintln(k, v, vv) //fmt.Printf(\"%v: \", k) GetInterfacesTypes(v) } } } }","title":"GetInterfacesTypes"},{"location":"golang-snippets/#isjson","text":"// IsJSON ... func IsJSON(str string) bool { var js json.RawMessage return json.Unmarshal([]byte(str), &js) == nil }","title":"IsJSON"},{"location":"golang-snippets/#ispointer","text":"func IsPointer(d interface{}) bool { return reflect.TypeOf(d).Kind() == reflect.Ptr }","title":"IsPointer"},{"location":"golang-snippets/#files","text":"","title":"FILES"},{"location":"golang-snippets/#readfile","text":"// ReadFile ... func ReadFile(filePath string) (string, error) { data, err := ioutil.ReadFile(filePath) if err != nil { return \"\", err } return string(data), nil } // ReadFileLineByLine ... func ReadFileLineByLine(filePath string) ([]string, error) { file, err := os.Open(filePath) if err != nil { return nil, err } defer file.Close() var lines []string scanner := bufio.NewScanner(file) for scanner.Scan() { lines = append(lines, scanner.Text()) } if err := scanner.Err(); err != nil { return nil, err } return lines, nil }","title":"ReadFile"},{"location":"golang-snippets/#writefile","text":"// WriteFile ... func WriteFile(filePath string, content string) error { file, err := os.Create(filePath) if err != nil { return err } defer file.Close() _, err = file.WriteString(content) if err != nil { return err } return nil }","title":"WriteFile"},{"location":"golang-snippets/#loadjson-from-file","text":"// LoadJSONFIleDecoder ... use streams func LoadJSONFileDecoder(filePath string, data interface{}) error { file, err := os.Open(filePath) if err != nil { return err } defer file.Close() decoder := json.NewDecoder(file) err = decoder.Decode(data) if err != nil { return err } return nil } // LoadJSONFileMarschall ... loads all func LoadJSONFileMarshall(filePath string, data interface{}) error { file, err := os.Open(filePath) if err != nil { return err } defer file.Close() body, err := ioutil.ReadAll(file) if err != nil { return err } err = json.Unmarshal(body, data) if err != nil { return err } return nil }","title":"LoadJSON from File"},{"location":"golang-snippets/#writejsontofile","text":"// WriteJSONtoFile ... func WriteJSONtoFile(filePath string, d interface{}) error { f, err := os.Create(filePath) if err != nil { return err } defer f.Close() encoder := json.NewEncoder(f) err = encoder.Encode(d) if err != nil { return err } return nil }","title":"WriteJSONtoFile"},{"location":"golang-snippets/#downloadfile","text":"// DownloadFile ... func DownloadFile(filePath string, url string) error { out, err := os.Create(filePath) if err != nil { return err } defer out.Close() resp, err := http.Get(url) if err != nil { return err } defer resp.Body.Close() if resp.StatusCode != http.StatusOK { return fmt.Errorf(\"ERROR Downloading file: %d\", resp.StatusCode) } _, err = io.Copy(out, resp.Body) if err != nil { return err } return nil }","title":"DownloadFile"},{"location":"golang-snippets/#sendfilefromservertoclient","text":"func Index(w http.ResponseWriter, r *http.Request) { url := \"http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png\" timeout := time.Duration(5) * time.Second transport := &http.Transport{ ResponseHeaderTimeout: timeout, Dial: func(network, addr string) (net.Conn, error) { return net.DialTimeout(network, addr, timeout) }, DisableKeepAlives: true, } client := &http.Client{ Transport: transport, } resp, err := client.Get(url) if err != nil { fmt.Println(err) } defer resp.Body.Close() //copy the relevant headers. If you want to preserve the downloaded // file name, extract it with go's url parser. w.Header().Set(\"Content-Disposition\", \"attachment; filename=Wiki.png\") w.Header().Set(\"Content-Type\", r.Header.Get(\"Content-Type\")) w.Header().Set(\"Content-Length\", r.Header.Get(\"Content-Length\")) //stream the body to the client without fully loading it into memory io.Copy(w, resp.Body) } func main() { http.HandleFunc(\"/\", Index) err := http.ListenAndServe(\":8000\", nil) if err != nil { fmt.Println(err) } }","title":"SendFileFromServerToClient"},{"location":"golang-snippets/#parsecsvfile","text":"// file.csv \"AAPL\",\"Apple Inc\",\"4.10%\" \"AMZN\",\"Amazon.com Inc\",\"3.49%\" \"MSFT\",\"Microsoft Corp\",\"3.23%\" \"GOOGL\",\"Alphabet Inc\",\"3.09%\" type stock struct { Symbol string `json:\"symbol\"` } func main() { csvFile, _ := os.Open(\"sp.csv\") reader := csv.NewReader(bufio.NewReader(csvFile)) var stocks []stock for { line, error := reader.Read() if error == io.EOF { break } aux := stock{ Symbol: line[0], } stocks = append(stocks, aux) } //stocksJSON, _ := json.Marshal(stocks) //fmt.Println(string(stocksJSON)) f, err := os.Create(\"spList.json\") if err != nil { panic(err) } defer f.Close() e := json.NewEncoder(f) e.Encode(&stocks) fmt.Println(`END`) } // result [ { \"symbol\": \"AAPL\" }, { \"symbol\": \"AMZN\" }, { \"symbol\": \"MSFT\" }, { \"symbol\": \"GOOGL\" } ]","title":"ParseCSVFile"},{"location":"golang-snippets/#http-server","text":"Lectura Request Handling in Go type Handler interface { ServeHttp( ResponseWriter, *Request ) }","title":"HTTP SERVER"},{"location":"golang-snippets/#wrapper","text":"Es muy sencillo pero luego complica para testearlo mux.HandleFunc(\"/path\", func(w http.ResponseWriter, r *http.Request) { nombreFuncion(w, r, loQueQueramosPasar) })","title":"Wrapper"},{"location":"golang-snippets/#handle-handlefunc","text":"package main import ( \"fmt\" \"net/http\" \"time\" ) func timeHandler1(w http.ResponseWriter, r *http.Request) { tm := time.Now().Format(time.RFC1123) fmt.Println(\"/time/\" + tm) w.Write([]byte(\"The time is: \" + tm)) } func timeHandler2(format string) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){ tm := time.Now().Format(format) fmt.Println(\"/time/\" + tm) w.Write([]byte(\"The time is: \" + tm)) }) } /* lo mismo pero con conversion implicita al tipo HandlerFunc func timeHandler2(format string) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { tm := time.Now().Format(format) fmt.Println(\"/time/\" + tm) w.Write([]byte(\"The time is: \" + tm)) } } */ func hiHandler(w http.ResponseWriter, r *http.Request) { fmt.Println(\"/hello\") w.Write([]byte(\"/hello\")) } func main() { mux := http.NewServeMux() // Creamos un closure con las variables que queremos usar th2 := timeHandler2(time.RFC3339) mux.HandleFunc(\"/time/1\", timeHandler1) mux.Handle(\"/time/2\", th2) mux.HandleFunc(\"/hello\", hiHandler) //http.HandleFunc(\"/time/1\", timeHandler1) //http.Handle(\"/time/2\", th2) //http.HandleFunc(\"/hello\", hiHandler) http.ListenAndServe(\":3000\", mux /*nil*/) }","title":"Handle + HandleFunc"},{"location":"golang-snippets/#handler","text":"type specificHandler struct { Thing string } func(h *specificHandler)ServeHTTP(w http.ResponseWriter,r *http.Request) { w.Write(h.Thing) } func main() { http.Handle(\"/something\", &specificHandler{Thing: \"Hello world!\"}) http.ListenAndServe(\":8080\", nil) } package main import ( \"fmt\" \"net/http\" \"time\" ) type timeHandler struct { format string } func (th *timeHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { tm := time.Now().Format(th.format) fmt.Println(\"/time/\" + tm) w.Write([]byte(\"The time is: \" + tm)) } type hiHandler struct{} func (ti *hiHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { fmt.Println(\"/hello\") w.Write([]byte(\"/hello\")) } func main() { /mux := http.NewServeMux() th1 := &timeHandler{format: time.RFC1123} th2 := &timeHandler{format: time.RFC3339} hi := &hiHandler{} mux.Handle(\"/time/1\", th1) mux.Handle(\"/time/2\", th2) mux.Handle(\"/hello\", hi) //http.Handle(\"/time/1\", th1) //http.Handle(\"/time/2\", th2) //http.Handle(\"/hello\", hi) http.ListenAndServe(\":3000\", /*nil*/ mux) }","title":"Handler"},{"location":"golang-snippets/#ejemplo-completo","text":"package main import ( \"errors\" \"fmt\" \"log\" \"net/http\" \"os\" \"time\" _ \"github.com/go-sql-driver/mysql\" ) type app struct { Config struct { Mode string `json:\"mode\"` Port int `json:\"port\"` Valid string `json:\"valid\"` ErrorsLogFile string `json:\"errorsLogFile\"` HitsLogFile string `json:\"hitsLogFile\"` } `json:\"config\"` Mysql struct { User string `json:\"user\"` Password string `json:\"password\"` DB string `json:\"db\"` Host string `json:\"host\"` Port int `json:\"port\"` TableBW string `json:\"tableBw\"` TableHits string `json:\"tableHits\"` } } type requestError struct { Error error `json:\"-\"` Message string `json:\"message\"` StatusCode int `json:\"-\"` } func (a *app) ServeHTTP(w http.ResponseWriter, r *http.Request) { r.ParseForm() valid := r.Form.Get(\"test\") if valid != a.Config.Valid { http.Error(w, \"Unauthorized\", http.StatusUnauthorized) return } updateBw(w, r, a) } func main() { var a app loadConfigJSON(&a) checkMode(&a) // Custom Log File if a.Config.Mode == \"production\" { var f = a.Config.ErrorsLogFile mylog, err := os.OpenFile(f, os.O_WRONLY|os.O_CREATE|os.O_APPEND , 0644) if err != nil { log.Printf(\"ERROR opening log file %s\\n\", err) } defer mylog.Close() // defer must be in main log.SetOutput(mylog) } mux := http.NewServeMux() mux.Handle(\"/savebw/\", &a) mux.Handle(\"/saveHits/\", checkValid( func(w http.ResponseWriter, r *http.Request) { updateHits(w, r, &a) }, a.Config.Valid)) mux.HandleFunc(\"/get/\", checkValid( func(w http.ResponseWriter, r *http.Request) { getStats(w, r, &a) }, a.Config.Valid)) mux.HandleFunc(\"/\", badRequest) server := http.Server{ Addr: fmt.Sprintf(\"localhost:%d\", a.Config.Port), Handler: mux, ReadTimeout: 10 * time.Second, WriteTimeout: 30 * time.Second, MaxHeaderBytes: 1 << 20, } log.Printf(\"Server up listening %s in mode %s\", server.Addr , a.Config.Mode) server.ListenAndServe() } func checkValid(next http.HandlerFunc, test string) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { r.ParseForm() valid := r.Form.Get(\"test\") if valid != test { http.Error(w, \"Unauthorized\", http.StatusUnauthorized) return } next.ServeHTTP(w, r) } } func badRequest(w http.ResponseWriter, r *http.Request) { re := &requestError{ Error: errors.New(\"Unexistent Endpoint\"), Message: \"Bad Request\", StatusCode: 400, } sendErrorToClient(w, re) }","title":"Ejemplo Completo"},{"location":"golang-snippets/#network","text":"","title":"NETWORK"},{"location":"golang-snippets/#getip","text":"// GetIP ... func GetIP(r *http.Request) string { headers := []string{ \"X-Forwarded-For\", \"X-Real-IP\", \"CF-Connecting-IP\", } for _, header := range headers { ips := r.Header.Get(header) if ips != \"\" { return strings.TrimSpace(strings.Split(ips, \",\")[0]) } } ip := r.RemoteAddr colon := strings.LastIndex(ip, \":\") if colon != -1 { ip = ip[:colon] } return strings.TrimSpace(ip) }","title":"GetIP"},{"location":"golang-snippets/#getrequestorigin","text":"func GetRequestOrigin(r *http.Request) string { switch { case r.Header.Get(\"Host\") != \"\": return r.Header.Get(\"Host\") case r.Header.Get(\"Origin\") != \"\": return r.Header.Get(\"Origin\") case r.Header.Get(\"Referer\") != \"\": return r.Header.Get(\"Referer\") default: return \"?????\" } }","title":"GetRequestOrigin"},{"location":"golang-snippets/#isvalidurl","text":"// IsValidURL ... func IsValidURL(rawurl string) bool { rawurl = strings.TrimSpace(rawurl) parsedURL, err := url.Parse(rawurl) if err != nil { return false } if parsedURL.Scheme != \"http\" && parsedURL.Scheme != \"https\" { return false } if parsedURL.Host == \"\" { return false } return true }","title":"IsValidURL"},{"location":"golang-snippets/#existsurl","text":"// ExistsURL ... func ExistsURL(myUrl string) bool { client := http.Client{ Timeout: 5 * time.Second, CheckRedirect: func(req *http.Request, via []*http.Request) error { return http.ErrUseLastResponse // Dont follow redirections }, } resp, err := client.Head(myUrl) if err != nil { return false } defer resp.Body.Close() return resp.StatusCode >= 200 && resp.StatusCode < 400 }","title":"ExistsURL"},{"location":"golang-snippets/#getlanguage","text":"// GetLanguage ... func GetLanguage(r *http.Request) string { lang := r.Header.Get(\"Accept-Language\") if lang != \"\" { langs := strings.SplitN(lang, \",\", 2) return strings.ToLower(strings.TrimSpace(langs[0])) } return \"en\" }","title":"GetLanguage"},{"location":"golang-snippets/#removeprotocolfromurl","text":"// RemoveProtocol ... func RemoveProtocol(url string) string { if strings.HasPrefix(url, \"https://\") { return url[8:] } if strings.HasPrefix(url, \"http://\") { return url[7:] } return url }","title":"RemoveProtocolFromURL"},{"location":"golang-snippets/#removeprotocolandwwwfromurl","text":"// RemoveProtocolAndWWW ... func RemoveProtocolAndWWWL(url string) string { url = RemoveProtocol(url) if strings.HasPrefix(url, \"www.\") { return url[4:] } return url }","title":"RemoveProtocolAndWWWFromURL"},{"location":"golang-snippets/#nginx-return-444","text":"func close(w http.ResponseWriter, r *http.Request) { hijacker, ok := w.(http.Hijacker) if !ok { http.Error(w, \"Server does not support hijacking\", http.StatusInternalServerError) return } conn, _, err := hijacker.Hijack() if err != nil { http.Error(w, err.Error(), http.StatusInternalServerError) return } conn.Close() return }","title":"Nginx return 444"},{"location":"golang-snippets/#slow-response","text":"func slowSend(w http.ResponseWriter, r *http.Request) { flusher, ok := w.(http.Flusher) if !ok { err := \"Server does not support flusher\" http.Error(w, err, http.StatusInternalServerError) return } w.Header().Set(\"Content-Type\", \"text/plain\") fmt.Fprintln(w, \"Initiating slow response...\") for i := 0; i < 100; i++ { fmt.Fprintf(w, \"Fragmento %d\\n\", i+1) flusher.Flush() time.Sleep(1 * time.Second) } fmt.Fprintln(w, \"Task accomplished\") } func holdConn(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Begin.............\") time.Sleep(60 * time.Second) fmt.Fprintf(w, \"Thats all\") }","title":"Slow Response"},{"location":"golang-snippets/#numbers","text":"","title":"NUMBERS"},{"location":"golang-snippets/#getrandomint","text":"import ( \"time\" \"golang.org/x/exp/rand\" ) // RandomInt ... min and max included func RandomInt(min, max int) int { r := rand.New(rand.NewSource(time.Now().UnixNano())) return r.Intn(max-min+1) + min }","title":"GetRandomInt"},{"location":"golang-snippets/#roundfloat64","text":"// RoundFloat64 ... rounds float64 into integer func RoundFloat64(num float64) int { if num < 0 { return int(num - 0.5) } return int(num + 0.5) }","title":"RoundFloat64"},{"location":"golang-snippets/#roundfloat32","text":"// RoundFloat32 ... rounds float32 into integer func RoundFloat32(num float32) int { if num < 0 { return int(num - 0.5) } return int(num + 0.5) }","title":"RoundFloat32"},{"location":"golang-snippets/#reversesliceint","text":"// ReverseSliceInt ... [0,1,2,3,4,5] ==> [5,4,3,2,1,0] func ReverseSliceInt(reverse []int) []int { for i, j := 0, len(reverse)-1; i < j; i, j = i+1, j-1 { reverse[i], reverse[j] = reverse[j], reverse[i] } return reverse }","title":"ReverseSliceInt"},{"location":"golang-snippets/#transposematrixint","text":"// TransposeMatrixInt ... rows > cols or cols > rows // but rows.elements >= cols.elements func TransposeMatrixInt(matrix [][]int) [][]int { if len(matrix) == 0 { return [][]int{} } result := make([][]int, len(matrix[0])) for i := range result { result[i] = make([]int, len(matrix)) } for y, row := range matrix { for x, value := range row { result[x][y] = value } } return result }","title":"TransposeMatrixInt"},{"location":"golang-snippets/#slicecontainsint","text":"// SliceContainsInt ... returns true/false func SliceContainsInt(num int, slice []int) bool { for _, v := range slice { if v == num { return true } } return false }","title":"SliceContainsInt"},{"location":"golang-snippets/#strings","text":"","title":"STRINGS"},{"location":"golang-snippets/#removeallwhitespaces","text":"import \"strings\" // RemoveAllWhitespaces ... func RemoveAllWhitespaces(str string) string { return strings.ReplaceAll(str, \" \", \"\") }","title":"RemoveAllWhitespaces"},{"location":"golang-snippets/#replaceallwhitespacesbychar","text":"import \"strings\" // ReplaceAllWhitespacesByChar ... func ReplaceAllWhitespacesByChar(str, otherChar string) string { return strings.ReplaceAll(str, \" \", otherChar) }","title":"ReplaceAllWhitespacesByChar"},{"location":"golang-snippets/#reverseslicestring","text":"// ReverseSliceString [\"H\",\"O\",\"L\",\"A\"] ==> [\"A\",\"L\",\"O\",\"H\"] func ReverseSliceString(reverse []string) []string { for i, j := 0, len(reverse)-1; i < j; i, j = i+1, j-1 { reverse[i], reverse[j] = reverse[j], reverse[i] } return reverse }","title":"ReverseSliceString"},{"location":"golang-snippets/#transposematrixstring","text":"// TransposeMatrixString rows > cols or cols > rows // but rows.elements >= cols.elements func TransposeMatrixString(matrix [][]string) [][]string { if len(matrix) == 0 || len(matrix[0]) == 0 { return [][]string{} } result := make([][]string, len(matrix[0])) for i := range result { result[i] = make([]string, len(matrix)) } for y, row := range matrix { for x, value := range row { result[x][y] = value } } return result }","title":"TransposeMatrixString"},{"location":"golang-snippets/#slicecontainsstring","text":"// SliceContainsString ... returns true/false func SliceContainsString(str string, slice []string) bool { for _, v := range slice { if v == str { return true } } return false }","title":"SliceContainsString"},{"location":"golang-snippets/#os","text":"","title":"OS"},{"location":"golang-snippets/#execcommand","text":"import ( \"fmt\" \"os/exec\" ) func main() { command := []string{\"vnstat\", \"-i\", ifinterface, \"--json\"} ///fmt.Println(\"Command =>\", command) chunk, err := execCommand(command) if err != nil { log.Fatal(err) } //fmt.Println(`CHUNK =>`, string(chunk)) } func execCommand(args []string) (err error) { _, err = exec.Command(args[0], args[1:]...).CombinedOutput() if err != nil { fmt.Println(err) return err } return err } func execCommand(args []string) (c []byte, err error) { c, err = exec.Command(args[0], args[1:]...).CombinedOutput() if err != nil { return nil, err } return c, err } func execCommand(comm string) { _, err := exec.Command(\"sh\", \"-c\", comm).CombinedOutput() if err != nil { log.Fatal(err) } }","title":"execCommand"},{"location":"golang-snippets/#time","text":"","title":"TIME"},{"location":"golang-snippets/#parsestringtotime","text":"import \"time\" // ParseStringToTime ... func ParseStringToTime(start string) (time.Time, error) { formats := []string{ time.RFC3339, \"2006-01-02T15:04:05\", \"2006-01-02\", } for _, layout := range formats { t, err := time.Parse(layout, start) if err == nil { return t, nil } } fail := fmt.Errorf(\"Fail parsing time: %s\", start) return time.Time{}, fail }","title":"ParseStringToTime"},{"location":"golang-snippets/#onceadaytask","text":"func main() { go onceADayTask(3, 10, 10) select {} } func onceADayTask(h, m, s int) { t := time.Now() n := time.Date( t.Year(), t.Month(), t.Day(), h, m, s, 0, t.Location(), ) if n.Before(t) { n = n.Add(24 * time.Hour) } for { time.Sleep(time.Until(n)) doSomeTask() n = n.Add(24 * time.Hour) } } func doSomeTask() { fmt.Printf(\"Hi: %s\\n\", time.Now().Format(\"03:04:05 PM\")) }","title":"OnceADayTask"},{"location":"golang-snippets/#setinterval","text":"func main() { ticker := time.NewTicker(1 * time.Second) defer ticker.Stop() done := make(chan bool) go func() { for { select { case <-ticker.C: fmt.Println(\"Ticker every X * time.Second\") case <-done: return } } }() time.Sleep(5 * time.Second) done <- true fmt.Println(\"Ticker stopped. Exiting program.\") } func main() { go interval() select {} } func interval() { ticker := time.NewTicker(2 * time.Second) defer ticker.Stop() for range ticker.C { fmt.Println(\"Hi Every 2 secs\") } }","title":"SetInterval"},{"location":"golang-snippets/#logs","text":"","title":"LOGS"},{"location":"golang-snippets/#custom-logs","text":"// main.go /////// Custom Error Log File + Custom Info Log File ///////// iLog := createCustomInfoLogFile2(a.Conf.InfoLogFile) mylog := createCustomErrorLogFile(a.Conf.ErrorsLogFile) defer mylog.Close() ////////////////////////////////////////////////////////////// // ya por donde queramos func createCustomErrorLogFile(f string) *os.File { mylog,err:=os.OpenFile(f,os.O_WRONLY|os.O_CREATE|os.O_APPEND,0644) if err != nil { log.Fatalf(\"ERROR opening Error log file %s\\n\", err) } log.SetOutput(mylog) return mylog } func createCustomInfoLogFile2(f string) *log.Logger { infoLog,err:=os.OpenFile(f,os.O_WRONLY|os.O_CREATE|os.O_APPEND,0644) if err != nil { log.Fatalf(\"ERROR opening Info log file %s\\n\", err) } var iLog *log.Logger iLog = log.New(infoLog, \"INFO :\\t\", log.Ldate|log.Ltime) return iLog } const ( errorLogFile = \"error.log\" infoLogFile = \"info.log\" ) func openLogFile(filename string) (*os.File, error) { return os.OpenFile( filename, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0664, ) } func main() { errorFile, err := openLogFile(errorLogFile) if err != nil { log.Fatalf(\"ERROR opening error log: %s: %v\", errorLogFile, err) } defer errorFile.Close() infoFile, err := openLogFile(infoLogFile) if err != nil { log.Fatalf(\"ERRRO opening info log: %s: %v\", infoLogFile, err) } defer infoFile.Close() eLog := log.New(errorFile, \"ERROR: \", log.Ldate|log.Ltime|log.Lshortfile) iLog := log.New(infoFile, \"INFO: \", log.Ldate|log.Ltime) eLog.Println(\"ERROR\") iLog.Println(\"INFO\") }","title":"Custom Logs"},{"location":"golang-snippets/#prettyprint-structs","text":"func prettyPrintStruct(s interface{}) { result, _ := json.MarshalIndent(s, \"\", \"\\t\") fmt.Print(string(result), \"\\n\") }","title":"PrettyPrint Structs"},{"location":"golang-snippets/#flags","text":"","title":"FLAGS"},{"location":"golang-snippets/#binarios-con-versiones","text":"package main import ( \"flag\" \"fmt\" \"os\" ) var version = \"0.0.0\" var when = \"undefined\" func main() { checkFlags() fmt.Println(\"Continue...\") } func checkFlags() { versionFlag := flag.Bool(\"v\", false, \"Show current version and exit\") flag.Parse() switch { case *versionFlag: fmt.Printf(\"Version:\\t: %s\\n\", version) fmt.Printf(\"Date :\\t: %s\\n\", when) os.Exit(0) } } /* go build -ldflags=\" -X 'main.version=v0.2.0' -X 'main.when=$(date -u +%F_%T)'\" go build -ldflags=\"-X 'main.when=$(date -u +%F_%T)'\" luego podemos hacer ./binary -v */","title":"Binarios con versiones"},{"location":"golang-snippets/#args-flags-test","text":"#go build -ldflags=\"-X 'main.when=$(date -u +%F_%T)'\" DATE=$(shell date -u +%F_%T) LDFLAGS=-ldflags \"-X main.when=$(DATE)\" all: build build: go build $(LDFLAGS) clean: rm binary // main.go var version = \"0.0.1\" var when = \"\" func main() { tasks := checkFlags() fmt.Println(\"USER => \", getUserName()) fmt.Println(\"TASKS=\", tasks) } func checkFlags() []string { if len(os.Args) > 1 && os.Args[1] == \"-v\" { versionFlag := flag.Bool(\"v\", false, \"Show Version\") flag.Parse() if *versionFlag { fmt.Printf(\"Version ->\\t%s\\n\", version) fmt.Printf(\"Date ->\\t%s\\n\", when) os.Exit(0) } } var result []string validFlags := []string{\"vnstat\", \"www\", \"cloud\", \"mysql\", \"rsync\"} for _, arg := range os.Args[1:] { if strings.HasPrefix(arg, \"-\") { flag := strings.TrimPrefix(arg, \"-\") for _, validFlag := range validFlags { if flag == validFlag { if !includes(result, validFlag) { result = append(result, validFlag) } } } } } return result } func getUserName() string { currentUser, err := user.Current() if err != nil { fmt.Println(\"Error:\", err) os.Exit(0) } return currentUser.Username } func includes(slice []string, element string) bool { for _, v := range slice { if v == element { return true } } return false } // main_test.go func TestCheckFlags(t *testing.T) { tests := []struct { name string args []string expected []string }{ {\"Test vnstat flag\", []string{\"cmd\", \"-vnstat\"}, []string{\"vnstat\"}}, {\"Test www flag\", []string{\"cmd\", \"-www\"}, []string{\"www\"}}, {\"Test cloud flag\", []string{\"cmd\", \"-cloud\"}, []string{\"cloud\"}}, {\"Test mysql flag\", []string{\"cmd\", \"-mysql\"}, []string{\"mysql\"}}, {\"Test rsync flag\", []string{\"cmd\", \"-rsync\"}, []string{\"rsync\"}}, {\"Test vnstat and mysql flags\", []string{\"cmd\", \"-vnstat\", \"-mysql\"}, []string{\"vnstat\", \"mysql\"}}, {\"Test no flags\", []string{\"cmd\"}, []string{}}, {\"Test repeated flags\", []string{\"cmd\", \"-www\", \"-www\"}, []string{\"www\"}}, {\"Test unknown flag\", []string{\"cmd\", \"-unknown\"}, []string{}}, {\"Test multiple unknown flags\", []string{\"cmd\", \"-unknown\", \"-anotherunknown\"}, []string{}}, {\"Test multiple unknown and known flags\", []string{\"cmd\", \"-www\", \"-unknown\", \"-rsync\", \"-anotherunk\"}, []string{\"www\", \"rsync\"}}, } for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { os.Args = tt.args flag.CommandLine = flag.NewFlagSet(os.Args[0], flag.ExitOnError) result := checkFlags() if len(result) != len(tt.expected) { t.Errorf(\"expected length %d, got %d\", len(tt.expected), len(result)) } for i, v := range tt.expected { if result[i] != v { t.Errorf(\"expected %s at index %d, got %s\", v, i, result[i]) } } }) } }","title":"Args + Flags + test"},{"location":"golang-snippets/#organizacion-de-codigo","text":"","title":"ORGANIZACION DE CODIGO"},{"location":"golang-snippets/#compartir-structs-entre-paquetes","text":"// main.go package main import ( s \"pruebas/secondarypkg\" \"time\" ) func main() { p := &s.Placeholder{ Name: \"FooBar\", Date: time.Now().String(), } s.Foo(p) } // secondarypkg/otro.go package secondarypkg import \"fmt\" type Placeholder struct { Name string Date string } func Foo(p *Placeholder) { fmt.Println(p.Date, p.Name) } // main.go package main import ( s \"pruebas/paquete\" \"time\" ) func main() { p := s.NewPlaceHolder(\"FooBar\", time.Now().String()) p.Foo() } // secondarypkg/otro.go package secondarypkg import \"fmt\" type Placeholder struct { Name string Date string } func (p *Placeholder) Foo() { fmt.Println(p.Date, p.Name) } func NewPlaceHolder(name string, date string) *Placeholder { return &Placeholder{ Name: name, Date: date, } } Lo mismo usando interfaces // main.go package main import ( s \"pruebas/paquete\" \"time\" ) func main() { p := s.NewPlaceHolder(\"FooBar\", time.Now().String()) p.Foo() } // secondarypkg/otro.go package secondarypkg import \"fmt\" type PlaceHolder interface { Foo() } type placeholder struct { Name string Date string } func (p *placeholder) Foo() { fmt.Println(p.Date, p.Name) } func NewPlaceHolder(name string, date string) PlaceHolder { return &placeholder{ Name: name, Date: date, } }","title":"Compartir structs entre paquetes"},{"location":"golang/","text":"GOLANG 1.23.X INSTALACION descargarlo de aqui Como root tar -C /usr/local -xzf go-file.tar.gz // como usuario nano $HOME/.bashrc nano $HOME/.profile // a\u00f1adir a cada uno # Golang conf export PATH=$PATH:/usr/local/go/bin export GOPATH=$HOME/path/to/golang/code export PATH=$PATH:$GOPATH/bin // La siguiente linea hay veces que es necesaria export GOBIN=$PATH:$GOPATH/bin Para recargar la configuracion source ~/.profile Carpetas que se crean: bin - Contiene los binarios compilados. Podemos a\u00f1adir la carpeta bin al path del sistema para hacer los binarios compilados ejecutables desde cualquier sitio pkg - contiene los versiones compiladas de las librerias disponibles para que el compilador las pueda enlazar sin tener que recompilarlas src - contiene todo el codigo organizado por rutas de import VS Code Go: Install/Update Tools ENLACES UTILES Go Interfaces Tipos de funcion Modulos Ejemplos - gobyexample Ejemplos - rosettacode GO MODULES en VSCODE GO MODULES en VSCODE Blogs Jacob Martin - Articulos y tutoriales Dave Cheney Alex Edwards Desarrollo Web Writing Web Applications - Tutorial basico de la wiki de golang.org Ejemplos Golang para web - gowebexamples Librerias database/sql go-sql-driver/mysql gorilla-websocket gobwas-ws Utilidades curl-to-Go - Herramienta online que convierte comandos curl en codigo Go JSON-to-Go - Herramienta online que convierte JSON en structs para Go Despliegue y seguridad GO TOOL go <command> [arguments] The commands are: bug start a bug report build compile packages and dependencies clean remove object files and cached files doc show documentation for package or symbol env print Go environment information fix update packages to use new APIs fmt gofmt (reformat) package sources generate generate Go files by processing source get download and install packages and dependencies install compile and install packages and dependencies list list packages or modules mod module maintenance run compile and run Go program test test packages tool run specified go tool version print Go version vet report likely mistakes in packages Use \"go help <command>\" for more information about a command. Additional help topics: buildmode build modes c calling between Go and C cache build and test caching environment environment variables filetype file types go.mod the go.mod file gopath GOPATH environment variable gopath-get legacy GOPATH go get goproxy module proxy protocol importpath import path syntax modules modules, module versions, and more module-get module-aware go get packages package lists and patterns testflag testing flags testfunc testing functions Use \"go help <topic>\" for more information about that topic. install // descarga el codigo y todas sus dependencias. Lo compila e instala el // binario en el directorio $GOPATH/bin go install github.com/ruta/codigo // instalar la ultima version go install ruta/codigo@latest build // -o nombre para el ejecutable go build -o nombreEjecutable program.go // -s -w eliminan el debug y hacen mas peque\u00f1o el binario go build -ldflags \"-s -w\" // para incluir la fecha en el binario go build -ldflags=\"-X 'main.releaseDate=$(date -u +%F_%T)'\" GOOS - sistema operativo para el que compilamos GOARCH - procesador para el que se compila GOOS=darwin GOARCH=386 go build GOOS=linux GOARCH=amd64 go build -o geoip // -o fuerza el nombre del binario al del parametro GOOS= GOARCH= windows 386 windows amd64 linux 386 linux amd64 linux arm linux arm64 android arm darwin 386 darwin amd64 darwin arm darwin arm64 Lista de combinaciones validas de sistema operativo y arquitectura Usando cgo Ejemplo : usar libreria de C bearlibterminal con bindings para Go. Descargar aqui libBearLibTerminal.so (de linuxx64) va a /usr/lib en gopath (mi caso $HOME/.golang/src/bearlibterminal) ponemos BearLibTerminal.go (los bindings a go) y BearLibTerminal.h (las cabeceras de C) Ahora ya podemos importar la libreria y usarla import ( blt \"bearlibterminal\" ) Para Compilar a Windows usr/bin/ld: cannot find -l // o mingw-64, no tengo claro como van todas esos paquetes tan // similares apt-get install gcc-mingw-w64-x86-64 gcc-multilib cd /usr/x86_64-w64-mingw32/lib // poner ahi todas las librerias para windows *.dll y *.lib GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go build main.go OPERADORES Aritmeticos + Suma - Resta * Multiplicacion / Division % Modulo, lo que sobra de la division entera ++ Incremento -- Decremento Asignacion = x = y += x = x + y -= x = x - y *= x = x * y /= x = x / y %= x = x % y Comparacion == igual != no igual > mayor que < menor que >= mayor o igual que <= menor o igual que Logicos && AND || OR ! NOT Punteros & devuelve la direccion de una variable * puntero a una variable VARIABLES Una variable puede contener cualquier tipo, incluso una funcion func main() { accion := func() { fmt.Println(\"Hola\") } accion() } TypeOf(variable) Para averiguar de que tipo es una variable import (\"reflect\") fmt.Println(\"....\", reflect.TypeOf(variable)) Declaracion Declaracion de variables var ( name string age int location string ) var ( name, location string age int ) var name string Inicializacion de variables var ( name string = \"jolav\" age int = 100 ) var ( // inferred typing name = \"jolav\" age = 32 ) var name, location, age = \"jolav\", \"casa\", 100 Sentencia de asignacion := Dentro de una funcion podemos usar := en lugar de var func main() { name, location := \"jolav\", \"casa\" age := 100 } new Pone a cero el valor del tipo y devuelve un puntero a el. x := new(int) make Necesario para slices maps y channels Zero Values Cuando se declaran variables sin un valor explicito se les asigna el valor zero int - 0 float - 0.0 string - \"\" boolean - false pointers - nil map - nil slices - nil array - array listo para usar con sus elementos a zero value que sea functions - nil interfaces - nil channels -nil type package tempconv import \"fmt\" type Celsius float64 type Fahrenheit float64 const ( AbsoluteZeroC Celsius = -273.15 FreezingC Celsius = 0 BoilingC Celsius = 100 ) func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) } func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) } Alcance El alcance es la region del programa donde una variable definida existe Tipos de variables segun donde se declaren: local variables - dentro de una funcion o un bloque. Fuera de ese entorno no existen package variables - fuera de todas las funciones o bloques. Accesibles desde cualquier parte del paquete formal parameters - en la definicion de los parametros de una funcion. Se tratan como locales para esa funcion y tienen preferencia sobre las globales Cuando coinciden dentro de una funcion o bloque una local y una global prevalece la local Conversion de tipos Go no tiene conversion implicita de tipos T(v) - Convierte el valor v al tipo T i := 42 f := float64(i) u := uint(f) strconv Type Assertion func diffArray(s1, s2 interface{}) []string { var aux1 []int fmt.Println(reflect.TypeOf(s1)) var a1, a2 []string if reflect.TypeOf(s1) == reflect.TypeOf(aux1) { // s1,s2 son []int a1, a2 = convertIntToString(s1.([]int), s2.([]int)) // pasamos s1,s2 como []int y usando type assertion } else { a1, a2 = s1.([]string), s2.([]string) } // aqui ya a1,a2 son []string func diffTwoArrays() { diffArray([]int{1, 2, 3, 5}, []int{1, 2, 3, 4, 5})) diffArray([]string{\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"}, []string{\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"}) } Punteros Punteros vs Valor Un puntero contiene la direccion de memoria de un valor Todo en Go se pasa por valor, pero ... Cuando se declara una variable de tipo de referencia se crea un valor llamado header value que contiene un puntero a la estructura de datos subyacente necesaria para segun cada tipo de referencia. Cada tipo de referencia contiene campos unicos para gestionar la estructura de datos subyacente propia. El header value contiene un puntero, por lo tanto puedes pasar una copia de cualquier tipo de referencia y compartir la estructura subyacente intrinsicamente al compartir el puntero. int - valor float - valor string - variable de tipo de referencia, pero funciona como valor boolean - valor arrays - valor slices - variable de tipo de referencia maps - variable de tipo de referencia functions - variable de tipo de referencia interfaces - variable de tipo de referencia channels - variable de tipo de referencia Punteros Por defecto Go pasa los argumentos por valor (crea una copia) Para pasarlos por referencia hay que pasar punteros o usar estructuras de datos que usan valores por referencia como slices y maps. & - para conseguir el puntero de un valor lo ponemos delante de su nombre * - para desreferenciar un puntero y que nos de acceso a su valor Si p es un puntero a x &x --> p = &x p es el puntero de x (contiene la direccion de memoria de x) *p --> *p = x *p es el valor de x i := 42 p := &i // P es un puntero a i fmt.Println(*p) // 42 , lee i a traves del puntero p *p = 21 // establece i a traves del puntero p func main() { v := *getPointer() fmt.Println(\"Value is\", v) // Value is 100 m := getPointer() fmt.Println(\"Memory is\", m) // Memory is 0xc00018c020 } func getPointer() (myPointer *int) { a := 100 return &a } func main() { x := 5 zero(&x) fmt.Println(x) // x is 0 } func zero(x *int) { *x = 0 } func main() { var i int = 7 var p *int p = &i fmt.Println(\"i : \" , i) fmt.Println(\"memory address of i : \", &i) fmt.Println(\"p : \" , p) fmt.Println(\"*p : \" , *p) } [output] i : 7 memory address of i : 0x10328000 p : 0x10328000 *p : 7 new new - coge un tipo como argumento, asigna suficiente memoria para ese tipo de dato y devuelve un puntero que apunta a esa memoria. Luego el GC (garbage collector lo limpia todo) func zero(x *int) { *x = 5 } func main() { x := new(int) zero(x) fmt.Println(*x) // x is 5 } Mutabilidad Solo las constantes son inmutables. Sin embargo como los argumentos se pasan por valor, una funcion que recibe y modifica un argumento no muta el valor original Ejemplo func addOne(x int) { x++ } func main() { x := 0 addOne(x) fmt.Println(x) // x da 0 } // Si usamos punteros func addOne(x *int) { *x++ } func main() { x := 0 addOne(&x) fmt.Println(x) // x da 1 } LECTURA FUNDAMENTAL, stackoverflow pointer vs values type data struct { val int } func myfunc() data { // devuelve una copia del struct return data{val: 1} } func myfunc() *data { // devuelve un puntero al struct creado dentro de la funcion return &data{} } func myfunc(d *data) { // recibe un struct ya existente y sobreescribe su valor d.val = 1 } DATOS BASICOS Numeros Cuando se definen numeros de forma literal se puede usar guion bajo _ para hacerlos mas legibles const segundosEnUnA\u00f1o = 31_557_600 Integers Los enteros son numeros sin decimal int - positivos y negativos uint - unsigned, solo los positivos byte - alias de uint8 (0-255) rune - alias de int32 Numeros de Punto Flotante Son numeros reales (con parte decimal) float32 - conocido como simple precision float64 - conocido como doble precision Numeros Complejos complex64 - parte real float32 + partes imaginarias complex128 - parte real float64 + partes imaginarias Booleanos && - and || - or ! - not Cadenas Estan hechas de bytes (uno por caracter) La diferencia entre comillas simples o dobles es que en estas no pueden contener nuevas lineas y se permiten escapar caracteres especiales len(string) - longitud de la cadena \"Hola mundo\"[1] - acceder a caracteres de la cadena \"Hello, \" + World\" Constantes Se declaran como variables pero con la palabra clave const . No se pueden declarar usando := Solo pueden ser caracteres, string, booleano o valores numericos. const PI = 3.14 Iota iota info Es un identificador usado en declaraciones de constantes para indicar que son autoincrementables. . Se resetea a cero cuando aparece la palabra reservada const const ( // iota is reset to 0 c0 = iota // c0 == 0 c1 = iota // c1 == 1 c2 = iota // c2 == 2 ) ESTRUCTURAS DE CONTROL for for init; condition; post { } // for normal sum := 0 for i := 0; i < 10; i++ { sum = sum + i } for condition { } // for sin declaraciones pre/post que funciona como un while. Podemos // tambien quitar hasta los punto y coma sum := 1 for ; sum < 1000; { for sum < 1000 { sum = sum + sum } for {} // for infinito for { ..codigo } if if answer != 42 { return \"Wrong answer\" } if err := foo(); err != nil { panic(err) } if { // codigo } else { // codigo } switch switch en golang Solo se pueden comparar valores del mismo tipo declaracion default para ejecutarse si todas las demas fallan en la declaracion se puede usar una expression (pej calcular un valor) case 300 - 150: Se puede tener multiples valores un solo caso case 6, 7: fallthroguh se ejecutan todas las declaraciones que cumplen la condicion break sale del switch, por defecto en cada opcion es automatico el break t := time.Now() switch { case t.Hour() < 12: fmt.Println(\"Good morning!\") case t.Hour() < 17: fmt.Println(\"Good afternoon.\") default: fmt.Println(\"Good evening.\") } switch os := runtime.GOOS; os { case \"darwin\": fmt.Println(\"OS X.\") case \"linux\": fmt.Println(\"Linux.\") default: // freebsd, openbsd,plan9, windows... fmt.Printf(\"%s.\\n\", os) } range Para iterar sobre array , slice , string , map o leer de un channel El valor que nos da range es una copia del valor del elemento original y por tanto si se modifica no afecta al original for k,v := range zoo { v.age = 10 // no modifica el original zoo[k].age = 999 // SI modifica el original } slice var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} for key, value := range pow { fmt.Println(\"Posicion\", key, \"valor\", value) } Podemos omitir el index o el value usando _ for i, _ := range pow for _, value := range pow Podemos omitir tambien el valor omitiendo por completo , value var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} for key := range pow { fmt.Println(\"Posicion\", key) } for _, value := range pow { fmt.Println(\"valor\", value) } map El primer parametro no es un entero autoincrementable sino la clave del map for key, value := range cities break Paras la iteracion en cualquier momento continue Omites una iteracion ARRAYS tipo [n]T - es un array de n elementos de tipo T No se pueden redimensionar Se pueden inicializar al declararlos a := [2]string{\"hello\", \"world!\"} a := [...]string{\"hello\", \"world!\"} usando una ellipsis para indicar un numero variable de elementos que en este caso son dos a := [5]int{1: 10, 2: 20} - inicializando solo algunos valores Mostrar arrays fmt.Printf(\"%q\\n\", a) // [\"hello\" \"world!\"] len(array) MultiDimensionales var a [4][2]int array := [4][2]int{{10, 11}, {20, 21}, {30, 31}, {40, 41}} SLICES tipo []T - es un slice de elementos de tipo T Crear un slice : Los slice hay que crearlos antes de usarlos slice literal mySlice := []int{2, 3, 5, 7, 11, 13} make - crea un slice vacio de una longitud y (opcional una capacidad) cities := make([]string, len, cap) Recortando un slice s[a:b] - selecciona elementos desde la pos a (inclusive) hasta b (exclusive) s[:b] - un indice a que no se declara es un 0 implicito s[a:] - un indice b que no se declara es implicito un len(s) A\u00f1adiendo a un slice cities = append(cities, \"San Diego\") cities = append(cities, \"San Diego\", \"Mountain View\") otherCities := []string{\"Santa Monica\", \"Venice\"} cities = append(cities, otherCities...) Copiar un slice copy(destino, origen) Length len(slice) Nil slices Declaracion var z []int - El valor cero de un slice es nil. Un slice nil tiene una longitud de cero Inicializacion z := make([]int, 0) z := []int{} Las tres formas son lo mismo BiDimensional // allocate composed 2d array a := make([][]int, row) for i := range a { a[i] = make([]int, col) } // allocate composed 2d array a := make([][]int, row) e := make([]int, row * col) for i := range a { a[i] = e[i*col:(i+1)*col] } // otra posibilidad func get(r, c int) int { return e[r*cols+c] } MAPS tipo map[a]b - es un map de claves tipo a con valores tipo b Formado por pares clave/valor Crear un map : Los map hay que crearlos antes de usarlos map literal amigos := map[string]int{\"Juan\":50, \"Elena\":21, \"Carlos\":41,} make - creas un nil map vacio amigos := make(map[string]int) Si lo declaramos pero no lo inicializamos, al intentar a\u00f1adir elementos no compilara amigos := map[string]int{} - declarado pero no inicializado Modificando maps m[key] = elem - Insertando o actualizando un valor elem = m[key] - Devuelve el elemento delete(m, key) - Borrando un elemento elem, ok = m[key] - Testea si existe un valor con una clave determinada elements := map[string]map[string]string{ \"H\": map[string]string{ \"name\":\"Hydrogen\", \"state\":\"gas\", }, \"He\": map[string]string{ \"name\":\"Helium\", \"state\":\"gas\", }, \"Li\": map[string]string{ \"name\":\"Lithium\", \"state\":\"solid\", }, } if el, ok := elements[\"Li\"]; ok { fmt.Println(el[\"name\"], el[\"state\"]) } STRUCTS Es una coleccion de campos/propiedades Solo los campos exportados (primera letra mayuscula) son accesibles de fuera del paquete Inicializacion type Circle struct { x, y, r float64 } var c Circle - crea una variable local Circle que pone por defecto los valores a cero (0 para int, 0.0 para float. \"\" para string, nil para punteros) c := new(Circle) - asigna memoria para todos los campos, los inicializa a cero y devuelve un puntero a la struct (*Circle), los punteros se usan mucho en structs paa que las funciones puedan modificar los datos. c := Circle{x: 0, y: 0, r: 5} c := Circle{0, 0, 5} c := &Circle{0, 0, 5} c := Circle{x: 1} c := Circle{} type Circle struct { x, y, r float64 } func main() { fmt.Println(c.x, c.y, c.r) c.x = 10 c.y = 5 } // todo en uno var addCases = []struct { in string want string }{ { \"2011-04-25\", \"2043-01-01T01:46:40\", }, { \"1977-06-13\", \"2009-02-19T01:46:40\", }, } // mas claro type addCases2 []struct { in string want string } ac := addCases2{ { \"2011-04-25\", \"2043-01-01T01:46:40\", }, { \"1977-06-13\", \"2009-02-19T01:46:40\", }, } // para verlos for i, v := range addCases { fmt.Println(i, v.in) } for i, v := range ac { fmt.Println(i, v) } // con nombres fmt.Printf(\"%+v\\n\", struct) // bien formateado s, _ := json.MarshalIndent(g, \"\", \"\\t\") fmt.Print(string(s)) func show() { fmt.Println(t[0].hola) fmt.Println(test2[1].hola2) } type test []struct { hola string } var t = test{ {\"prueba1\"}, {\"prueba2\"}, } var test2 = []struct { hola2 string }{ {\"prueba3\"}, {\"prueba4\"}, } Metodos Un metodo es una funcion con el primer argumento implicito llamado receptor. func (ReceiverType r) func_name (parameters) (results) El receptor (receiver) del metodo esta entre la palabra clave function y el nombre del metodo func (u User) Greeting() string - nos permite llamarla con u.Greeting() Organizacion del codigo package models // list of packages to import // list of constants // list of variables // Main type(s) for the file, // try to keep the lowest amount of structs per file when possible. // List of functions // List of methods Alias Para definir metodos en un tipo que no es tuyo se usan alias import \"strings\" type MyStr string func (s MyStr) Uppercase() string { return strings.ToUpper(string(s)) } func main() { fmt.Println(MyStr(\"test\").Uppercase()) } Usar punteros en los receptores Los metodos se pueden asociar a un nombre o a puntero. Ventajas de usar punteros: evitar copiar el valor con cada llamada al metodo (pasarlo por referencia) para poder modificar el valor que pasamos type User struct { name string email string } func (u user) notify() { fmt.Printf(\"Mandar correo a %s<%s>\\n\", u.name, u.email) } // sin el puntero del receptor el correo no se cambiaria. func (u *user) changeEmail(email string) { u.email = email } SUGERENCIA Despu\u00e9s de declarar un nuevo tipo, trate de responder a esta pregunta antes de declarar m\u00e9todos para el tipo: \u00bf A\u00f1adir o quitar algo de un valor de este tipo necesita crear un nuevo valor o mutar el existente ? - Si la respuesta es crear un nuevo valor, usa receptores de valor en sus m\u00e9todos. - Si la respuesta es mutar el valor, usa receptores de puntero. Esto tambi\u00e9n se aplica a la forma en que los valores de este tipo deben pasarse a otras partes de su programa. Es importante ser consistente. La idea es no centrarse en lo que el m\u00e9todo est\u00e1 haciendo con el valor, sino centrarse en cu\u00e1l es la naturaleza del valor. Composicion type User struct { Id int Name, Location string } type Player struct { User GameId int } Podemos acceder a la Struct de User: a := new(Player) a.User.Name a.Name INTERFACES Explicacion de interfaces Mas Explicacion de interfaces Mas aun sobre interfaces Es un conjunto de metodos Es un tipo de datos package main import \"fmt\" type cat struct { name string } func (c *cat) born() { fmt.Println(c.name, \"is born Miaouu\") } type dog struct { name string } func (d *dog) born() { fmt.Println(d.name, \"is born Wharff\") } type animal interface { born() } func born(a animal) { a.born() } func main() { Jasper := &cat{\"JASPER\"} Lucy := &dog{\"Lucy\"} Max := new(dog) Max.name = \"Max\" Max.born() // call born function born(Jasper) born(Lucy) born(Max) } package main import \"fmt\" type Human struct { name string age int phone string } type Student struct { Human //an anonymous field of type Human school string loan float32 } // A human likes to stay... err... *say* hi func (h *Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } // A human can sing a song, preferrably to a familiar tune! func (h *Human) Sing(lyrics string) { fmt.Println(\"La la, la la la, la la la la la...\", lyrics) } // A Human man likes to guzzle his beer! func (h *Human) Guzzle(beerStein string) { fmt.Println(\"Guzzle Guzzle Guzzle...\", beerStein) } // A Student borrows some money func (s *Student) BorrowMoney(amount float32) { s.loan += amount // (again and again and...) } func Prestar(y YoungChap, amount float32) { y.BorrowMoney(amount) } // INTERFACES type Men interface { SayHi() Sing(lyrics string) Guzzle(beerStein string) } type YoungChap interface { SayHi() Sing(song string) BorrowMoney(amount float32) } func main() { mike := Student{Human{\"Mike\", 25, \"222-222-XXX\"}, \"MIT\", 150.50} mike.BorrowMoney(10) mike.BorrowMoney(10) Prestar(&mike, 100) fmt.Println(\"Debe ..\", mike.loan) } interfaces vacias 1- Todo tiene un type , puedes definir un nuevo type por ejemplo T que tiene tres metodos A , B y C 2- El conjunto de metodos especificos de un type se llama interface type . En nuestro ejemplo T_interface = (A, B, C) 3- Puedes crear un nuevo interface type definiendo los metodos que tiene. Pro ejemplo creo MyInterface = (A) 4- Cuando especificas una variable de tipo interface type le puedes asignar solo los tipos que esten en una interface que sea un superset de tu interface, vamos que todos los metodos de MyInterface deben estar en T_interface Conclusion : Todos los tipos de variables satisfacen la empty interface . Por tanto una funcion que tiene una interface{} como argumento admite cualquier valor sea el que sea. Pero dentro de la funcion el runtime de Go convierte ese valor a un valor interface{} func DoSomething(v interface{}) { // la funcion acepta cualquier valor una vez dentro // v es del tipo interface{} } EL valor de una interfaz son dos word de datos: - una word es un puntero a una tabla de metodos para el valor del type subyacente - la otra word es un puntero a los datos actuales de ese valor FUNCIONES Call Stack func main() { fmt.Println(f1()) } func f1() int { return f2() } func f2() int { return 1 } Argumentos Argumentos que reciben. Las funciones pueden recibir 0 o mas argumentos todos tipados despues del nombre de la variable. func add(x int, y int) int { return x + y } func add(x, y int) int { // int afecta a todos los parametros (x, y) return x + y } // ... funciones que aceptan un numero variable de parametros func add(args ...int) int { total := 0 for _, v := range args { total += v } return total } func main() { // pasamos los parametros que queramos fmt.Println(add(1,2,3)) xs := []int{1,2,3} fmt.Println(add(xs...)) // tambien podemos pasar un slice } Retorno de parametros, puede devolver cualquier numero de ellos return region, continente // devuelve mas de un valor // Si los parametros de retorno estan nombrados vale con solo return func location(name, city string) (region, continent string) { ..codigo return // devuelve region y continent } Closures func generadorPares() func() uint { i := uint(0) return func() (ret uint) { ret = i i = i + 2 return } } func main() { nextPar := generadorPares() fmt.Println(nextPar()) // 0 fmt.Println(nextPar()) // 2 fmt.Println(nextPar()) // 4 } Recursion func factorial(x uint) uint { if x == 0 { return 1 } return x * factorial(x-1) } type function package main import \"fmt\" type test_int func(int) bool // isOdd takes an ints and returns a bool set to true if the // int parameter is odd, or false if not. // isOdd is of type func(int) bool which is what test_int // is declared to be. func isOdd(integer int) bool { if integer%2 == 0 { return false } return true } // Same comment for isEven func isEven(integer int) bool { if integer%2 == 0 { return true } return false } // We could've written: // func filter(slice []int, f func(int) bool) []int func filter(slice []int, f test_int) []int { var result []int for _, value := range slice { if f(value) { result = append(result, value) } } return result } func main(){ slice := []int {1, 2, 3, 4, 5, 7} fmt.Println(\"slice = \", slice) odd := filter(slice, isOdd) fmt.Println(\"Odd elements of slice are: \", odd) even := filter(slice, isEven) fmt.Println(\"Even elements of slice are: \", even) } defer Aplaza la ejecucion de una funcion hasta que termina la funcion en la que se encuentra. Lo tipico es cerrar archivos o desbloquear un mutex(mutual exclusion, para asegurar que solo una goroutine puede acceder a la vez a una variable) func main() { defer fmt.Println(\"world\") fmt.Println(\"hello\") } Se usa para liberar recursos cuando se pueda f, _ := os.Open(filename) defer f.Close() panic, recover panic(\"valor de panic\") - crea un runtime error . recover() - detiene el panic y devuelve el valor que fue pasado con la llamada a panic Un panic generalmente indica un error de programacion o una condicion excepcional de la que no hay forma facil de recuperarse func main() { defer func() { str := recover() fmt.Println(str) }() panic(\"PANIC\") } CONCURRENCIA goroutines go f(x) comienza la ejecucion de una nueva goroutine que es una funcion capaz de ejecutarse concurrentemente con otras funciones. // sin wait, el programa main puede acabar antes de que las goroutines // hagan lo que tengan que hacer func parallelLetFreq() { var wg sync.WaitGroup wg.Add(3) // suma 3 a las goroutines a esperar go count(\"1\", &wg) go count(\"2\", &wg) go count(\"3\", &wg) wg.Wait() // espera a todas las goroutines (3 en este caso) } func count(n int, wg *sync.WaitGroup) { defer wg.Done() // al terminar la funcion terminar goroutine fmt.Println(\"Number --> \", n)) } channels channels - son un conducto a traves del cual puedes recibir y enviar datos con el operador <- ch <- data - Envia data al canal ch data := <-ch - Recibe informacion del canal ch y lo asigna a data ch := make(chan int) - Los canales hay que crearlos antes de usarlos Por defecto los envios y recepciones esperan hasta que el otro lado este listo. Esto permite a las goroutines sincronizarse sin bloqueos especificos o condiciones func sum(a []int, c chan int) { sum := 0 for _, v := range a { sum += v } c <- sum // send sum to c } func main() { a := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(a[:len(a)/2], c) go sum(a[len(a)/2:], c) x, y := <-c, <-c // receive from c fmt.Println(x, y, x+y) } Buffered channels ch := make(chan int, 100) - Ponemos un buffer a los canales indicando su longitud como segundo argumento en el make para inicializar el canal Enviar datos aun canal con buffer se bloquea si el buffer esta lleno Recibir datos de un canal con buffer se bloquea si el buffer esta vacio func main() { c := make(chan int, 2) c <- 1; c <- 2; c <- 3 fmt.Println(<-c); fmt.Println(<-c); fmt.Println(<-c) } // fatal error: all goroutines are asleep - deadlock! Sin embargo el siguiente funcionaria. Al a\u00f1adir el valor extra desde una goroutine no se bloquea el hilo principal pues aunque la goroutine se llama antes que el canal se vacie esta esperara hasta que haya espacio en el canal. func main() { c := make(chan int, 2) c <- 1; c <- 2 c3 := func() { c <- 3 } go c3() fmt.Println(<-c); fmt.Println(<-c); fmt.Println(<-c) } Close close(ch) - Solo un emisor puede cerrar un canal. Enviar a un canal cerrado causa un panic. No son como ficheros que hace falta cerrarlos. Solo se cierran para avisar al receptor de que no llegaran mas datos y para terminar los loop range v, ok := <-ch - Un emisor puede cerrar un canal para indicar que no se enviara nada mas. Los receptores pueden testear cuando un canal ha sido cerrado asignando un segundo parametro a la expresion receptora ok sera falso cuando no haya mas valores que recibir y el canal este cerrado. for i := range ch - recibe valores del canal hasta que se cierre Select Es como switch pero con canales 1A - 89 1B - 103 MODULES go mod init nombreModulo go mod init github.com/jolav/nombreModulo // listar todos los modulos con sus dependencias go list -m all go list all ./... // chechear paquetes con actualizaciones go list -m -u all go list -m -u -json all // actualizar // cambiar manualmenrte el archivo go.mod o // actualiza todas salvo nueva version mayor, go get -v -u ./... // para versiones especificas o nueva version mayor go get -v -u github.com/user/repo@v1.1.1 //despues para asegurar que el el codigo que tenemos en el modulo coincide // con el archivo gp.mod ejecutamos go mod tidy PAQUETES Un programa Go esta hecho con paquetes. Los programas empiezan ejecutando la funcion main dentro del paquete main . Por convencion el nombre del paquete es la ultima palabra de la ruta del import. El paquete \"math/rand\" comprende archivos que comienzan con la sentencia package rand Paquetes que no son de la libreria estandar se importan usando una URL web, pero antes hay que descargarlos con go get go get github.com/creador/ruta/al/paquete import \"github.com/creador/ruta/al/paquete\" Despues de importar un paquete podemos usar los nombres que el exporta (sean variables, metodos o funciones) desde fuera de el paquete. Los nombres exportados en Go comienzan por letra mayuscula package main import ( \"fmt\" \"math\" ) func main() { fmt.Println(math.Pi) fmt.Println(math.pi) } // cannot refer to unexported name math.pi Otras formas de importar paquetes \u00ecmport alias \"fmt\" - Crea un alias de fmt. Ahora es alias.LoQueSea en lugar de fmt.LoQueSea import . \"fmt\" - Permite acceder al contenido directamente sin tener que ir precedido de fmt import _ \"fmt\" - Elimina las advertencia del compilado sobre ese paquete si no se usa y ejecuta si hay las funciones de inicializacion ( func init() {} ), El resto del paquete permanece inaccesible. Crear paquetes Los nombres de paquetes coinciden con la carpeta donde estan. Esto se puede cambiar pero no merece la pena Por convencion el nombre del paquete es la ultima palabra de la ruta del import. ~/src/proyectoX/main.go package main import \"fmt\" import \"proyectoX/utilidades\" // la ruta es a partir de srcs func main() { // llamada a utilidades.Media(xs) } ~/src/proyectoX/utilidades/media.go package utilidades func Media() { // codigo que sea } Desinstalar paquetes go clean -i ruta/paquete... - teoricamente borras los pkg y bin, los src hay que borrarlos manualmente Actualizar go get -u all - Actualiza todos go get -u full/package/name - Actualizar solo ese paquete EJECUCION El programa se inicia por la funcion main del package main Antes se ejecutan las funciones init de ese fichero Los paquetes importados \"_ import \"ruta/paquete\" hacen que el compilador acepte un paquete que no se usa y ademas ejecutan la o las funciones init de ese paquete TESTING El compilador ignora todos los archivos que terminan en _test.go ~/src/proyectoX/utilidades/media_test.go package utilidades import \"testing\" type testpair struct { values []float64 average float64 } var tests = []testpair{ {[]float64{1, 2}, 1.5}, {[]float64{1, 1, 1, 1, 1, 1}, 1}, {[]float64{-1, 1}, 0}, } func TestAverage(t *testing.T) { for _, pair := range tests { v := Media(pair.values) if v != pair.average { t.Error( \"For\", pair.values, \"expected\", pair.average, \"got\", v, ) } } } go test ERRORS Errores en Go Los captura un tipo interfaz predefinido cuyo unico metodo Error devuelve una cadena type error interface { Error() string } Forma estandard de tratar los errores. log.Fatal(err) - manda el error a la terminal y detiene el programa f, err := os.Open(\"filename.ext\") if err != nil { log.Fatal(err) } Podemos aligerar la repeticion un poco usando: func check(e error) { if e != nil { panic(e) } } // y ahora ya solo ponemos check(err) LIBRERIA ESTANDAR FMT import \"fmt\" fmt.Print() - imprime fmt.Println() - imprime y salta de linea fmt.Printf() - imprime con un determinado formato type point struct { x, y int } p := point{1, 2} fmt.Printf(\"%v\\n\", p) // {1 2} // en una struct, `%+v` incluye los nombres de los campos de la struct fmt.Printf(\"%+v\\n\", p) // {x:1 y:2} // Imprimir el tipo de un valor fmt.Printf(\"%T\\n\", p) // main.point // `%d` para enteros standard fmt.Printf(\"%d\\n\", 123) // 123 // Imprime el caracter que corresponde al entero fmt.Printf(\"%c\\n\", 65) // a // Imprime floats fmt.Printf(\"%f\\n\", 78.9) // 78.90000 // Imprime string basicas `%s`. fmt.Printf(\"%s\\n\", \"\\\"string\\\"\") // \"string\" // Imprimir Booleano fmt.Printf(\"%t\\n\", a ==b) // true o false // Imprime un puntero`%p`. fmt.Printf(\"%p\\n\", &p) // 0x42135100 fmt.Sprint() - devuelve el resultado a una string fmt.Sprintln() - devuelve el resultado con salto de linea a una string fmt.Sprintf() - devuelve el resultado con un determinado formato a una string // las Sxxx() son como las normales en vez de imprimir el resultado // lo devuelven como un string s := fmt.Sprintf(\"Hi, my name is %s and I'm %d years old.\", \"Bob\", 23) // s vale \"Hi, my name is Bob and I'm 23 years old.\" fmt.Scan() - para leer una palabra del teclado , almacena sucesivos valores separados por un espacio en sucesivos argumentos. Saltos de linea cuentan como espacio fmt.Scanln() - para leer una palabra del teclado , almacena sucesivos valores separados por un espacio en sucesivos argumentos. Saltos de linea acaban con la lectura de datos verbos - General %v - valor en formato por defecto. En structs %+v a\u00f1ade los nombres de los campos %T - tipo del valor %#v - representacion del tipo del valor con sintaxis de golang - Booleano %t - booleano, devuelve palabra true o false - Integer %b - devuelve en base 2 %c - devuelve caracter representado por el correspondiente codigo Unicode %d - devuelve en base 10 %U - formato Unicode - Floating point f% - notacion decimal sin exponentes e% - notacion decimal con exponentes - Strings y []byte %s - cadenas normales %q - para escapar comillas dobles %x - convierte a base hexadecimal STRINGS import \"strings\" strings.Contains(\"test\", \"es\") = true - Contiene \"test\" a \"es\" strings.Count(\"test\", \"t\") = 2 - Cuantas \"t\" hay en \"test\" strings.HasPrefix(\"test\", \"te\") = true - Comienza \"test\" por \"te\" strings.HasSuffix(\"test\", \"st\") = True - Acaba \"test\" en \"st\" strings.Index(\"test\", \"e\") = 1 - Posicion de string \"e\" dentro de string \"test\", si no esta devuelve -1 strings.Join([]string{\"a\",\"b\"}, \"-\") = \"a-b\" - Coge una lista de strings y las junta en una separadas por otra string (\"-\" en el ejemplo) strings.Repeat(\"a\", 5) = aaaaa - Repite una string n veces strings.Replace(\"aaaa\", \"a\", \"b\", 2) = \"bbaa\" - reemplaza en una cadena una parte por otra n veces (o todas las que se pueda si pasamos -1) strings.Split(\"a-b-c-d-e\", \"-\") = []string{\"a\",\"b\",\"c\",\"d\",\"e\"} - Parte una string en un array de strings usando otra string como separador strings.ToLower(\"test\") = \"TEST \"- convierte la cadena a minusculas strings.ToUpper(\"TEST\") = \"test\" - convierte la cadena a mayusculas strings.Fields(\"cadena que sea) = como split usando espacios en blanco. es equivalente a si usaramos strings.Split(text, \" \") strings.Trim(\"cadena\",\"loquecorta\") = elimina en cadena todas las loquecorta pero solo del comienzo y del final strings.Trim(\" !!! Achtung! Achtung! !!! \", \"! \") == [\"Achtung! Achtung\"] Convertir string en slice of bytes y viceversa arr := []byte(\"test\") str := string([]byte{'t','e','s','t'}) Fuera del paquete string len(\"aquiunacadena\") - nos da la longitud de la string \"cadena\"[3] - nos da el codigo ASCII del caracter de indice 3, \"e\" = 101 string(cadena[n]) - nos da el caracter de la cadena en la posicion n STRCONV import \"strconv\" - conversiones entre numeros y strings s := strconv.Itoa(-42) - int to string i, err := strconv.Atoi(\"-42\") - string to int b, err := strconv.ParseBool(\"true\") - string to boolean f, err := strconv.ParseFloat(\"3.1415\", 64) - string to float i, err := strconv.ParseInt(\"-42\", 10, 64) - string to int u, err := strconv.ParseUint(\"42\", 10, 64) - string to uint s := strconv.FormatBool(true) - boolean value to string s := strconv.FormatFloat(3.1415, 'E', -1, 64) - float to string s := strconv.FormatInt(-42, 16) - int to string s := strconv.FormatUint(42, 16) - uint to string APPEND Trucos con slices func append(slice []T, elements...T) []T. IO import \"io\" Tiene dos interfaces principales Reader soporta leer a a traves del metodo Read Writer soporta escribir a traves del metodo Write IO/IOUTIL import io/ioutil leer y escribir un archivo De esta forma cargamos todo el archivo en memoria de golpe. Mas control a traves de un File struct del paquete OS data := []byte(\"Hello World!\\n\") // write err := ioutil.WriteFile(\"data1\", data, 0644) if err != nil { panic(err) } //read read, err := ioutil.ReadFile(\"data1\") if err != nil { return } fmt.Print(string(read1)) Limitar tama\u00f1o io defer resp.Body.Close() limitReader := &io.LimitedReader{R: resp.Body, N: 2e6} // (2mb) body, err := ioutil.ReadAll(limitReader) OS import \"os\" Saber donde estamos os.Getwd() leer escribir un archivo // Una forma file, err := os.Open(\"test.txt\") if err != nil { // handle the error here } defer file.Close() stat, err := file.Stat() // get the file size if err != nil { return } bs := make([]byte, stat.Size()) // read the file _, err = file.Read(bs) if err != nil { return } str := string(bs) fmt.Println(str) // otra forma data := []byte(\"Hello World!\\n\") // write to file and read from file using the File struct file1, _ := os.Create(\"data2\") defer file1.Close() bytes, _ := file1.Write(data) fmt.Printf(\"Wrote %d bytes to file\\n\", bytes) file2, _ := os.Open(\"data2\") defer file2.Close() read2 := make([]byte, len(data)) bytes, _ = file2.Read(read2) fmt.Printf(\"Read %d bytes from file\\n\", bytes) fmt.Println(string(read2)) crear un archivo func main() { file, err := os.Create(\"test.txt\") if err != nil { return } defer file.Close() file.WriteString(\"test\") } Leer el contenido de un directorio Readdir - coge un argumento que es el numero de entradas que devuelve. Con -1 devuelve todas func main() { dir, err := os.Open(\".\") if err != nil { return } defer dir.Close() fileInfos, err := dir.Readdir(-1) if err != nil { return } for _, fi := range fileInfos { fmt.Println(fi.Name()) } } Walk - para recorrer recursivamente un directorio. Pertenece al paquete path/filepath Command line arguments el primer valor del slice de argumentos es el nombre del comando path incluido argsWithProg := os.Args - slice completo con comando nombre path incluido argsWithoutProg := os.Args[1:] - slice solo de argumentos arg := os.Args[x] - devuelve argumento de posicion X environment variables os.Setenv(\"nombreVariable\", \"valor\") - establece un par clave/valor para una variable de entorno os.Getenv(\"nombreVariable\") - devuelve el valor de esa clave // os.Environ es una lista de todas las variables de entorno for _, e := range os.Environ() { pair := strings.Split(e, \"=\") fmt.Println(pair[0], \"-->\", pair[1]) } PATH/FILEPATH import path/filepath Recorrer recursivamente un directorio Walk func main() { filepath.Walk(\".\", func(path string, info os.FileInfo, err error) error { fmt.Println(path) return nil }) } REGEXP import \"regexp\" // Comprueba si es una cadena patron := \"loquequeremoscomprobar\" match, _ := regexp.MatchString(\"p([a-z]+)ch\", patron) fmt.Println(match) // o compilamos primero una struct optimizada para regexp patron := \"loquequeremoscomprobar\" r, _ := regexp.Compile(\"p([a-z]+)ch\") fmt.Println(r.MatchString(patron)) // Por ejemplo cambiar en la cadena s los guiones bajos por guiones r := regexp.MustCompile(\"_\") s = r.ReplaceAllString(s, `-`) JSON import \"encoding/json\" Golang JSON dataJson, err := json.Marshal(structObject) - Go struct data to JSON data dataJson, err:= json.MarshalIndent(strObj, \"\", \" \") - bien preformateado err := json.Unmarshal(dataJson, &structObject) - JSON data to Go struct data urlDir := \"https://domain.tld/api/que/queramos\" resp, err := http.Get(urlDir) if err != nil { log.Fatal(err) } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { log.Fatal(err) } body = body[5 : len(body)-6] // quitar mis pegatinas de <pre></pre> var s structObject err = json.Unmarshal(body, &s) fmt.Println(s) Convertir json to go struct JSON-to-Go online json:\"-\" ignora ese campo tanto al convertir a json o al convertir desde json json:\"nombreCampo,omitempy - no se incluye el campo al convertir a json si ese campo ya tiene un valor por defecto. Decoder Ademas de Unmarshal/Marshal existe Decoder/Encoder , que se debe usar si los datos vienen de una stream io.Reader como por ejemplo el Body de una http.Request. Si los datos estan en una string o en memoria mejor usar Unmarshal type configuration struct { lo que sea } file, _ := os.Open(\"conf.json\") defer file.Close() decoder := json.NewDecoder(file) conf := configuration{} err := decoder.Decode(&conf) if err != nil { fmt.Println(\"Error:\", err) } fmt.Println(conf) Parsing Interfaces An\u00e1lisis de una interfaz Si realmente no tienes ni idea de c\u00f3mo podr\u00eda ser tu JSON, se puede analizar en una interfaz gen\u00e9rica{}. Una interfaz vac\u00eda es una forma de definir una variable en Go como \"esto podr\u00eda ser cualquier cosa\". En tiempo de ejecuci\u00f3n, Go asignar\u00e1 la memoria adecuada para que se ajuste a lo que decida almacenar en ella. Esto es lo que parece: var parsed interface{} err := json.Unmarshal(data, &parsed) En realidad, el uso de parsed es un poco laborioso, ya que Go no puede usarlo sin saber de qu\u00e9 tipo es. switch parsed.(type) { case int: someGreatIntFunction(parsed.(int)) case map: someMapThing(parsed.(map)) default: panic(\"JSON type not understood\") } Tambi\u00e9n puedes hacer aserciones de tipo similares en l\u00ednea: intVal, ok := parsed.(int) if !ok { panic(\"JSON value must be an int\") } Afortunadamente, sin embargo, es raro no tener idea de lo que puede ser un valor. Si, por ejemplo, sabe que su valor JSON es un objeto, puedes analizarlo en una interfaz de map[string]interface{}. Esto te da la ventaja de poder referirte a claves espec\u00edficas. Un ejemplo: var parsed map[string]interface{} data := []byte(` { \"id\": \"k34rAT4\", \"age\": 24 } `) err := json.Unmarshal(data, &parsed) A continuaci\u00f3n, puedes referirte a las teclas espec\u00edficas sin ning\u00fan problema: parsed[\"id\"] Sin embargo, todav\u00eda tienes interfaces como valor de su map, por lo que debes hacer type assertions para utilizarlas: idString := parsed[\"id\"].(string) Go utiliza estos seis tipos para todos los valores analizados en las interfaces: bool, for JSON booleans float64, for JSON numbers string, for JSON strings []interface{}, for JSON arrays map[string]interface{}, for JSON objects nil for JSON null Es decir, tus n\u00fameros siempre ser\u00e1n de tipo float64, y necesitar\u00e1n ser casteados a int, por ejemplo. Si tiene una necesidad de obtener enteros directamente, puedes usar el m\u00e9todo UseNumber. Lo que te da un objeto que puede convertirse en un float64 o en un int a tu discreci\u00f3n. De manera similar, todos los objetos decodificados en una interfaz ser\u00e1n map[string]interface{}, y necesitar\u00e1n ser mapeados manualmente a cualquier estructura aue quieras usar. Sobre JSON TIME import \"time\" now := time.Now() - nos da la hora actual 2012-10-31 15:50:13.793654 +0000 UTC then := time.Date(2015, 10, 10, 18, 30, 08, 0, time.UTC) - Creamos un struct de tiempo asociado a una localizacion (time zone) then.Year() then.Month() then.Day() then.Hour() then.Minute() then.Second() then.Nanosecond() then.Location() then.Weekday() then.Before(now) then.After(now) then.Equal(now) diff := now.Sub(then) - metodo Sub devuelve duracion del intervalo entre dos tiempos diff.Hours() diff.Minutes() diff.Seconds() diff.Nanoseconds() // avanzar o retroceder en el tiempo then.Add(diff) then.Add(-diff) // sumar tiempo tiempoQueSea.Add( 1000 * time.Hours) String to Time // pasar una fecha a string segun un determinado formato layout := \"2006-01-02 15:04:05\" t, err := time.Parse(layout1, start) if err != nil { fmt.Prinltln(err) } // Hora actual a string con determinado formato horaActual = time.Now().Format(layout) Time to String myString = myTime.String() Timestamp Unix epoch now := time.Now() secs := now.Unix() nanos := now.UnixNano() millis := nanos / 1000000 time.Unix(secs, 0) time.Unix(0, nanos) Intervalos timers - para hacer algo una vez dentro de un tiempo timer1 := time.NewTimer(time.Second * 2) <-timer1.C fmt.Println(\"Timer 1 expired\") timer2 := time.NewTimer(time.Second) go func() { <-timer2.C fmt.Println(\"Timer 2 expired\") }() stop2 := timer2.Stop() if stop2 { fmt.Println(\"Timer 2 stopped\") } // Timer 1 expired // Timer 2 stopped // Timer 2 expired NUNCA APARECE, se cancela antes tickers - para hacer algo repetidamente a intervalos regulares ticker := time.NewTicker(time.Millisecond * 500) go func() { for t := range ticker.C { fmt.Println(\"Tick at\", t) } }() time.Sleep(time.Millisecond * 1600) ticker.Stop() fmt.Println(\"Ticker stopped\") MATH import \"math\" math.Floor(x float64) float64 - devuelve el entero (int) mas grande poisble menor o igual que x math.Pow(x,y float64) float64 - x elevado a y MATH/RAND import \"math/rand\" rand.Intn(10) - genera un numero aleatorio entero >= 0 y < 10 rand.Float64() - genera un numero aleatorio >= 0.0 y < 1.0 (rand.Float64()*5)+5 - genera entre >= 5.0 y < 10.0 s1 := rand.NewSource(time.Now().UnixNano()) - semilla para que no sea siempre igual r1 := rand.New(s1) - para ir cambiando la semilla rand.Seed(time.Now().UTC().UnixNano()) - otra forma de cambiar la semilla para que no siempre sea igual func init() { //fmt.Println(`Init from package tracker`) r = rand.New(rand.NewSource(time.Now().UnixNano())) } var r *rand.Rand func createRandomString() string { const chars = \"abcdefghijklmnopqrstuvwxyz0123456789\" result := \"\" for i := 0; i < lenID; i++ { result += string(chars[r.Intn(len(chars))]) } return result } DATABASE/SQL database/sql FLAG import \"flag\" Para enviar argumentos a un comando Ejemplos SORT import sort Contiene funciones para ordenar datos arbitrario de slices de ints y floats y structs definidas por el usuario s = []strings sort.strings(s) - De menor a mayor alfabeticamente n = []ints || float32 || float64 sort.Ints(n) - Ordena los numeros de menor a mayor sort.IntsAreSorted(n) - booleano que devuelve si estan ordenados custom sorting package main import \"sort\" import \"fmt\" // If I have an array/slice of structs in Go and want to sort them // using the sort package it seems to me that I need to implement // the whole sort interface which contains 3 methods: // https://golang.org/pkg/sort/#Interface type ByLength []string func (s ByLength) Len() int { return len(s) } func (s ByLength) Swap(i, j int) { s[i], s[j] = s[j], s[i] } func (s ByLength) Less(i, j int) bool { return len(s[i]) < len(s[j]) } func main() { fruits := []string{\"peach\", \"banana\", \"kiwi\"} sort.Sort(ByLength(fruits)) fmt.Println(fruits) }","title":"Golang"},{"location":"golang/#golang-123x","text":"","title":"GOLANG 1.23.X"},{"location":"golang/#instalacion","text":"descargarlo de aqui Como root tar -C /usr/local -xzf go-file.tar.gz // como usuario nano $HOME/.bashrc nano $HOME/.profile // a\u00f1adir a cada uno # Golang conf export PATH=$PATH:/usr/local/go/bin export GOPATH=$HOME/path/to/golang/code export PATH=$PATH:$GOPATH/bin // La siguiente linea hay veces que es necesaria export GOBIN=$PATH:$GOPATH/bin Para recargar la configuracion source ~/.profile Carpetas que se crean: bin - Contiene los binarios compilados. Podemos a\u00f1adir la carpeta bin al path del sistema para hacer los binarios compilados ejecutables desde cualquier sitio pkg - contiene los versiones compiladas de las librerias disponibles para que el compilador las pueda enlazar sin tener que recompilarlas src - contiene todo el codigo organizado por rutas de import VS Code Go: Install/Update Tools","title":"INSTALACION"},{"location":"golang/#enlaces-utiles","text":"Go Interfaces Tipos de funcion Modulos Ejemplos - gobyexample Ejemplos - rosettacode GO MODULES en VSCODE GO MODULES en VSCODE Blogs Jacob Martin - Articulos y tutoriales Dave Cheney Alex Edwards Desarrollo Web Writing Web Applications - Tutorial basico de la wiki de golang.org Ejemplos Golang para web - gowebexamples Librerias database/sql go-sql-driver/mysql gorilla-websocket gobwas-ws Utilidades curl-to-Go - Herramienta online que convierte comandos curl en codigo Go JSON-to-Go - Herramienta online que convierte JSON en structs para Go Despliegue y seguridad","title":"ENLACES UTILES"},{"location":"golang/#go-tool","text":"go <command> [arguments] The commands are: bug start a bug report build compile packages and dependencies clean remove object files and cached files doc show documentation for package or symbol env print Go environment information fix update packages to use new APIs fmt gofmt (reformat) package sources generate generate Go files by processing source get download and install packages and dependencies install compile and install packages and dependencies list list packages or modules mod module maintenance run compile and run Go program test test packages tool run specified go tool version print Go version vet report likely mistakes in packages Use \"go help <command>\" for more information about a command. Additional help topics: buildmode build modes c calling between Go and C cache build and test caching environment environment variables filetype file types go.mod the go.mod file gopath GOPATH environment variable gopath-get legacy GOPATH go get goproxy module proxy protocol importpath import path syntax modules modules, module versions, and more module-get module-aware go get packages package lists and patterns testflag testing flags testfunc testing functions Use \"go help <topic>\" for more information about that topic.","title":"GO TOOL"},{"location":"golang/#install","text":"// descarga el codigo y todas sus dependencias. Lo compila e instala el // binario en el directorio $GOPATH/bin go install github.com/ruta/codigo // instalar la ultima version go install ruta/codigo@latest","title":"install"},{"location":"golang/#build","text":"// -o nombre para el ejecutable go build -o nombreEjecutable program.go // -s -w eliminan el debug y hacen mas peque\u00f1o el binario go build -ldflags \"-s -w\" // para incluir la fecha en el binario go build -ldflags=\"-X 'main.releaseDate=$(date -u +%F_%T)'\" GOOS - sistema operativo para el que compilamos GOARCH - procesador para el que se compila GOOS=darwin GOARCH=386 go build GOOS=linux GOARCH=amd64 go build -o geoip // -o fuerza el nombre del binario al del parametro GOOS= GOARCH= windows 386 windows amd64 linux 386 linux amd64 linux arm linux arm64 android arm darwin 386 darwin amd64 darwin arm darwin arm64 Lista de combinaciones validas de sistema operativo y arquitectura Usando cgo Ejemplo : usar libreria de C bearlibterminal con bindings para Go. Descargar aqui libBearLibTerminal.so (de linuxx64) va a /usr/lib en gopath (mi caso $HOME/.golang/src/bearlibterminal) ponemos BearLibTerminal.go (los bindings a go) y BearLibTerminal.h (las cabeceras de C) Ahora ya podemos importar la libreria y usarla import ( blt \"bearlibterminal\" ) Para Compilar a Windows usr/bin/ld: cannot find -l // o mingw-64, no tengo claro como van todas esos paquetes tan // similares apt-get install gcc-mingw-w64-x86-64 gcc-multilib cd /usr/x86_64-w64-mingw32/lib // poner ahi todas las librerias para windows *.dll y *.lib GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go build main.go","title":"build"},{"location":"golang/#operadores","text":"Aritmeticos + Suma - Resta * Multiplicacion / Division % Modulo, lo que sobra de la division entera ++ Incremento -- Decremento Asignacion = x = y += x = x + y -= x = x - y *= x = x * y /= x = x / y %= x = x % y Comparacion == igual != no igual > mayor que < menor que >= mayor o igual que <= menor o igual que Logicos && AND || OR ! NOT Punteros & devuelve la direccion de una variable * puntero a una variable","title":"OPERADORES"},{"location":"golang/#variables","text":"Una variable puede contener cualquier tipo, incluso una funcion func main() { accion := func() { fmt.Println(\"Hola\") } accion() } TypeOf(variable) Para averiguar de que tipo es una variable import (\"reflect\") fmt.Println(\"....\", reflect.TypeOf(variable))","title":"VARIABLES"},{"location":"golang/#declaracion","text":"Declaracion de variables var ( name string age int location string ) var ( name, location string age int ) var name string Inicializacion de variables var ( name string = \"jolav\" age int = 100 ) var ( // inferred typing name = \"jolav\" age = 32 ) var name, location, age = \"jolav\", \"casa\", 100 Sentencia de asignacion := Dentro de una funcion podemos usar := en lugar de var func main() { name, location := \"jolav\", \"casa\" age := 100 } new Pone a cero el valor del tipo y devuelve un puntero a el. x := new(int) make Necesario para slices maps y channels Zero Values Cuando se declaran variables sin un valor explicito se les asigna el valor zero int - 0 float - 0.0 string - \"\" boolean - false pointers - nil map - nil slices - nil array - array listo para usar con sus elementos a zero value que sea functions - nil interfaces - nil channels -nil type package tempconv import \"fmt\" type Celsius float64 type Fahrenheit float64 const ( AbsoluteZeroC Celsius = -273.15 FreezingC Celsius = 0 BoilingC Celsius = 100 ) func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) } func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }","title":"Declaracion"},{"location":"golang/#alcance","text":"El alcance es la region del programa donde una variable definida existe Tipos de variables segun donde se declaren: local variables - dentro de una funcion o un bloque. Fuera de ese entorno no existen package variables - fuera de todas las funciones o bloques. Accesibles desde cualquier parte del paquete formal parameters - en la definicion de los parametros de una funcion. Se tratan como locales para esa funcion y tienen preferencia sobre las globales Cuando coinciden dentro de una funcion o bloque una local y una global prevalece la local","title":"Alcance"},{"location":"golang/#conversion-de-tipos","text":"Go no tiene conversion implicita de tipos T(v) - Convierte el valor v al tipo T i := 42 f := float64(i) u := uint(f) strconv Type Assertion func diffArray(s1, s2 interface{}) []string { var aux1 []int fmt.Println(reflect.TypeOf(s1)) var a1, a2 []string if reflect.TypeOf(s1) == reflect.TypeOf(aux1) { // s1,s2 son []int a1, a2 = convertIntToString(s1.([]int), s2.([]int)) // pasamos s1,s2 como []int y usando type assertion } else { a1, a2 = s1.([]string), s2.([]string) } // aqui ya a1,a2 son []string func diffTwoArrays() { diffArray([]int{1, 2, 3, 5}, []int{1, 2, 3, 4, 5})) diffArray([]string{\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"}, []string{\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"}) }","title":"Conversion de tipos"},{"location":"golang/#punteros","text":"Punteros vs Valor Un puntero contiene la direccion de memoria de un valor Todo en Go se pasa por valor, pero ... Cuando se declara una variable de tipo de referencia se crea un valor llamado header value que contiene un puntero a la estructura de datos subyacente necesaria para segun cada tipo de referencia. Cada tipo de referencia contiene campos unicos para gestionar la estructura de datos subyacente propia. El header value contiene un puntero, por lo tanto puedes pasar una copia de cualquier tipo de referencia y compartir la estructura subyacente intrinsicamente al compartir el puntero. int - valor float - valor string - variable de tipo de referencia, pero funciona como valor boolean - valor arrays - valor slices - variable de tipo de referencia maps - variable de tipo de referencia functions - variable de tipo de referencia interfaces - variable de tipo de referencia channels - variable de tipo de referencia Punteros Por defecto Go pasa los argumentos por valor (crea una copia) Para pasarlos por referencia hay que pasar punteros o usar estructuras de datos que usan valores por referencia como slices y maps. & - para conseguir el puntero de un valor lo ponemos delante de su nombre * - para desreferenciar un puntero y que nos de acceso a su valor Si p es un puntero a x &x --> p = &x p es el puntero de x (contiene la direccion de memoria de x) *p --> *p = x *p es el valor de x i := 42 p := &i // P es un puntero a i fmt.Println(*p) // 42 , lee i a traves del puntero p *p = 21 // establece i a traves del puntero p func main() { v := *getPointer() fmt.Println(\"Value is\", v) // Value is 100 m := getPointer() fmt.Println(\"Memory is\", m) // Memory is 0xc00018c020 } func getPointer() (myPointer *int) { a := 100 return &a } func main() { x := 5 zero(&x) fmt.Println(x) // x is 0 } func zero(x *int) { *x = 0 } func main() { var i int = 7 var p *int p = &i fmt.Println(\"i : \" , i) fmt.Println(\"memory address of i : \", &i) fmt.Println(\"p : \" , p) fmt.Println(\"*p : \" , *p) } [output] i : 7 memory address of i : 0x10328000 p : 0x10328000 *p : 7 new new - coge un tipo como argumento, asigna suficiente memoria para ese tipo de dato y devuelve un puntero que apunta a esa memoria. Luego el GC (garbage collector lo limpia todo) func zero(x *int) { *x = 5 } func main() { x := new(int) zero(x) fmt.Println(*x) // x is 5 } Mutabilidad Solo las constantes son inmutables. Sin embargo como los argumentos se pasan por valor, una funcion que recibe y modifica un argumento no muta el valor original Ejemplo func addOne(x int) { x++ } func main() { x := 0 addOne(x) fmt.Println(x) // x da 0 } // Si usamos punteros func addOne(x *int) { *x++ } func main() { x := 0 addOne(&x) fmt.Println(x) // x da 1 } LECTURA FUNDAMENTAL, stackoverflow pointer vs values type data struct { val int } func myfunc() data { // devuelve una copia del struct return data{val: 1} } func myfunc() *data { // devuelve un puntero al struct creado dentro de la funcion return &data{} } func myfunc(d *data) { // recibe un struct ya existente y sobreescribe su valor d.val = 1 }","title":"Punteros"},{"location":"golang/#datos-basicos","text":"","title":"DATOS BASICOS"},{"location":"golang/#numeros","text":"Cuando se definen numeros de forma literal se puede usar guion bajo _ para hacerlos mas legibles const segundosEnUnA\u00f1o = 31_557_600 Integers Los enteros son numeros sin decimal int - positivos y negativos uint - unsigned, solo los positivos byte - alias de uint8 (0-255) rune - alias de int32 Numeros de Punto Flotante Son numeros reales (con parte decimal) float32 - conocido como simple precision float64 - conocido como doble precision Numeros Complejos complex64 - parte real float32 + partes imaginarias complex128 - parte real float64 + partes imaginarias","title":"Numeros"},{"location":"golang/#booleanos","text":"&& - and || - or ! - not","title":"Booleanos"},{"location":"golang/#cadenas","text":"Estan hechas de bytes (uno por caracter) La diferencia entre comillas simples o dobles es que en estas no pueden contener nuevas lineas y se permiten escapar caracteres especiales len(string) - longitud de la cadena \"Hola mundo\"[1] - acceder a caracteres de la cadena \"Hello, \" + World\"","title":"Cadenas"},{"location":"golang/#constantes","text":"Se declaran como variables pero con la palabra clave const . No se pueden declarar usando := Solo pueden ser caracteres, string, booleano o valores numericos. const PI = 3.14","title":"Constantes"},{"location":"golang/#iota","text":"iota info Es un identificador usado en declaraciones de constantes para indicar que son autoincrementables. . Se resetea a cero cuando aparece la palabra reservada const const ( // iota is reset to 0 c0 = iota // c0 == 0 c1 = iota // c1 == 1 c2 = iota // c2 == 2 )","title":"Iota"},{"location":"golang/#estructuras-de-control","text":"","title":"ESTRUCTURAS DE CONTROL"},{"location":"golang/#for","text":"for init; condition; post { } // for normal sum := 0 for i := 0; i < 10; i++ { sum = sum + i } for condition { } // for sin declaraciones pre/post que funciona como un while. Podemos // tambien quitar hasta los punto y coma sum := 1 for ; sum < 1000; { for sum < 1000 { sum = sum + sum } for {} // for infinito for { ..codigo }","title":"for"},{"location":"golang/#if","text":"if answer != 42 { return \"Wrong answer\" } if err := foo(); err != nil { panic(err) } if { // codigo } else { // codigo }","title":"if"},{"location":"golang/#switch","text":"switch en golang Solo se pueden comparar valores del mismo tipo declaracion default para ejecutarse si todas las demas fallan en la declaracion se puede usar una expression (pej calcular un valor) case 300 - 150: Se puede tener multiples valores un solo caso case 6, 7: fallthroguh se ejecutan todas las declaraciones que cumplen la condicion break sale del switch, por defecto en cada opcion es automatico el break t := time.Now() switch { case t.Hour() < 12: fmt.Println(\"Good morning!\") case t.Hour() < 17: fmt.Println(\"Good afternoon.\") default: fmt.Println(\"Good evening.\") } switch os := runtime.GOOS; os { case \"darwin\": fmt.Println(\"OS X.\") case \"linux\": fmt.Println(\"Linux.\") default: // freebsd, openbsd,plan9, windows... fmt.Printf(\"%s.\\n\", os) }","title":"switch"},{"location":"golang/#range","text":"Para iterar sobre array , slice , string , map o leer de un channel El valor que nos da range es una copia del valor del elemento original y por tanto si se modifica no afecta al original for k,v := range zoo { v.age = 10 // no modifica el original zoo[k].age = 999 // SI modifica el original } slice var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} for key, value := range pow { fmt.Println(\"Posicion\", key, \"valor\", value) } Podemos omitir el index o el value usando _ for i, _ := range pow for _, value := range pow Podemos omitir tambien el valor omitiendo por completo , value var pow = []int{1, 2, 4, 8, 16, 32, 64, 128} for key := range pow { fmt.Println(\"Posicion\", key) } for _, value := range pow { fmt.Println(\"valor\", value) } map El primer parametro no es un entero autoincrementable sino la clave del map for key, value := range cities break Paras la iteracion en cualquier momento continue Omites una iteracion","title":"range"},{"location":"golang/#arrays","text":"tipo [n]T - es un array de n elementos de tipo T No se pueden redimensionar Se pueden inicializar al declararlos a := [2]string{\"hello\", \"world!\"} a := [...]string{\"hello\", \"world!\"} usando una ellipsis para indicar un numero variable de elementos que en este caso son dos a := [5]int{1: 10, 2: 20} - inicializando solo algunos valores Mostrar arrays fmt.Printf(\"%q\\n\", a) // [\"hello\" \"world!\"] len(array) MultiDimensionales var a [4][2]int array := [4][2]int{{10, 11}, {20, 21}, {30, 31}, {40, 41}}","title":"ARRAYS"},{"location":"golang/#slices","text":"tipo []T - es un slice de elementos de tipo T Crear un slice : Los slice hay que crearlos antes de usarlos slice literal mySlice := []int{2, 3, 5, 7, 11, 13} make - crea un slice vacio de una longitud y (opcional una capacidad) cities := make([]string, len, cap) Recortando un slice s[a:b] - selecciona elementos desde la pos a (inclusive) hasta b (exclusive) s[:b] - un indice a que no se declara es un 0 implicito s[a:] - un indice b que no se declara es implicito un len(s) A\u00f1adiendo a un slice cities = append(cities, \"San Diego\") cities = append(cities, \"San Diego\", \"Mountain View\") otherCities := []string{\"Santa Monica\", \"Venice\"} cities = append(cities, otherCities...) Copiar un slice copy(destino, origen) Length len(slice) Nil slices Declaracion var z []int - El valor cero de un slice es nil. Un slice nil tiene una longitud de cero Inicializacion z := make([]int, 0) z := []int{} Las tres formas son lo mismo BiDimensional // allocate composed 2d array a := make([][]int, row) for i := range a { a[i] = make([]int, col) } // allocate composed 2d array a := make([][]int, row) e := make([]int, row * col) for i := range a { a[i] = e[i*col:(i+1)*col] } // otra posibilidad func get(r, c int) int { return e[r*cols+c] }","title":"SLICES"},{"location":"golang/#maps","text":"tipo map[a]b - es un map de claves tipo a con valores tipo b Formado por pares clave/valor Crear un map : Los map hay que crearlos antes de usarlos map literal amigos := map[string]int{\"Juan\":50, \"Elena\":21, \"Carlos\":41,} make - creas un nil map vacio amigos := make(map[string]int) Si lo declaramos pero no lo inicializamos, al intentar a\u00f1adir elementos no compilara amigos := map[string]int{} - declarado pero no inicializado Modificando maps m[key] = elem - Insertando o actualizando un valor elem = m[key] - Devuelve el elemento delete(m, key) - Borrando un elemento elem, ok = m[key] - Testea si existe un valor con una clave determinada elements := map[string]map[string]string{ \"H\": map[string]string{ \"name\":\"Hydrogen\", \"state\":\"gas\", }, \"He\": map[string]string{ \"name\":\"Helium\", \"state\":\"gas\", }, \"Li\": map[string]string{ \"name\":\"Lithium\", \"state\":\"solid\", }, } if el, ok := elements[\"Li\"]; ok { fmt.Println(el[\"name\"], el[\"state\"]) }","title":"MAPS"},{"location":"golang/#structs","text":"Es una coleccion de campos/propiedades Solo los campos exportados (primera letra mayuscula) son accesibles de fuera del paquete","title":"STRUCTS"},{"location":"golang/#inicializacion","text":"type Circle struct { x, y, r float64 } var c Circle - crea una variable local Circle que pone por defecto los valores a cero (0 para int, 0.0 para float. \"\" para string, nil para punteros) c := new(Circle) - asigna memoria para todos los campos, los inicializa a cero y devuelve un puntero a la struct (*Circle), los punteros se usan mucho en structs paa que las funciones puedan modificar los datos. c := Circle{x: 0, y: 0, r: 5} c := Circle{0, 0, 5} c := &Circle{0, 0, 5} c := Circle{x: 1} c := Circle{} type Circle struct { x, y, r float64 } func main() { fmt.Println(c.x, c.y, c.r) c.x = 10 c.y = 5 } // todo en uno var addCases = []struct { in string want string }{ { \"2011-04-25\", \"2043-01-01T01:46:40\", }, { \"1977-06-13\", \"2009-02-19T01:46:40\", }, } // mas claro type addCases2 []struct { in string want string } ac := addCases2{ { \"2011-04-25\", \"2043-01-01T01:46:40\", }, { \"1977-06-13\", \"2009-02-19T01:46:40\", }, } // para verlos for i, v := range addCases { fmt.Println(i, v.in) } for i, v := range ac { fmt.Println(i, v) } // con nombres fmt.Printf(\"%+v\\n\", struct) // bien formateado s, _ := json.MarshalIndent(g, \"\", \"\\t\") fmt.Print(string(s)) func show() { fmt.Println(t[0].hola) fmt.Println(test2[1].hola2) } type test []struct { hola string } var t = test{ {\"prueba1\"}, {\"prueba2\"}, } var test2 = []struct { hola2 string }{ {\"prueba3\"}, {\"prueba4\"}, }","title":"Inicializacion"},{"location":"golang/#metodos","text":"Un metodo es una funcion con el primer argumento implicito llamado receptor. func (ReceiverType r) func_name (parameters) (results) El receptor (receiver) del metodo esta entre la palabra clave function y el nombre del metodo func (u User) Greeting() string - nos permite llamarla con u.Greeting() Organizacion del codigo package models // list of packages to import // list of constants // list of variables // Main type(s) for the file, // try to keep the lowest amount of structs per file when possible. // List of functions // List of methods Alias Para definir metodos en un tipo que no es tuyo se usan alias import \"strings\" type MyStr string func (s MyStr) Uppercase() string { return strings.ToUpper(string(s)) } func main() { fmt.Println(MyStr(\"test\").Uppercase()) } Usar punteros en los receptores Los metodos se pueden asociar a un nombre o a puntero. Ventajas de usar punteros: evitar copiar el valor con cada llamada al metodo (pasarlo por referencia) para poder modificar el valor que pasamos type User struct { name string email string } func (u user) notify() { fmt.Printf(\"Mandar correo a %s<%s>\\n\", u.name, u.email) } // sin el puntero del receptor el correo no se cambiaria. func (u *user) changeEmail(email string) { u.email = email } SUGERENCIA Despu\u00e9s de declarar un nuevo tipo, trate de responder a esta pregunta antes de declarar m\u00e9todos para el tipo: \u00bf A\u00f1adir o quitar algo de un valor de este tipo necesita crear un nuevo valor o mutar el existente ? - Si la respuesta es crear un nuevo valor, usa receptores de valor en sus m\u00e9todos. - Si la respuesta es mutar el valor, usa receptores de puntero. Esto tambi\u00e9n se aplica a la forma en que los valores de este tipo deben pasarse a otras partes de su programa. Es importante ser consistente. La idea es no centrarse en lo que el m\u00e9todo est\u00e1 haciendo con el valor, sino centrarse en cu\u00e1l es la naturaleza del valor.","title":"Metodos"},{"location":"golang/#composicion","text":"type User struct { Id int Name, Location string } type Player struct { User GameId int } Podemos acceder a la Struct de User: a := new(Player) a.User.Name a.Name","title":"Composicion"},{"location":"golang/#interfaces","text":"Explicacion de interfaces Mas Explicacion de interfaces Mas aun sobre interfaces Es un conjunto de metodos Es un tipo de datos package main import \"fmt\" type cat struct { name string } func (c *cat) born() { fmt.Println(c.name, \"is born Miaouu\") } type dog struct { name string } func (d *dog) born() { fmt.Println(d.name, \"is born Wharff\") } type animal interface { born() } func born(a animal) { a.born() } func main() { Jasper := &cat{\"JASPER\"} Lucy := &dog{\"Lucy\"} Max := new(dog) Max.name = \"Max\" Max.born() // call born function born(Jasper) born(Lucy) born(Max) } package main import \"fmt\" type Human struct { name string age int phone string } type Student struct { Human //an anonymous field of type Human school string loan float32 } // A human likes to stay... err... *say* hi func (h *Human) SayHi() { fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone) } // A human can sing a song, preferrably to a familiar tune! func (h *Human) Sing(lyrics string) { fmt.Println(\"La la, la la la, la la la la la...\", lyrics) } // A Human man likes to guzzle his beer! func (h *Human) Guzzle(beerStein string) { fmt.Println(\"Guzzle Guzzle Guzzle...\", beerStein) } // A Student borrows some money func (s *Student) BorrowMoney(amount float32) { s.loan += amount // (again and again and...) } func Prestar(y YoungChap, amount float32) { y.BorrowMoney(amount) } // INTERFACES type Men interface { SayHi() Sing(lyrics string) Guzzle(beerStein string) } type YoungChap interface { SayHi() Sing(song string) BorrowMoney(amount float32) } func main() { mike := Student{Human{\"Mike\", 25, \"222-222-XXX\"}, \"MIT\", 150.50} mike.BorrowMoney(10) mike.BorrowMoney(10) Prestar(&mike, 100) fmt.Println(\"Debe ..\", mike.loan) } interfaces vacias 1- Todo tiene un type , puedes definir un nuevo type por ejemplo T que tiene tres metodos A , B y C 2- El conjunto de metodos especificos de un type se llama interface type . En nuestro ejemplo T_interface = (A, B, C) 3- Puedes crear un nuevo interface type definiendo los metodos que tiene. Pro ejemplo creo MyInterface = (A) 4- Cuando especificas una variable de tipo interface type le puedes asignar solo los tipos que esten en una interface que sea un superset de tu interface, vamos que todos los metodos de MyInterface deben estar en T_interface Conclusion : Todos los tipos de variables satisfacen la empty interface . Por tanto una funcion que tiene una interface{} como argumento admite cualquier valor sea el que sea. Pero dentro de la funcion el runtime de Go convierte ese valor a un valor interface{} func DoSomething(v interface{}) { // la funcion acepta cualquier valor una vez dentro // v es del tipo interface{} } EL valor de una interfaz son dos word de datos: - una word es un puntero a una tabla de metodos para el valor del type subyacente - la otra word es un puntero a los datos actuales de ese valor","title":"INTERFACES"},{"location":"golang/#funciones","text":"Call Stack func main() { fmt.Println(f1()) } func f1() int { return f2() } func f2() int { return 1 } Argumentos Argumentos que reciben. Las funciones pueden recibir 0 o mas argumentos todos tipados despues del nombre de la variable. func add(x int, y int) int { return x + y } func add(x, y int) int { // int afecta a todos los parametros (x, y) return x + y } // ... funciones que aceptan un numero variable de parametros func add(args ...int) int { total := 0 for _, v := range args { total += v } return total } func main() { // pasamos los parametros que queramos fmt.Println(add(1,2,3)) xs := []int{1,2,3} fmt.Println(add(xs...)) // tambien podemos pasar un slice } Retorno de parametros, puede devolver cualquier numero de ellos return region, continente // devuelve mas de un valor // Si los parametros de retorno estan nombrados vale con solo return func location(name, city string) (region, continent string) { ..codigo return // devuelve region y continent } Closures func generadorPares() func() uint { i := uint(0) return func() (ret uint) { ret = i i = i + 2 return } } func main() { nextPar := generadorPares() fmt.Println(nextPar()) // 0 fmt.Println(nextPar()) // 2 fmt.Println(nextPar()) // 4 } Recursion func factorial(x uint) uint { if x == 0 { return 1 } return x * factorial(x-1) }","title":"FUNCIONES"},{"location":"golang/#type-function","text":"package main import \"fmt\" type test_int func(int) bool // isOdd takes an ints and returns a bool set to true if the // int parameter is odd, or false if not. // isOdd is of type func(int) bool which is what test_int // is declared to be. func isOdd(integer int) bool { if integer%2 == 0 { return false } return true } // Same comment for isEven func isEven(integer int) bool { if integer%2 == 0 { return true } return false } // We could've written: // func filter(slice []int, f func(int) bool) []int func filter(slice []int, f test_int) []int { var result []int for _, value := range slice { if f(value) { result = append(result, value) } } return result } func main(){ slice := []int {1, 2, 3, 4, 5, 7} fmt.Println(\"slice = \", slice) odd := filter(slice, isOdd) fmt.Println(\"Odd elements of slice are: \", odd) even := filter(slice, isEven) fmt.Println(\"Even elements of slice are: \", even) }","title":"type function"},{"location":"golang/#defer","text":"Aplaza la ejecucion de una funcion hasta que termina la funcion en la que se encuentra. Lo tipico es cerrar archivos o desbloquear un mutex(mutual exclusion, para asegurar que solo una goroutine puede acceder a la vez a una variable) func main() { defer fmt.Println(\"world\") fmt.Println(\"hello\") } Se usa para liberar recursos cuando se pueda f, _ := os.Open(filename) defer f.Close()","title":"defer"},{"location":"golang/#panic-recover","text":"panic(\"valor de panic\") - crea un runtime error . recover() - detiene el panic y devuelve el valor que fue pasado con la llamada a panic Un panic generalmente indica un error de programacion o una condicion excepcional de la que no hay forma facil de recuperarse func main() { defer func() { str := recover() fmt.Println(str) }() panic(\"PANIC\") }","title":"panic, recover"},{"location":"golang/#concurrencia","text":"","title":"CONCURRENCIA"},{"location":"golang/#goroutines","text":"go f(x) comienza la ejecucion de una nueva goroutine que es una funcion capaz de ejecutarse concurrentemente con otras funciones. // sin wait, el programa main puede acabar antes de que las goroutines // hagan lo que tengan que hacer func parallelLetFreq() { var wg sync.WaitGroup wg.Add(3) // suma 3 a las goroutines a esperar go count(\"1\", &wg) go count(\"2\", &wg) go count(\"3\", &wg) wg.Wait() // espera a todas las goroutines (3 en este caso) } func count(n int, wg *sync.WaitGroup) { defer wg.Done() // al terminar la funcion terminar goroutine fmt.Println(\"Number --> \", n)) }","title":"goroutines"},{"location":"golang/#channels","text":"channels - son un conducto a traves del cual puedes recibir y enviar datos con el operador <- ch <- data - Envia data al canal ch data := <-ch - Recibe informacion del canal ch y lo asigna a data ch := make(chan int) - Los canales hay que crearlos antes de usarlos Por defecto los envios y recepciones esperan hasta que el otro lado este listo. Esto permite a las goroutines sincronizarse sin bloqueos especificos o condiciones func sum(a []int, c chan int) { sum := 0 for _, v := range a { sum += v } c <- sum // send sum to c } func main() { a := []int{7, 2, 8, -9, 4, 0} c := make(chan int) go sum(a[:len(a)/2], c) go sum(a[len(a)/2:], c) x, y := <-c, <-c // receive from c fmt.Println(x, y, x+y) } Buffered channels ch := make(chan int, 100) - Ponemos un buffer a los canales indicando su longitud como segundo argumento en el make para inicializar el canal Enviar datos aun canal con buffer se bloquea si el buffer esta lleno Recibir datos de un canal con buffer se bloquea si el buffer esta vacio func main() { c := make(chan int, 2) c <- 1; c <- 2; c <- 3 fmt.Println(<-c); fmt.Println(<-c); fmt.Println(<-c) } // fatal error: all goroutines are asleep - deadlock! Sin embargo el siguiente funcionaria. Al a\u00f1adir el valor extra desde una goroutine no se bloquea el hilo principal pues aunque la goroutine se llama antes que el canal se vacie esta esperara hasta que haya espacio en el canal. func main() { c := make(chan int, 2) c <- 1; c <- 2 c3 := func() { c <- 3 } go c3() fmt.Println(<-c); fmt.Println(<-c); fmt.Println(<-c) } Close close(ch) - Solo un emisor puede cerrar un canal. Enviar a un canal cerrado causa un panic. No son como ficheros que hace falta cerrarlos. Solo se cierran para avisar al receptor de que no llegaran mas datos y para terminar los loop range v, ok := <-ch - Un emisor puede cerrar un canal para indicar que no se enviara nada mas. Los receptores pueden testear cuando un canal ha sido cerrado asignando un segundo parametro a la expresion receptora ok sera falso cuando no haya mas valores que recibir y el canal este cerrado. for i := range ch - recibe valores del canal hasta que se cierre Select Es como switch pero con canales 1A - 89 1B - 103","title":"channels"},{"location":"golang/#modules","text":"go mod init nombreModulo go mod init github.com/jolav/nombreModulo // listar todos los modulos con sus dependencias go list -m all go list all ./... // chechear paquetes con actualizaciones go list -m -u all go list -m -u -json all // actualizar // cambiar manualmenrte el archivo go.mod o // actualiza todas salvo nueva version mayor, go get -v -u ./... // para versiones especificas o nueva version mayor go get -v -u github.com/user/repo@v1.1.1 //despues para asegurar que el el codigo que tenemos en el modulo coincide // con el archivo gp.mod ejecutamos go mod tidy","title":"MODULES"},{"location":"golang/#paquetes","text":"Un programa Go esta hecho con paquetes. Los programas empiezan ejecutando la funcion main dentro del paquete main . Por convencion el nombre del paquete es la ultima palabra de la ruta del import. El paquete \"math/rand\" comprende archivos que comienzan con la sentencia package rand Paquetes que no son de la libreria estandar se importan usando una URL web, pero antes hay que descargarlos con go get go get github.com/creador/ruta/al/paquete import \"github.com/creador/ruta/al/paquete\" Despues de importar un paquete podemos usar los nombres que el exporta (sean variables, metodos o funciones) desde fuera de el paquete. Los nombres exportados en Go comienzan por letra mayuscula package main import ( \"fmt\" \"math\" ) func main() { fmt.Println(math.Pi) fmt.Println(math.pi) } // cannot refer to unexported name math.pi Otras formas de importar paquetes \u00ecmport alias \"fmt\" - Crea un alias de fmt. Ahora es alias.LoQueSea en lugar de fmt.LoQueSea import . \"fmt\" - Permite acceder al contenido directamente sin tener que ir precedido de fmt import _ \"fmt\" - Elimina las advertencia del compilado sobre ese paquete si no se usa y ejecuta si hay las funciones de inicializacion ( func init() {} ), El resto del paquete permanece inaccesible.","title":"PAQUETES"},{"location":"golang/#crear-paquetes","text":"Los nombres de paquetes coinciden con la carpeta donde estan. Esto se puede cambiar pero no merece la pena Por convencion el nombre del paquete es la ultima palabra de la ruta del import. ~/src/proyectoX/main.go package main import \"fmt\" import \"proyectoX/utilidades\" // la ruta es a partir de srcs func main() { // llamada a utilidades.Media(xs) } ~/src/proyectoX/utilidades/media.go package utilidades func Media() { // codigo que sea }","title":"Crear paquetes"},{"location":"golang/#desinstalar-paquetes","text":"go clean -i ruta/paquete... - teoricamente borras los pkg y bin, los src hay que borrarlos manualmente","title":"Desinstalar paquetes"},{"location":"golang/#actualizar","text":"go get -u all - Actualiza todos go get -u full/package/name - Actualizar solo ese paquete","title":"Actualizar"},{"location":"golang/#ejecucion","text":"El programa se inicia por la funcion main del package main Antes se ejecutan las funciones init de ese fichero Los paquetes importados \"_ import \"ruta/paquete\" hacen que el compilador acepte un paquete que no se usa y ademas ejecutan la o las funciones init de ese paquete","title":"EJECUCION"},{"location":"golang/#testing","text":"El compilador ignora todos los archivos que terminan en _test.go ~/src/proyectoX/utilidades/media_test.go package utilidades import \"testing\" type testpair struct { values []float64 average float64 } var tests = []testpair{ {[]float64{1, 2}, 1.5}, {[]float64{1, 1, 1, 1, 1, 1}, 1}, {[]float64{-1, 1}, 0}, } func TestAverage(t *testing.T) { for _, pair := range tests { v := Media(pair.values) if v != pair.average { t.Error( \"For\", pair.values, \"expected\", pair.average, \"got\", v, ) } } } go test","title":"TESTING"},{"location":"golang/#errors","text":"Errores en Go Los captura un tipo interfaz predefinido cuyo unico metodo Error devuelve una cadena type error interface { Error() string } Forma estandard de tratar los errores. log.Fatal(err) - manda el error a la terminal y detiene el programa f, err := os.Open(\"filename.ext\") if err != nil { log.Fatal(err) } Podemos aligerar la repeticion un poco usando: func check(e error) { if e != nil { panic(e) } } // y ahora ya solo ponemos check(err)","title":"ERRORS"},{"location":"golang/#libreria-estandar","text":"","title":"LIBRERIA ESTANDAR"},{"location":"golang/#fmt","text":"import \"fmt\" fmt.Print() - imprime fmt.Println() - imprime y salta de linea fmt.Printf() - imprime con un determinado formato type point struct { x, y int } p := point{1, 2} fmt.Printf(\"%v\\n\", p) // {1 2} // en una struct, `%+v` incluye los nombres de los campos de la struct fmt.Printf(\"%+v\\n\", p) // {x:1 y:2} // Imprimir el tipo de un valor fmt.Printf(\"%T\\n\", p) // main.point // `%d` para enteros standard fmt.Printf(\"%d\\n\", 123) // 123 // Imprime el caracter que corresponde al entero fmt.Printf(\"%c\\n\", 65) // a // Imprime floats fmt.Printf(\"%f\\n\", 78.9) // 78.90000 // Imprime string basicas `%s`. fmt.Printf(\"%s\\n\", \"\\\"string\\\"\") // \"string\" // Imprimir Booleano fmt.Printf(\"%t\\n\", a ==b) // true o false // Imprime un puntero`%p`. fmt.Printf(\"%p\\n\", &p) // 0x42135100 fmt.Sprint() - devuelve el resultado a una string fmt.Sprintln() - devuelve el resultado con salto de linea a una string fmt.Sprintf() - devuelve el resultado con un determinado formato a una string // las Sxxx() son como las normales en vez de imprimir el resultado // lo devuelven como un string s := fmt.Sprintf(\"Hi, my name is %s and I'm %d years old.\", \"Bob\", 23) // s vale \"Hi, my name is Bob and I'm 23 years old.\" fmt.Scan() - para leer una palabra del teclado , almacena sucesivos valores separados por un espacio en sucesivos argumentos. Saltos de linea cuentan como espacio fmt.Scanln() - para leer una palabra del teclado , almacena sucesivos valores separados por un espacio en sucesivos argumentos. Saltos de linea acaban con la lectura de datos verbos - General %v - valor en formato por defecto. En structs %+v a\u00f1ade los nombres de los campos %T - tipo del valor %#v - representacion del tipo del valor con sintaxis de golang - Booleano %t - booleano, devuelve palabra true o false - Integer %b - devuelve en base 2 %c - devuelve caracter representado por el correspondiente codigo Unicode %d - devuelve en base 10 %U - formato Unicode - Floating point f% - notacion decimal sin exponentes e% - notacion decimal con exponentes - Strings y []byte %s - cadenas normales %q - para escapar comillas dobles %x - convierte a base hexadecimal","title":"FMT"},{"location":"golang/#strings","text":"import \"strings\" strings.Contains(\"test\", \"es\") = true - Contiene \"test\" a \"es\" strings.Count(\"test\", \"t\") = 2 - Cuantas \"t\" hay en \"test\" strings.HasPrefix(\"test\", \"te\") = true - Comienza \"test\" por \"te\" strings.HasSuffix(\"test\", \"st\") = True - Acaba \"test\" en \"st\" strings.Index(\"test\", \"e\") = 1 - Posicion de string \"e\" dentro de string \"test\", si no esta devuelve -1 strings.Join([]string{\"a\",\"b\"}, \"-\") = \"a-b\" - Coge una lista de strings y las junta en una separadas por otra string (\"-\" en el ejemplo) strings.Repeat(\"a\", 5) = aaaaa - Repite una string n veces strings.Replace(\"aaaa\", \"a\", \"b\", 2) = \"bbaa\" - reemplaza en una cadena una parte por otra n veces (o todas las que se pueda si pasamos -1) strings.Split(\"a-b-c-d-e\", \"-\") = []string{\"a\",\"b\",\"c\",\"d\",\"e\"} - Parte una string en un array de strings usando otra string como separador strings.ToLower(\"test\") = \"TEST \"- convierte la cadena a minusculas strings.ToUpper(\"TEST\") = \"test\" - convierte la cadena a mayusculas strings.Fields(\"cadena que sea) = como split usando espacios en blanco. es equivalente a si usaramos strings.Split(text, \" \") strings.Trim(\"cadena\",\"loquecorta\") = elimina en cadena todas las loquecorta pero solo del comienzo y del final strings.Trim(\" !!! Achtung! Achtung! !!! \", \"! \") == [\"Achtung! Achtung\"] Convertir string en slice of bytes y viceversa arr := []byte(\"test\") str := string([]byte{'t','e','s','t'}) Fuera del paquete string len(\"aquiunacadena\") - nos da la longitud de la string \"cadena\"[3] - nos da el codigo ASCII del caracter de indice 3, \"e\" = 101 string(cadena[n]) - nos da el caracter de la cadena en la posicion n","title":"STRINGS"},{"location":"golang/#strconv","text":"import \"strconv\" - conversiones entre numeros y strings s := strconv.Itoa(-42) - int to string i, err := strconv.Atoi(\"-42\") - string to int b, err := strconv.ParseBool(\"true\") - string to boolean f, err := strconv.ParseFloat(\"3.1415\", 64) - string to float i, err := strconv.ParseInt(\"-42\", 10, 64) - string to int u, err := strconv.ParseUint(\"42\", 10, 64) - string to uint s := strconv.FormatBool(true) - boolean value to string s := strconv.FormatFloat(3.1415, 'E', -1, 64) - float to string s := strconv.FormatInt(-42, 16) - int to string s := strconv.FormatUint(42, 16) - uint to string","title":"STRCONV"},{"location":"golang/#append","text":"Trucos con slices func append(slice []T, elements...T) []T.","title":"APPEND"},{"location":"golang/#io","text":"import \"io\" Tiene dos interfaces principales Reader soporta leer a a traves del metodo Read Writer soporta escribir a traves del metodo Write","title":"IO"},{"location":"golang/#ioioutil","text":"import io/ioutil leer y escribir un archivo De esta forma cargamos todo el archivo en memoria de golpe. Mas control a traves de un File struct del paquete OS data := []byte(\"Hello World!\\n\") // write err := ioutil.WriteFile(\"data1\", data, 0644) if err != nil { panic(err) } //read read, err := ioutil.ReadFile(\"data1\") if err != nil { return } fmt.Print(string(read1)) Limitar tama\u00f1o io defer resp.Body.Close() limitReader := &io.LimitedReader{R: resp.Body, N: 2e6} // (2mb) body, err := ioutil.ReadAll(limitReader)","title":"IO/IOUTIL"},{"location":"golang/#os","text":"import \"os\" Saber donde estamos os.Getwd() leer escribir un archivo // Una forma file, err := os.Open(\"test.txt\") if err != nil { // handle the error here } defer file.Close() stat, err := file.Stat() // get the file size if err != nil { return } bs := make([]byte, stat.Size()) // read the file _, err = file.Read(bs) if err != nil { return } str := string(bs) fmt.Println(str) // otra forma data := []byte(\"Hello World!\\n\") // write to file and read from file using the File struct file1, _ := os.Create(\"data2\") defer file1.Close() bytes, _ := file1.Write(data) fmt.Printf(\"Wrote %d bytes to file\\n\", bytes) file2, _ := os.Open(\"data2\") defer file2.Close() read2 := make([]byte, len(data)) bytes, _ = file2.Read(read2) fmt.Printf(\"Read %d bytes from file\\n\", bytes) fmt.Println(string(read2)) crear un archivo func main() { file, err := os.Create(\"test.txt\") if err != nil { return } defer file.Close() file.WriteString(\"test\") } Leer el contenido de un directorio Readdir - coge un argumento que es el numero de entradas que devuelve. Con -1 devuelve todas func main() { dir, err := os.Open(\".\") if err != nil { return } defer dir.Close() fileInfos, err := dir.Readdir(-1) if err != nil { return } for _, fi := range fileInfos { fmt.Println(fi.Name()) } } Walk - para recorrer recursivamente un directorio. Pertenece al paquete path/filepath Command line arguments el primer valor del slice de argumentos es el nombre del comando path incluido argsWithProg := os.Args - slice completo con comando nombre path incluido argsWithoutProg := os.Args[1:] - slice solo de argumentos arg := os.Args[x] - devuelve argumento de posicion X environment variables os.Setenv(\"nombreVariable\", \"valor\") - establece un par clave/valor para una variable de entorno os.Getenv(\"nombreVariable\") - devuelve el valor de esa clave // os.Environ es una lista de todas las variables de entorno for _, e := range os.Environ() { pair := strings.Split(e, \"=\") fmt.Println(pair[0], \"-->\", pair[1]) }","title":"OS"},{"location":"golang/#pathfilepath","text":"import path/filepath Recorrer recursivamente un directorio Walk func main() { filepath.Walk(\".\", func(path string, info os.FileInfo, err error) error { fmt.Println(path) return nil }) }","title":"PATH/FILEPATH"},{"location":"golang/#regexp","text":"import \"regexp\" // Comprueba si es una cadena patron := \"loquequeremoscomprobar\" match, _ := regexp.MatchString(\"p([a-z]+)ch\", patron) fmt.Println(match) // o compilamos primero una struct optimizada para regexp patron := \"loquequeremoscomprobar\" r, _ := regexp.Compile(\"p([a-z]+)ch\") fmt.Println(r.MatchString(patron)) // Por ejemplo cambiar en la cadena s los guiones bajos por guiones r := regexp.MustCompile(\"_\") s = r.ReplaceAllString(s, `-`)","title":"REGEXP"},{"location":"golang/#json","text":"import \"encoding/json\" Golang JSON dataJson, err := json.Marshal(structObject) - Go struct data to JSON data dataJson, err:= json.MarshalIndent(strObj, \"\", \" \") - bien preformateado err := json.Unmarshal(dataJson, &structObject) - JSON data to Go struct data urlDir := \"https://domain.tld/api/que/queramos\" resp, err := http.Get(urlDir) if err != nil { log.Fatal(err) } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { log.Fatal(err) } body = body[5 : len(body)-6] // quitar mis pegatinas de <pre></pre> var s structObject err = json.Unmarshal(body, &s) fmt.Println(s) Convertir json to go struct JSON-to-Go online json:\"-\" ignora ese campo tanto al convertir a json o al convertir desde json json:\"nombreCampo,omitempy - no se incluye el campo al convertir a json si ese campo ya tiene un valor por defecto. Decoder Ademas de Unmarshal/Marshal existe Decoder/Encoder , que se debe usar si los datos vienen de una stream io.Reader como por ejemplo el Body de una http.Request. Si los datos estan en una string o en memoria mejor usar Unmarshal type configuration struct { lo que sea } file, _ := os.Open(\"conf.json\") defer file.Close() decoder := json.NewDecoder(file) conf := configuration{} err := decoder.Decode(&conf) if err != nil { fmt.Println(\"Error:\", err) } fmt.Println(conf) Parsing Interfaces An\u00e1lisis de una interfaz Si realmente no tienes ni idea de c\u00f3mo podr\u00eda ser tu JSON, se puede analizar en una interfaz gen\u00e9rica{}. Una interfaz vac\u00eda es una forma de definir una variable en Go como \"esto podr\u00eda ser cualquier cosa\". En tiempo de ejecuci\u00f3n, Go asignar\u00e1 la memoria adecuada para que se ajuste a lo que decida almacenar en ella. Esto es lo que parece: var parsed interface{} err := json.Unmarshal(data, &parsed) En realidad, el uso de parsed es un poco laborioso, ya que Go no puede usarlo sin saber de qu\u00e9 tipo es. switch parsed.(type) { case int: someGreatIntFunction(parsed.(int)) case map: someMapThing(parsed.(map)) default: panic(\"JSON type not understood\") } Tambi\u00e9n puedes hacer aserciones de tipo similares en l\u00ednea: intVal, ok := parsed.(int) if !ok { panic(\"JSON value must be an int\") } Afortunadamente, sin embargo, es raro no tener idea de lo que puede ser un valor. Si, por ejemplo, sabe que su valor JSON es un objeto, puedes analizarlo en una interfaz de map[string]interface{}. Esto te da la ventaja de poder referirte a claves espec\u00edficas. Un ejemplo: var parsed map[string]interface{} data := []byte(` { \"id\": \"k34rAT4\", \"age\": 24 } `) err := json.Unmarshal(data, &parsed) A continuaci\u00f3n, puedes referirte a las teclas espec\u00edficas sin ning\u00fan problema: parsed[\"id\"] Sin embargo, todav\u00eda tienes interfaces como valor de su map, por lo que debes hacer type assertions para utilizarlas: idString := parsed[\"id\"].(string) Go utiliza estos seis tipos para todos los valores analizados en las interfaces: bool, for JSON booleans float64, for JSON numbers string, for JSON strings []interface{}, for JSON arrays map[string]interface{}, for JSON objects nil for JSON null Es decir, tus n\u00fameros siempre ser\u00e1n de tipo float64, y necesitar\u00e1n ser casteados a int, por ejemplo. Si tiene una necesidad de obtener enteros directamente, puedes usar el m\u00e9todo UseNumber. Lo que te da un objeto que puede convertirse en un float64 o en un int a tu discreci\u00f3n. De manera similar, todos los objetos decodificados en una interfaz ser\u00e1n map[string]interface{}, y necesitar\u00e1n ser mapeados manualmente a cualquier estructura aue quieras usar. Sobre JSON","title":"JSON"},{"location":"golang/#time","text":"import \"time\" now := time.Now() - nos da la hora actual 2012-10-31 15:50:13.793654 +0000 UTC then := time.Date(2015, 10, 10, 18, 30, 08, 0, time.UTC) - Creamos un struct de tiempo asociado a una localizacion (time zone) then.Year() then.Month() then.Day() then.Hour() then.Minute() then.Second() then.Nanosecond() then.Location() then.Weekday() then.Before(now) then.After(now) then.Equal(now) diff := now.Sub(then) - metodo Sub devuelve duracion del intervalo entre dos tiempos diff.Hours() diff.Minutes() diff.Seconds() diff.Nanoseconds() // avanzar o retroceder en el tiempo then.Add(diff) then.Add(-diff) // sumar tiempo tiempoQueSea.Add( 1000 * time.Hours) String to Time // pasar una fecha a string segun un determinado formato layout := \"2006-01-02 15:04:05\" t, err := time.Parse(layout1, start) if err != nil { fmt.Prinltln(err) } // Hora actual a string con determinado formato horaActual = time.Now().Format(layout) Time to String myString = myTime.String() Timestamp Unix epoch now := time.Now() secs := now.Unix() nanos := now.UnixNano() millis := nanos / 1000000 time.Unix(secs, 0) time.Unix(0, nanos) Intervalos timers - para hacer algo una vez dentro de un tiempo timer1 := time.NewTimer(time.Second * 2) <-timer1.C fmt.Println(\"Timer 1 expired\") timer2 := time.NewTimer(time.Second) go func() { <-timer2.C fmt.Println(\"Timer 2 expired\") }() stop2 := timer2.Stop() if stop2 { fmt.Println(\"Timer 2 stopped\") } // Timer 1 expired // Timer 2 stopped // Timer 2 expired NUNCA APARECE, se cancela antes tickers - para hacer algo repetidamente a intervalos regulares ticker := time.NewTicker(time.Millisecond * 500) go func() { for t := range ticker.C { fmt.Println(\"Tick at\", t) } }() time.Sleep(time.Millisecond * 1600) ticker.Stop() fmt.Println(\"Ticker stopped\")","title":"TIME"},{"location":"golang/#math","text":"import \"math\" math.Floor(x float64) float64 - devuelve el entero (int) mas grande poisble menor o igual que x math.Pow(x,y float64) float64 - x elevado a y","title":"MATH"},{"location":"golang/#mathrand","text":"import \"math/rand\" rand.Intn(10) - genera un numero aleatorio entero >= 0 y < 10 rand.Float64() - genera un numero aleatorio >= 0.0 y < 1.0 (rand.Float64()*5)+5 - genera entre >= 5.0 y < 10.0 s1 := rand.NewSource(time.Now().UnixNano()) - semilla para que no sea siempre igual r1 := rand.New(s1) - para ir cambiando la semilla rand.Seed(time.Now().UTC().UnixNano()) - otra forma de cambiar la semilla para que no siempre sea igual func init() { //fmt.Println(`Init from package tracker`) r = rand.New(rand.NewSource(time.Now().UnixNano())) } var r *rand.Rand func createRandomString() string { const chars = \"abcdefghijklmnopqrstuvwxyz0123456789\" result := \"\" for i := 0; i < lenID; i++ { result += string(chars[r.Intn(len(chars))]) } return result }","title":"MATH/RAND"},{"location":"golang/#databasesql","text":"database/sql","title":"DATABASE/SQL"},{"location":"golang/#flag","text":"import \"flag\" Para enviar argumentos a un comando Ejemplos","title":"FLAG"},{"location":"golang/#sort","text":"import sort Contiene funciones para ordenar datos arbitrario de slices de ints y floats y structs definidas por el usuario s = []strings sort.strings(s) - De menor a mayor alfabeticamente n = []ints || float32 || float64 sort.Ints(n) - Ordena los numeros de menor a mayor sort.IntsAreSorted(n) - booleano que devuelve si estan ordenados custom sorting package main import \"sort\" import \"fmt\" // If I have an array/slice of structs in Go and want to sort them // using the sort package it seems to me that I need to implement // the whole sort interface which contains 3 methods: // https://golang.org/pkg/sort/#Interface type ByLength []string func (s ByLength) Len() int { return len(s) } func (s ByLength) Swap(i, j int) { s[i], s[j] = s[j], s[i] } func (s ByLength) Less(i, j int) bool { return len(s[i]) < len(s[j]) } func main() { fruits := []string{\"peach\", \"banana\", \"kiwi\"} sort.Sort(ByLength(fruits)) fmt.Println(fruits) }","title":"SORT"},{"location":"html/","text":"HTML FLEXBOX Buena Guia para usar Flexbox Patrones para Flexbox CSS GRID Aprender aqui gridbyexample.com SNIPPETS Plantilla <!DOCTYPE html> <html lang=\"en\"> <head> <title>Title</title> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <meta name=\"description\" content=\"Content\" /> <!-- Favicon --> <link rel=\"icon\" type=\"image/x-icon\" href=\"/path/to/favicon\"> <!-- CSS --> <link rel=\"stylesheet\" type=\"text/css\" href=\"./index.css\"> <!-- Open Sans --> <link href=\"https://fonts.googleapis.com/css?family=Varela\" rel=\"stylesheet\"> </head> <body> <!-- google-analytics --> <!--#include file=\"/path/to/templates/stats.html\" --> <!-- Footer-- > <!--#include file= \"/path/to/templates/footer.html\" --> <!-- cookie Law --> <!--#include file=\"/path/to/templates/cookieLaw.html\" --> </body> </html> Validacion con HTML5 sin submit <form action=\"./exercise/v1/newUser\" method=\"post\"> <input id=\"newUsername\" type=\"text\" name=\"username\" placeholder=\"username\" required> <input id=\"addUser\" class=\"but\" type=\"submit\" value=\"Send\"> </form> document.getElementById('addUser').addEventListener('click', addNewUser); function addNewUser (ev) { ev.preventDefault(); const f = document.getElementsByTagName('form')[0]; if (f.checkValidity()) { const newUsername = document.getElementById('newUsername').value; const params = `username=${newUsername}`; makeAjaxRequest(addNewUserUrl, 'POST', params, null, function (data) { showUsersList(data); }); } else { alert(document.getElementById('newUsername').validationMessage); } } Disparar evento click con ENTER <div> <input id=\"inputText\" class=\"inputText\" type=\"text\" name=\"input\"> <span id=\"button\" class=\"button\">Button</span> </div> function init () { const button = document.getElementById('button'); button.addEventListener('click', action); const input = document.getElementById('inputText'); input.addEventListener('keyup', testEnter); } function testEnter (ev) { ev.preventDefault(); if (ev.keyCode === 13) { document.getElementById('button').click(); } } HTML5 ESTRUCTURA <!DOCTYPE html> <html> <head> <title> Titulo </title> </head> <body> </body> </html> Block Elements Elementos que siempre empiezan en una nueva linea Inline Elements Elementos que aparecen a continuacion en la misma linea del anterior Caracteres de escape TEXTO white space collapsing : Dos o mas espacios o lineas juntos el navegador solo mostrara uno Elementos para estructurar la pagina <p> paragraph </p> <h1..6> headings </h1..6> <b> bold </b> <i> italic </i> <sup> superscript </sup> <sub> subscript </sub> <br /> line breaks <hr /> horizontal rules Elementos semanticos <strong> contenido importante </strong> <em> enfasis </em> <blockquote> citar parrafos </blockquote> <q> citas cortas dentro de un parrafo </q> <abbr> abreviaturas o acronimos </abbr> <cite> referencia a algo (libro, peli ...) </cite> <dfn> la primera explicacion de un termino en el documento </dfn> <address> para contener detalles de contacto de alguien </address> <ins> mostrar contenido que ha sido insertado en el documento </ins> <del> mostrar contenido que ha sido borrado en el documento </del> <s> indicar que algo ya no es relevante</s> LISTAS Ordenadas <ol> <li>primero</li> <li>segundo</li> <li>tercero</li> </ol> primero segundo tercero Desordenadas <ul> <li>primero</li> <li>segundo</li> <li>tercero</li> </ul> primero segundo tercero Listas de deficiones <dl> <dt> concepto 1</dt> <dd> definicion de concepto 1</dd> <dt> concepto 2</dt> <dd> definicion de concepto 2</dd> <dt> concepto 3</dt> <dd> definicion de concepto 3</dd> </dl> concepto 1 definicion de concepto 1 concepto 2 definicion de concepto 2 concepto 3 definicion de concepto 3 ENLACES A paginas externas <a href=\"http://www.codetabs.com\">href como url absoluta</a> A paginas del mismo sitio <a href=\"../info/contacto.html\">Contacto href como url relativa</a> A direcciones de correo <a href=\"mailto:info@domain.tld\">Mandar correo</a> A una nueva pesta\u00f1a <a href=\"http://www.imdb.com\" target=\"_blank\">Movie Database</a> A una parte de la misma pagina <h1 id=\"top\">Bla bla bla</h1> \u00f3 <h1 name=\"top\">Bla bla bla</h1> ... ... <a href=\"#top\">Subir</a> A una parte de otra pagina <a href=\"URL relativa o absoluta/#top\">Enlace</a> IMAGENES Ponerlas todas en una carpeta /imagenes Salvarlas a resolucion de 72 ppi(pixels per inch), los monitores no dan mas y asi ahorramos peso en la imagen <img src=\"URL relativa o absoluta a la imagen\" /> <img alt=\"lo que se lee si no se carga la imagen\" /> <img title=\"descripcion de la imagen, sale al poner el cursor encima\" /> CODIGO VIEJO -Altura ,anchura y alineamiento de la imagen es mejor hacerlo por CSS <img src=\"images/imagen.jpg\" alt=\"loquesea\" width=\"600\" height=\"450\" /> <img src=\"imagen.png\" alt=\"alt\" align=\"left|right|top|bottom|middle\" /> <figure> se usa para tener juntas y asociar las imagenes con sus pies de fotos <figcaption> Pero tambien se puede usar para contener imagenes videos graficos diagramas codigo texto <figure> <img src=\"imagen.jpg\" alt=\"loquesea\"> <br /> <figcaption>Pie de foto</figcaption> </figure> TABLAS <table> para crear la tabla <tr> fila <td> celda <td colspan=\"2\">Extiende el texto a dos columnas</td> <td rowspan=\"2\">Extiende el texto a dos filas</td> <th> es una celda pero cabecera de la fila o columna scope=\"row\" scope=\"col\" atributo que indica si es fila o columna <thead> <tbody> <tfoot> CODIGO VIEJO (Ahora por CSS) width spacing bgcolor border <table> <thead> <tr> <th></th> <th scope=\"col\">Sabado</th> <th scope=\"col\">Domingo</th> </tr> </thead> <tbody> <tr> <th scope=\"row\">Cervezas</th> <td>4</td> <td>2</td> </tr> <tr> <th scope=\"row\">Cervezas</th> <td>3</td> <td>3</td> </tr> </tbody> <tfoot> <tr> <th scope=\"row\">Total</th> <td>7</td> <td>5</td> </tr> </tfoot> </table> FORMULARIOS action method id size CODIGO VIEJO no deberia usarse, para el tama\u00f1o del cuadro. Usar CSS type=\"text\" crea una entrada de texto de una sola linea type=\"password\" como text pero los caracteres no se ven al teclearlos name nombre de la variable, el valor sera lo introducido en el formulario maxlength limitar los caracteres, p ej mes 2 caracteres type=\"submit\" boton que envia el formulario, el value es el texto que sale en el boton placeholder en cualquier input de texto es el valor que saldra por defecto hasta que el usuario lo pinche encima <form method=\"get or post\" action=\"url del servidor que va a responder\"> Usuario<input type=\"text\" name=\"usuario\" /> Contrase\u00f1a<input type=\"password\" name=\"contrasena\" /> <input type=\"submit\" value=\"Lo que sale en el boton para enviar\" /> </form> textarea cols y rows son las dos CODIGO VIEJO, mejor con CSS Escribir Aqui... <textarea name=\"sugerencias\" cols=\"40\" rows=\"3\">Escribir Aqui... </textarea> radio button Puedes elegir una opcion Elige una opcion Opcion 1 Opcion 2 Opcion 3 <form action=\"http://rutaquegestionaelform\"> <p>Elige una opcion <br /> <input type=\"radio\" name=\"opcion\" value=\"1\" /> Opcion 1 <input type=\"radio\" name=\"opcion\" value=\"2\" checked=\"checked\"/> Opcion 2 <input type=\"radio\" name=\"opcion\" value=\"3\" /> Opcion 3 </p> </form> checkbox Pues elegir cero, una o mas opciones de las disponibles Elige una opcion Opcion 1 Opcion 2 Opcion 3 <form action=\"http://rutaquegestionaelform\"> <p>Elige una opcion <br /> <input type=\"checkbox\" name=\"opcion\" value=\"1\" checked=\"checked\" /> Opcion 1 <input type=\"checkbox\" name=\"opcion\" value=\"2\" /> Opcion 2 <input type=\"checkbox\" name=\"opcion\" value=\"3\" checked=\"checked\" /> Opcion 3 </p> </form> select : drop down list Opcion a elegir ? Opcion 1 Opcion 2 Opcion 3 <form action=\"http://rutaquegestionaelform\"> <p>Opcion a elegir ?</p> <select name=\"opciones\"> <option value=\"1\">Opcion 1</option> <option value=\"2\" selected=\"selected\">Opcion 2</option> <option value=\"3\">Opcion 3</option> </select> </form> multiple select box Opcion a elegir ? Opcion 1 Opcion 2 Opcion 3 Opcion 4 Opcion 5 <form action=\"http://rutaquegestionaelform\"> <p>Opcion a elegir ?</p> <select name=\"opciones\"size=\"3\" multiple=\"mutiple\"> <option value=\"1\">Opcion 1</option> <option value=\"2\" selected=\"selected\" >Opcion 2</option> <option value=\"3\">Opcion 3</option> <option value=\"4\">Opcion 4</option> <option value=\"5\">Opcion 5</option> </select> </form> file input box Subir un archivo <form action=\"http://rutaquegestionaelform\" method=\"post\"> <p>Subir un archivo</p> <input type=\"file\" name=\"nombreArchivo\" /><br /> <input type=\"submit\" value=\"Upload\" /> </form> image button Texto de lo que sea <form action=\"http://rutaquegestionaelform\" > <p>Texto de lo que sea</p> <input type=\"text\" name=\"email\" /> <input type=\"image\" src=\"/ruta/imagen.jpg\" width=\"100\" height=\"20\" /> </form> button and hidden controls Add <form action=\"http://rutaquegestionaelform\" > <button> <img src=\"\" alt=\"add\" width=\"10\" height=\"10\" /> Add </button> <input type=\"hidden\" name=\"nombreQueQueramos\" value=\"valorAPasar\" /> </form> labeling form controls uso de etiquetas <label></label> para accesibilidad grouping form elements Detalles contacto Email: Movil: Telefono fijo: <fieldset> <legend>Detalles contacto</legend> <label>Email:<br /> <input type=\"text\" name=\"email\" /> </label><br /> <label>Movil:<br /> <input type=\"text\" name=\"mobile\" /> </label><br /> <label>Telefono fijo:<br /> <input type=\"text\" name=\"telephone\" /> </label> </fieldset> Validacion Usuario Contrase\u00f1a <form action=\"http://rutaquegestionaelform\" > Usuario<input type=\"text\" name=\"usuario\" required=\"required\"/> <br /> Contrase\u00f1a<input type=\"password\" name=\"contrasena\" required /> <br /> <input type=\"submit\" value=\"Enviar\" /> </form> Fecha Elige Fecha <input type=\"date\"> Correo Correo <input type=\"email\"> URL URL <input type=\"url\"> Telefono Telefono <input type=\"tel\"> Numero Numero <input type=\"number\"> Range Numero <input type=\"range\"> Color Color <input type=\"color\"> Search Search <input type=\"search\"> VIDEO Y AUDIO Video <video src=\"html5docs/videos/SampleVideo_1280x720_1mb.mp4\" poster=\"/_img/html-css/OkDedo.jpg\" width=\"400\" height=\"300\" preload controls autoplay loop> <p>Descripcion del video</p> </video> Para poner diferentes formatos usamos <source> <video poster=\"images/puppy.jpg\" width=\"400\" height=\"320\" > <source src=\"video.mp4\" type='video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"' /> <source src=\"video.webm\" type='video/webm;codecs=\"vp8, vorbis\"' /> <p>Descripcion del video</p> </video> Audio <audio src=\"html5docs/music/ACDC.ogg\" controls autoplay preload loop> <p>Formato no soportado por el navegador</p> </audio> Para poner diferentes formatos usamos <source> <audio controls autoplay> <source src=\"music/nombre.ogg\" /> <source src=\"music/nombre.mp3\" /> <p>Formato no soportado por el navegador</p> </audio> LAYOUT old Layout new Layout header, footer, nav, article, aside, section hgroup, figure, figcaption <figure> se usa para tener juntas y asociar las imagenes con sus pies de fotos <figcaption> Pero tambien se puede usar para contener imagenes videos graficos diagramas codigo texto <figure> <img src=\"images/bok-choi.jpg\" alt=\"Bok Choi\" /> <figcaption>Bok Choi</figcaption> </figure> div <div> queda para todo lo que no sea claramente algo de lo anterior y para tener juntos elementos relacionados o envolver partes de la pagina <div class=\"wrapper\"> <header> <h1>Yoko's Kitchen</h1> <nav><!-- nav content here --> </nav> </header> <section class=\"courses\"><!-- section content here --> </section> <aside><!-- aside content here --> </aside> <footer><!-- footer content here --> </footer> </div><!-- .wrapper --> Convertir bloque en enlace Envolvemos el elemento a converir en enlace con <a> <a href=\"introduction.html\"> <article> <figure> <img src=\"images/bok-choi.jpg\" alt=\"Bok Choi\" /> <figcaption>Bok Choi</figcaption> </figure> <hgroup> <h2>Japanese Vegetarian</h2> <h3>Five week course in London</h3> </hgroup> <p>A five week introduction to traditional Japanese vegetarian meals, teaching you a selection of rice and noodle dishes.</p> </article> </a>","title":"HTML"},{"location":"html/#html","text":"","title":"HTML"},{"location":"html/#flexbox","text":"Buena Guia para usar Flexbox Patrones para Flexbox","title":"FLEXBOX"},{"location":"html/#css-grid","text":"Aprender aqui gridbyexample.com","title":"CSS GRID"},{"location":"html/#snippets","text":"","title":"SNIPPETS"},{"location":"html/#plantilla","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <title>Title</title> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <meta name=\"description\" content=\"Content\" /> <!-- Favicon --> <link rel=\"icon\" type=\"image/x-icon\" href=\"/path/to/favicon\"> <!-- CSS --> <link rel=\"stylesheet\" type=\"text/css\" href=\"./index.css\"> <!-- Open Sans --> <link href=\"https://fonts.googleapis.com/css?family=Varela\" rel=\"stylesheet\"> </head> <body> <!-- google-analytics --> <!--#include file=\"/path/to/templates/stats.html\" --> <!-- Footer-- > <!--#include file= \"/path/to/templates/footer.html\" --> <!-- cookie Law --> <!--#include file=\"/path/to/templates/cookieLaw.html\" --> </body> </html>","title":"Plantilla"},{"location":"html/#validacion-con-html5-sin-submit","text":"<form action=\"./exercise/v1/newUser\" method=\"post\"> <input id=\"newUsername\" type=\"text\" name=\"username\" placeholder=\"username\" required> <input id=\"addUser\" class=\"but\" type=\"submit\" value=\"Send\"> </form> document.getElementById('addUser').addEventListener('click', addNewUser); function addNewUser (ev) { ev.preventDefault(); const f = document.getElementsByTagName('form')[0]; if (f.checkValidity()) { const newUsername = document.getElementById('newUsername').value; const params = `username=${newUsername}`; makeAjaxRequest(addNewUserUrl, 'POST', params, null, function (data) { showUsersList(data); }); } else { alert(document.getElementById('newUsername').validationMessage); } }","title":"Validacion con HTML5 sin submit"},{"location":"html/#disparar-evento-click-con-enter","text":"<div> <input id=\"inputText\" class=\"inputText\" type=\"text\" name=\"input\"> <span id=\"button\" class=\"button\">Button</span> </div> function init () { const button = document.getElementById('button'); button.addEventListener('click', action); const input = document.getElementById('inputText'); input.addEventListener('keyup', testEnter); } function testEnter (ev) { ev.preventDefault(); if (ev.keyCode === 13) { document.getElementById('button').click(); } }","title":"Disparar evento click con ENTER"},{"location":"html/#html5","text":"","title":"HTML5"},{"location":"html/#estructura","text":"<!DOCTYPE html> <html> <head> <title> Titulo </title> </head> <body> </body> </html> Block Elements Elementos que siempre empiezan en una nueva linea Inline Elements Elementos que aparecen a continuacion en la misma linea del anterior Caracteres de escape","title":"ESTRUCTURA"},{"location":"html/#texto","text":"white space collapsing : Dos o mas espacios o lineas juntos el navegador solo mostrara uno Elementos para estructurar la pagina <p> paragraph </p> <h1..6> headings </h1..6> <b> bold </b> <i> italic </i> <sup> superscript </sup> <sub> subscript </sub> <br /> line breaks <hr /> horizontal rules Elementos semanticos <strong> contenido importante </strong> <em> enfasis </em> <blockquote> citar parrafos </blockquote> <q> citas cortas dentro de un parrafo </q> <abbr> abreviaturas o acronimos </abbr> <cite> referencia a algo (libro, peli ...) </cite> <dfn> la primera explicacion de un termino en el documento </dfn> <address> para contener detalles de contacto de alguien </address> <ins> mostrar contenido que ha sido insertado en el documento </ins> <del> mostrar contenido que ha sido borrado en el documento </del> <s> indicar que algo ya no es relevante</s>","title":"TEXTO"},{"location":"html/#listas","text":"Ordenadas <ol> <li>primero</li> <li>segundo</li> <li>tercero</li> </ol> primero segundo tercero Desordenadas <ul> <li>primero</li> <li>segundo</li> <li>tercero</li> </ul> primero segundo tercero Listas de deficiones <dl> <dt> concepto 1</dt> <dd> definicion de concepto 1</dd> <dt> concepto 2</dt> <dd> definicion de concepto 2</dd> <dt> concepto 3</dt> <dd> definicion de concepto 3</dd> </dl> concepto 1 definicion de concepto 1 concepto 2 definicion de concepto 2 concepto 3 definicion de concepto 3","title":"LISTAS"},{"location":"html/#enlaces","text":"A paginas externas <a href=\"http://www.codetabs.com\">href como url absoluta</a> A paginas del mismo sitio <a href=\"../info/contacto.html\">Contacto href como url relativa</a> A direcciones de correo <a href=\"mailto:info@domain.tld\">Mandar correo</a> A una nueva pesta\u00f1a <a href=\"http://www.imdb.com\" target=\"_blank\">Movie Database</a> A una parte de la misma pagina <h1 id=\"top\">Bla bla bla</h1> \u00f3 <h1 name=\"top\">Bla bla bla</h1> ... ... <a href=\"#top\">Subir</a> A una parte de otra pagina <a href=\"URL relativa o absoluta/#top\">Enlace</a>","title":"ENLACES"},{"location":"html/#imagenes","text":"Ponerlas todas en una carpeta /imagenes Salvarlas a resolucion de 72 ppi(pixels per inch), los monitores no dan mas y asi ahorramos peso en la imagen <img src=\"URL relativa o absoluta a la imagen\" /> <img alt=\"lo que se lee si no se carga la imagen\" /> <img title=\"descripcion de la imagen, sale al poner el cursor encima\" /> CODIGO VIEJO -Altura ,anchura y alineamiento de la imagen es mejor hacerlo por CSS <img src=\"images/imagen.jpg\" alt=\"loquesea\" width=\"600\" height=\"450\" /> <img src=\"imagen.png\" alt=\"alt\" align=\"left|right|top|bottom|middle\" /> <figure> se usa para tener juntas y asociar las imagenes con sus pies de fotos <figcaption> Pero tambien se puede usar para contener imagenes videos graficos diagramas codigo texto <figure> <img src=\"imagen.jpg\" alt=\"loquesea\"> <br /> <figcaption>Pie de foto</figcaption> </figure>","title":"IMAGENES"},{"location":"html/#tablas","text":"<table> para crear la tabla <tr> fila <td> celda <td colspan=\"2\">Extiende el texto a dos columnas</td> <td rowspan=\"2\">Extiende el texto a dos filas</td> <th> es una celda pero cabecera de la fila o columna scope=\"row\" scope=\"col\" atributo que indica si es fila o columna <thead> <tbody> <tfoot> CODIGO VIEJO (Ahora por CSS) width spacing bgcolor border <table> <thead> <tr> <th></th> <th scope=\"col\">Sabado</th> <th scope=\"col\">Domingo</th> </tr> </thead> <tbody> <tr> <th scope=\"row\">Cervezas</th> <td>4</td> <td>2</td> </tr> <tr> <th scope=\"row\">Cervezas</th> <td>3</td> <td>3</td> </tr> </tbody> <tfoot> <tr> <th scope=\"row\">Total</th> <td>7</td> <td>5</td> </tr> </tfoot> </table>","title":"TABLAS"},{"location":"html/#formularios","text":"action method id size CODIGO VIEJO no deberia usarse, para el tama\u00f1o del cuadro. Usar CSS type=\"text\" crea una entrada de texto de una sola linea type=\"password\" como text pero los caracteres no se ven al teclearlos name nombre de la variable, el valor sera lo introducido en el formulario maxlength limitar los caracteres, p ej mes 2 caracteres type=\"submit\" boton que envia el formulario, el value es el texto que sale en el boton placeholder en cualquier input de texto es el valor que saldra por defecto hasta que el usuario lo pinche encima <form method=\"get or post\" action=\"url del servidor que va a responder\"> Usuario<input type=\"text\" name=\"usuario\" /> Contrase\u00f1a<input type=\"password\" name=\"contrasena\" /> <input type=\"submit\" value=\"Lo que sale en el boton para enviar\" /> </form> textarea cols y rows son las dos CODIGO VIEJO, mejor con CSS Escribir Aqui... <textarea name=\"sugerencias\" cols=\"40\" rows=\"3\">Escribir Aqui... </textarea> radio button Puedes elegir una opcion Elige una opcion Opcion 1 Opcion 2 Opcion 3 <form action=\"http://rutaquegestionaelform\"> <p>Elige una opcion <br /> <input type=\"radio\" name=\"opcion\" value=\"1\" /> Opcion 1 <input type=\"radio\" name=\"opcion\" value=\"2\" checked=\"checked\"/> Opcion 2 <input type=\"radio\" name=\"opcion\" value=\"3\" /> Opcion 3 </p> </form> checkbox Pues elegir cero, una o mas opciones de las disponibles Elige una opcion Opcion 1 Opcion 2 Opcion 3 <form action=\"http://rutaquegestionaelform\"> <p>Elige una opcion <br /> <input type=\"checkbox\" name=\"opcion\" value=\"1\" checked=\"checked\" /> Opcion 1 <input type=\"checkbox\" name=\"opcion\" value=\"2\" /> Opcion 2 <input type=\"checkbox\" name=\"opcion\" value=\"3\" checked=\"checked\" /> Opcion 3 </p> </form> select : drop down list Opcion a elegir ? Opcion 1 Opcion 2 Opcion 3 <form action=\"http://rutaquegestionaelform\"> <p>Opcion a elegir ?</p> <select name=\"opciones\"> <option value=\"1\">Opcion 1</option> <option value=\"2\" selected=\"selected\">Opcion 2</option> <option value=\"3\">Opcion 3</option> </select> </form> multiple select box Opcion a elegir ? Opcion 1 Opcion 2 Opcion 3 Opcion 4 Opcion 5 <form action=\"http://rutaquegestionaelform\"> <p>Opcion a elegir ?</p> <select name=\"opciones\"size=\"3\" multiple=\"mutiple\"> <option value=\"1\">Opcion 1</option> <option value=\"2\" selected=\"selected\" >Opcion 2</option> <option value=\"3\">Opcion 3</option> <option value=\"4\">Opcion 4</option> <option value=\"5\">Opcion 5</option> </select> </form> file input box Subir un archivo <form action=\"http://rutaquegestionaelform\" method=\"post\"> <p>Subir un archivo</p> <input type=\"file\" name=\"nombreArchivo\" /><br /> <input type=\"submit\" value=\"Upload\" /> </form> image button Texto de lo que sea <form action=\"http://rutaquegestionaelform\" > <p>Texto de lo que sea</p> <input type=\"text\" name=\"email\" /> <input type=\"image\" src=\"/ruta/imagen.jpg\" width=\"100\" height=\"20\" /> </form> button and hidden controls Add <form action=\"http://rutaquegestionaelform\" > <button> <img src=\"\" alt=\"add\" width=\"10\" height=\"10\" /> Add </button> <input type=\"hidden\" name=\"nombreQueQueramos\" value=\"valorAPasar\" /> </form> labeling form controls uso de etiquetas <label></label> para accesibilidad grouping form elements Detalles contacto Email: Movil: Telefono fijo: <fieldset> <legend>Detalles contacto</legend> <label>Email:<br /> <input type=\"text\" name=\"email\" /> </label><br /> <label>Movil:<br /> <input type=\"text\" name=\"mobile\" /> </label><br /> <label>Telefono fijo:<br /> <input type=\"text\" name=\"telephone\" /> </label> </fieldset> Validacion Usuario Contrase\u00f1a <form action=\"http://rutaquegestionaelform\" > Usuario<input type=\"text\" name=\"usuario\" required=\"required\"/> <br /> Contrase\u00f1a<input type=\"password\" name=\"contrasena\" required /> <br /> <input type=\"submit\" value=\"Enviar\" /> </form> Fecha Elige Fecha <input type=\"date\"> Correo Correo <input type=\"email\"> URL URL <input type=\"url\"> Telefono Telefono <input type=\"tel\"> Numero Numero <input type=\"number\"> Range Numero <input type=\"range\"> Color Color <input type=\"color\"> Search Search <input type=\"search\">","title":"FORMULARIOS"},{"location":"html/#video-y-audio","text":"","title":"VIDEO Y AUDIO"},{"location":"html/#video","text":"<video src=\"html5docs/videos/SampleVideo_1280x720_1mb.mp4\" poster=\"/_img/html-css/OkDedo.jpg\" width=\"400\" height=\"300\" preload controls autoplay loop> <p>Descripcion del video</p> </video> Para poner diferentes formatos usamos <source> <video poster=\"images/puppy.jpg\" width=\"400\" height=\"320\" > <source src=\"video.mp4\" type='video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"' /> <source src=\"video.webm\" type='video/webm;codecs=\"vp8, vorbis\"' /> <p>Descripcion del video</p> </video>","title":"Video"},{"location":"html/#audio","text":"<audio src=\"html5docs/music/ACDC.ogg\" controls autoplay preload loop> <p>Formato no soportado por el navegador</p> </audio> Para poner diferentes formatos usamos <source> <audio controls autoplay> <source src=\"music/nombre.ogg\" /> <source src=\"music/nombre.mp3\" /> <p>Formato no soportado por el navegador</p> </audio>","title":"Audio"},{"location":"html/#layout","text":"old Layout new Layout header, footer, nav, article, aside, section hgroup, figure, figcaption <figure> se usa para tener juntas y asociar las imagenes con sus pies de fotos <figcaption> Pero tambien se puede usar para contener imagenes videos graficos diagramas codigo texto <figure> <img src=\"images/bok-choi.jpg\" alt=\"Bok Choi\" /> <figcaption>Bok Choi</figcaption> </figure> div <div> queda para todo lo que no sea claramente algo de lo anterior y para tener juntos elementos relacionados o envolver partes de la pagina <div class=\"wrapper\"> <header> <h1>Yoko's Kitchen</h1> <nav><!-- nav content here --> </nav> </header> <section class=\"courses\"><!-- section content here --> </section> <aside><!-- aside content here --> </aside> <footer><!-- footer content here --> </footer> </div><!-- .wrapper --> Convertir bloque en enlace Envolvemos el elemento a converir en enlace con <a> <a href=\"introduction.html\"> <article> <figure> <img src=\"images/bok-choi.jpg\" alt=\"Bok Choi\" /> <figcaption>Bok Choi</figcaption> </figure> <hgroup> <h2>Japanese Vegetarian</h2> <h3>Five week course in London</h3> </hgroup> <p>A five week introduction to traditional Japanese vegetarian meals, teaching you a selection of rice and noodle dishes.</p> </article> </a>","title":"LAYOUT"},{"location":"javascript-apis/","text":"JAVASCRIPT APIs Para ver si un navegador tiene una funcionalidad if (navigator.geolocation) { // codigo } else { // codigo } Modernizr puede ayudar if (Modernizr.awesomeNewFeature) { showOffAwesomeNewFeature(); } else { getTheOldLameExperience(); } LIBRERIA STANDARD Math Math es un Objeto Global que actua sobre numeros Propiedades Math.PI - Devuelve pi 3.14159265359 Math.E - constante de Euler Math.LN2 - logaritmo natural de 2 Math.LN10 - logaritmo natural de 10 Math.LOG2E - logaritmo en base 2 de e Math.LOG10E - logaritmo en base 10 de e Math.SQRT1_2 - raiz cuadrada de medio (1/2) Math.SQRT2 - raiz cuadrada de 2 Metodos Math.abs(num) - Devuelve el valor absoluto de num Math.round(num) - Redondea num al entero mas cercano Math.sqrt(num) - Devuelve la raiz cuadrada del numero positivo num Math.ceil(num) - Redondea al entero mas cercano por arriba Math.floor(num) - Redondea al entero mas cercano por abajo Math.random() - Genera un numero aleatorio entre 0 (inclusivo) y 1 (no inclusivo) Math.pow(num, pot) - Devuelve num elevado a la pot Math.max(num1, num2, num3) - devuelve el mayor numero Math.min(num1, num2, num3) - devuelve el menor numero Math.acos(x) - Math.asin(x) - Math.atan(x) - Math.atan2(x) - Math.cos(x) - Math.sin(x) - Math.tan(x) - // Crea un numero aleatorio entre min y max ambos inclusivo Math.floor(Math.random() * (max - min + 1) + min); Date Crear Objeto Date var d = new Date(); var d = new Date(millis); var d = new Date(dateString); var d = new Date(year, month, day, hours, minutes, seconds, millis); Metodos Date.now() - devuelve el numero de Milisegundos desde el 1 ene 1970 Date.parse() - parsea la fecha y devuelve el numero de Milisegundos desde el 1 ene 1970 .getDate() , .setDate() - Dia del mes (1-31) .getDay() - Dia de la semana (0-6) .getFullYear() , .setFullYear() - a\u00f1o (4 digitos) .getHours() , .setHours() - Hora (0-23) .getMilliseconds() , .setMilliseconds() - Milisegundos (0-999) .getMinutes() , .setMinutes() - Minutos (0-59) .getMonth() , .setMonth() - Mes (0-11) .getSeconds() , .setSeconds() - Segundos (0-59) .getTime() , .setTime() - Milisegundos desde 1 Enero 1970 00:00:00 y negativo para cualquier tiempo anterior a esa fecha .getTimezoneOffset() - Minutos de diferencia horaria entre UTC y la hora local Version para UTC .getUTCDate() , .setUTCDate() - Dia del mes (1-31) .toDateString() - Fecha del tipo Mon Jan 17 1982 .toTimeString() - Hora del tipo 19:45:15 GMT+0300 (CEST) .toString() - Devuelve una string con la fecha especificada .toISOString() - Devuelve una string con la fecha especificada usando el standard ISO .date.toJSON() - Devuelve una string con la fecha especificada formateado en JSON. .toLocaleDateString() - Devuelve una string con la fecha especificada usando las convenciones segun la hora local .toLocaleTimeString() - Devuelve una string con la fecha especificada usando las convenciones segun la hora local .toLocaleString() - Devuelve una string con la fecha especificada usando las convenciones segun la hora local .toUTCString() - Devuelve una string con la fecha especificada segun la hora universal .valueOf() - Devuelve el valor primitico de un objeto Date JSON JSON.stringify JSON.stringify(value, replacer?, space?) convierte el valor value a una cadena en formato JSON. replacer es opcional y se usa para cambiar value antes de stringify function replacer(key, value) { if (typeof value === 'number') { value = 2 * value; } return value; } JSON.stringify({ a: 5, b: [ 2, 8 ] }, replacer) // '{\"a\":10,\"b\":[4,16]} JSON.parse JSON.parse(text, reviver?) convierte los datos JSON en text y devuelve un valor javascript reviver es opcional y se puede usar para transformar los datos ya parseados STRICT MODE Variables han de ser definidas explicitamente No se puede borrar una variable u objeto usando delete No se puede definir la misma propiedad dos veces No permite los nombres de parametros duplicados En una funcion si no se conoce this en lugar de usar el objeto global window sera undefined Las variables instanciadas dentro del contexto de eval() s\u00f3lo son v\u00e1lidas en ese contexto. La sentencia with(){} ya no se usa js Envolvemos todo la parte del codigo js en una IIFEs (function() { 'use strict'; /* code here */ .. codigo }()); node.js a\u00f1adimos al comienzo del archivo /*jslint node: true */ 'use strict'; WEB STORAGE Objeto Storage Los navegadores guardan sobre 8mb por dominio en un objecto storage Los datos se guardan como propiedades (clave/calor) del objeto storage Acceso a los datos se hace de manera sincrona Los navegadores usan politica del mismo origen, vamos que los datos solo son accesibles por otras paginas del mismo dominio Para ello las 4 partes del URL deben coincidir Protocolo \u00a1 ojo que https es distinto a http ! Subdominio, maps.google.com no puede acceder a datos guardados de www.google.com Dominio debe coincidir Puerto, este tambien debe coincidr Propiedades .length - numero de claves Metodos .setItem('clave', 'valor') - Crea una nueva pareja clave/valor .getItem('clave') - Devuelve el valor de la clave \"clave\" .removeItem('clave') - Elimina la clave/valor para esa clave .clear() - Limpia toda la informacion del objeto storage sessionStorage Cambios frecuentes cada vez que el usuario visita el sitio, (datos de localizacion, logueos) Es personal y privado, no debe ser visto por otros usuarios del dispositivo localStorage Solo cambia en los intervalos establecidos (horarios, listas de precios) y es util almacenarlo offline Cosas que el usuario use de nuevo si vuelve al sitio (guardar preferencias y ajustes) localStorage.setItem(\"username\", \"marijn\"); console.log(localStorage.getItem(\"username\")); // \u2192 marijn localStorage.removeItem(\"username\"); Un valor en localStorage dura hasta que se sobreescribe, se elimina o el usuario limpia sus datos locales Cada pagina tiene su propio almacen que solo puede interactuar con scripts de la misma pagina Ejemplo var basicRecipes = [{ title: 'Cookies', ingredients: ['Cup shortening', 'Peanut Butter', 'Milk', 'Eggs'] }, { title: 'Spaghetti', ingredients: ['Noodles', 'Tomato Sauce', 'Meatballs', 'Onion'] }, { title: 'Rice Pudding', ingredients: ['White Rice', 'Milk', 'Sugar', 'Salt'] }]; // Estas dos hacen lo mismo localStorage.setItem('basicRecipes', JSON.stringify(basicRecipes)); localStorage.basicRecipes = JSON.stringify(basicRecipes); // Dos formas de hacer lo mismo tambien var sol = JSON.parse(localStorage.getItem('basicRecipes')); console.log(sol[0].title); console.log((JSON.parse(localStorage.basicRecipes))[0]); // Esto borra toda la localStorage localStorage.clear() IndexedDB Web SQL Deprecada, pero aun se usa No funciona ni en chrome ni en IE GEOLOCATION Metodos objeto navigation.geolocation getCurrentPosition(exito, error, conf) - exito - funcion para procesar la ubicacion recibida en el objeto Position error -funcion para procesar los errores retornados en el objeto PositionError conf - objeto para configurar como la informacion sera adquirida watchPosition(exito, error, conf) - igual que el anterior excepto que inicia un proceso de vigilancia para detectar nuevas ubicaciones que nos enviara cada cierto tiempo clearWatch(id) - El metodo watchPosition() retorna un valor que puede ser almacenado en una variable para luego ser usado como id aqui y detener la vigilancia Propiedades objeto Position .coords.latitude - Devuelve latitud en grados decimales .coords.longitude - Devuelve longitud en grados decimales .coords.accuracy - Precision de latitud y longitud en metros .coords.altitude - Devuelve metros sobre el nivel del mar .coords.altitudeAccuracy - Precision de la altitud en metros .coords.heading - Devuelve grados respecto al norte .coords.speed - Devuelve velocidad en m/s .coords.timestamp - Devuelve tiempo desde que se creo (en forma de Date ) Propiedades objeto PositionError PositionError.code - Devuelve un numero de error con los valores: Permiso denegado No disponeble Ha expirado el tiempo PositionError.message - Devuelve un mensaje (pero no para el usuario) var elMap = document.getElementById('loc'); var msg = 'Sorry, we were unable to get your location.'; if (Modernizr.geolocation) { navigator.geolocation.getCurrentPosition(success, fail); elMap.textContent = 'Checking location...'; } else { elMap.textContent = msg; } function success(position) { msg = '<h3>Longitude: '; msg += position.coords.longitude + '</h3>'; msg += '<h3>Latitude: '; msg += position.coords.latitude + '</h3>'; elMap.innerHTML = msg; } function fail(msg) { elMap.textContent = msg; console.log(msg.code); } HISTORY Objeto history Propiedades .length - numero de articulos en el objeto historia Metodos history.back() - Retrocedes en la historia a la anterior posicion history.forward() - Saltas adelante a la siguiente posicion history.go(n) - Te lleva a la pagina n respecto de tu posicion que es la 0. Por ejemplo -2 echa dos para atras y 1 salta uno hacia adelante history.pushState() - A\u00f1ade un elemento a la historia history.replaceState() - Cambia el actual elemento de la historia por el que pasamos ahora Eventos window.onpopstate - Usado para manejar los movimientos de usuario de adelante atras GOOGLE MAPS API Key Se consigue aqui Ajustes Crear un mapa El evento onload llama a la funcion loadScript() LoadScript() crea un elemento <script> que carga la API y cuando se carga llama a init() que inicializa el mapa init() carga el mapa en la pagina. Primero crea un objeto mapOptions con propiedades Luego usa el contructor Map() para crear el map y dibujarlo en la pagina. El contructor tiene dos paremetros el elemento dentro del cual el mapa aparecera dentro el objeto mapOption zoom - Entre 0 (el mundo entero) y 16 mapTypeId - ROADMAP, SATELLITE, HYBRID, TERRAIN function init() { var mapOptions = { // Set up the map options center: new google.maps.LatLng(40.782710,-73.965310), mapTypeId: google.maps.MapTypeId.ROADMAP, zoom: 13 }; var venueMap; // Map() draws a map venueMap = new google.maps.Map(document.getElementById('map'), mapOptions); } function loadScript() { var script = document.createElement('script'); script.src = 'http://maps.googleapis.com/maps/api/js?sensor=false& callback=init'; document.body.appendChild(script); } window.onload = loadScript; Cambiar los controles function init() { var mapOptions = { zoom: 14, center: new google.maps.LatLng(40.782710,-73.965310), mapTypeId: google.maps.MapTypeId.ROADMAP, panControl: false, zoomControl: true, zoomControlOptions: { style: google.maps.ZoomControlStyle.SMALL, position: google.maps.ControlPosition.TOP_RIGHT }, mapTypeControl: true, mapTypeControlOptions: { style: google.maps.MapTypeControlStyle.DROPDOWN_MENU, position: google.maps.ControlPosition.TOP_LEFT }, scaleControl: true, scaleControlOptions: { position: google.maps.ControlPosition.TOP_CENTER }, streetViewControl: false, overviewMapControl: false }; var venueMap = new google.maps.Map(document.getElementById('map'), mapOptions); } function loadScript() { var script = document.createElement('script'); script.src = 'http://maps.googleapis.com/maps/api/js?sensor=false &callback=init'; document.body.appendChild(script); } window.onload = loadScript; A\u00f1adir marcadores var pinlocation = new google.maps.Latlng(40.782710,-73.965310); var startPosition = new google.maps.Marker({ // Create marker position: pinLocation, // Set position map: venueMap, // Specify the map icon: \"img/go.png\" // Path to image }); CANVAS Graficos para la web <canvas> - Crea el lienzo para dibujar <body> <section id=\"cajacanvas\"> <canvas id=\"canvas\" width=\"500\" height=\"300\"></canvas> </section> </body> .getContext(opcion) - Genera un contexto de dibujo que se asigna al lienzo. opcion puede ser \"2d\" o \"webGL\" function iniciar(){ var elem = document.getElementById('lienzo'); var lienzo = elem.getContext('2d'); // Aqui los distintos ejemplos posteriores } addEventListener(\"load\", iniciar); Dibujar function iniciar(){ var elemento=document.getElementById('lienzo'); lienzo=elemento.getContext('2d'); // codigo para dibujar y hacer cosas } window.addEventListener(\"load\", iniciar, false) Rectangulos Metodos fillRect(x,y,ancho,alto) - Dibuja un rectangulo solido. La esquina superior izquierda esta en x,y. Ancho y alto definen el tama\u00f1o del rectangulo strokeRect(x,y,ancho,alto) - Como el anterior pero solo dibuja el contorno clearRect(x,y,ancho,alto) - Es un borrador rectangular lienzo.strokeRect(100,100,120,120); lienzo.fillRect(110,110,100,100); lienzo.clearRect(120,120,80,80); Color Propiedades strokeStyle - color para el contorno de la figura fillStyle - color para el interior de la figura globalAlpha - especifica la transfercnia para todas las figuras dibujadas en el lienzo lienzo.fillStyle = \"#000099\"; lienzo.strokeStyle = \"#990000\"; lienzo.strokeStyrl = \"rgba(255, 165, 0, 1)\" lienzo.globalAlpha = 0.5 // (0 opaco, 1 transparente) Degradados Metodos createLinearGradient(x1,y1,x2,y2) - Crea un objeto que luego sera usado para aplicar un gradiente lineal al lienzo createRadialGradient(x1,y1,r1,x2,y2,r2) - Crea un objeto que luego ser\u00e1 usado para aplicar un gradiente circular o radial al lienzo usando dos c\u00edrculos. Los valores representan la posici\u00f3n del centro de cada c\u00edrculo y sus radios addColorStop(posicion,color) - Posici\u00f3n es un valor entre 0 y 1 que determina d\u00f3nde la degradaci\u00f3n comenzar\u00e1 para ese color en particular. Color especifica los colores que usaran los gradientes var gradiente = lienzo.createLinearGradient(0, 0, 10, 100); gradiente.addColorStop(0.5, '#0000FF'); gradiente.addColorStop(1, '#000000'); lienzo.fillStyle = gradiente; Crear Trazados Lo normal es procesar figuras en segundo plano y una vez hecho enviarlas al contexto a ser dibujadas. Un trazado es como un mapa a ser seguido por el lapiz. Puede incluir diferentes tipos de l\u00edneas, como l\u00edneas rectas, arcos, rect\u00e1ngulos ... para crear figuras complejas Metodos para comenzar y cerrar el trazado beginPath() - Describe el comienzo de una nueva figura. Se llama primero, antes de comenzar a crear el trazado closePath() - Cierra el trazado generando una linea recta desde el ultimo punto hasta el punto de origen. Se puede ignorar cuando usamos el metodo fill() para dibujar el trazado en el lienzo Metodos para dibujar el trazado en el lienzo stroke() - dibuja el trazado de una figura vacia (solo el contorno) fill() - dibuja el trazado de una figura solida clip() - declara una nueva area de corte para el contexto. Al inicializar el contexto el area de corte es el area completa ocupada por el lienzo. clip() cambia esa area a una nueva forma creando una mascara. Todo lo que este fuera de esa mascara no sera dibujado lienzo.beginPath(); // aqu\u00ed va el trazado lienzo.stroke(); Metodos para crear el trazado moveTo(x,y) - mueve el lapiz a una posicion para continuar con el trazado lineTo(x,y) - genera linea recta desde la posicion actual hasta la nueva x,y rect(x,y,ancho,alto) - genera un texangulo que forma parte del trazado arc(x,y,radio,anguloInicio,anguloFinal,direccion) - genera un arco o circulo en la posicion x,y con radio y desde un anguloInicio hasta anguloFinal. La direccion false a favor de las agujas del reloj, true en contra quadraticCurve(cpx,cpy,x,y) - genera una curva cuadratica bezier desde la posicion actual hasta las posicion x,y. cpx y cpy indican el punto que dara forma a la curva bezierCurve(cp1x,cp1y,cp2x,cp2y,x,y) - como el anterior pero genera una curva bezier cubica con dos puntos para moldear la curva lienzo.beginPath(); lienzo.moveTo(100,100); lienzo.lineTo(200,200); lienzo.lineTo(100,200); // Opcion 1 lienzo.closePath(); lienzo.stroke(); // Opcion 2 lienzo.fill(); // circulos con arc() lienzo.arc(100,100,50,0,Math.PI*2, false); // arco de 45 grados var radianes=Math.PI/180*45; lienzo.arc(100,100,50,0,radianes, false); Estilos de linea Propiedades afectan al trazado completo. para cambia las caracteristicas de las lineas hay que crear un nuevo trazado lineWidth - Determina el grosor de la linea, por defecto = 1 lineCap - Determina la forma de la terminacion de la linea butt , round \u00f3 square lineJoin - Forma de la conexion entre dos lineas, round , bevel \u00f3 miter miterLimit - Determina cuanto la conexion de dos lineas sera extendida cuando lineJoin=\"miter\" lienzo.beginPath(); lienzo.arc(200,150,50,0,Math.PI*2, false); lienzo.stroke(); lienzo.lineWidth=10; lienzo.lineCap=\"round\"; lienzo.beginPath(); lienzo.moveTo(230,150); lienzo.arc(200,150,30,0,Math.PI, false); lienzo.stroke(); lienzo.lineWidth=5; lienzo.lineJoin=\"miter\"; lienzo.beginPath(); lienzo.moveTo(195,135); lienzo.lineTo(215,155); lienzo.lineTo(195,155); lienzo.stroke(); Texto Propiedades font - similar a font de CSS y acepta los mismos valores textAlign - Alinea el texto, start , end , left , right , y center textBaseline -Alineamiento vertical, top , hanging , middle , alphabetic , ideographic , y bottom Metodos strokeText(texto,x,y,opcional) - Dibuja el texto en la posicion x,y como una figura vacia(solo contornos). opcional declara el tama\u00f1o maximo,si el texto es mas extenso se encogera fillText(texto,x,y) - Igual que el anterior pero el texto sera solido measureText(texto,x,y) - Retorna informacion sobre el tama\u00f1o de un texto especifico. Util para combinar texto con otras formas y calcular posiciones o colisiones lienzo.font=\"bold 24px verdana, sans-serif\"; lienzo.textAlign=\"start\"; lienzo.fillText(\"Mi mensaje\", 100,100); lienzo.font=\"bold 24px verdana, sans-serif\"; lienzo.textAlign=\"start\"; lienzo.textBaseline=\"bottom\"; lienzo.fillText(\"Mi mensaje\", 100,124); var tamano=lienzo.measureText(\"Mi mensaje\"); lienzo.strokeRect(100,100,tamano.width,24); Sombras Propiedades shadowColor - Color de la sombra usando sintaxis CSS shadowOffsetX - Recibe un numero que indica cuan lejos esta la sombra del objeto en direccion horizontal shadowOffsetY - Recibe un numero que indica cuan lejos esta la sombra del objeto en direccion vertical shadowBlur - Produce efecto de difuminacion para la sombra lienzo.shadowColor=\"rgba(0,0,0,0.5)\"; lienzo.shadowOffsetX=4; lienzo.shadowOffsetY=4; lienzo.shadowBlur=5; lienzo.font=\"bold 50px verdana, sans-serif\"; lienzo.fillText(\"Mi mensaje \", 100,100); Transformaciones translate(x,y) - Mueve el origen del lienzo rotate(angulo) - Rota el lienzo alrededor del origen tantos angulos scale(x,y) - Incrementa o disminuye las unidades de la grilla para reducir o ampliar todo lo dibujado. La escala se puede cambiar solo en un eje. Por defecto valor=1 transform(m1,m2,m3,m4,dx,dy) - El lienzo tiene una matriz de valores, esto aplica una nueva matriz sobre la actual para modificar el lienzo setTransform(m1,m2,m3,m4,dx,dy) - Reinicializa la matriz de transformacion y establece una nueva con estos valores // Moviendo, rotando y escalando. lienzo.fillText(\"PRUEBA\",50,20); lienzo.translate(50,70); lienzo.rotate(Math.PI/180*45); lienzo.fillText(\"PRUEBA\",0,0); lienzo.rotate(-Math.PI/180*45); lienzo.translate(0,100); lienzo.scale(2,2); lienzo.fillText(\"PRUEBA\",0,0); // Transformaciones acumulativas sobre la matriz. lienzo.transform(3,0,0,1,0,0); lienzo.font=\"bold 20px verdana, sans-serif\"; lienzo.fillText(\"PRUEBA\",20,20); lienzo.transform(1,0,0,10,0,0); lienzo.font=\"bold 20px verdana, sans-serif\"; lienzo.fillText(\"PRUEBA\",100,20); Restaurar el estado Metodos save() - graba es estado del lienzo restore() - recupera el ultimo estado grabado // Grabando el estado del lienzo. lienzo.save(); lienzo.translate(50,70); lienzo.font=\"bold 20px verdana, sans-serif\"; lienzo.fillText(\"PRUEBA1\",0,30); lienzo.restore(); lienzo.fillText(\"PRUEBA2\",0,30); globalCompositeOperation Determina como una figura es poscionada y combinada con figuras ya dibujadas en el lienzo Valores de la propiedad source-over - POR DEFECTO - la nueva figura sera dibujada sobre las existentes source-in - Solo la parte de la nueva figura que se sobrepone a las figuras previas es dibujada. El resto de la figura, e incluso el resto de las figuras previas, se vuelven transparentes. source-out - Solo la parte de la nueva figura que no se sobrepone a las figuras previas es dibujada. El resto de la figura, e incluso el resto de las figuras previas, se vuelven transparentes. source-atop - Solo la parte de la nueva figura que se superpone con las figuras previas es dibujada. Las figuras previas son preservadas, pero el resto de la nueva figura se vuelve transparente. lighter - Ambas figuras son dibujadas (nueva y vieja), pero el color de las partes que se superponen es obtenido adicionando los valores de los colores de cada figura. xor - Ambas figuras son dibujadas (nueva y vieja), pero las partes que se superponen se vuelven transparentes. destination-over - Este es el opuesto del valor por defecto. Las nuevas figuras son dibujadas detr\u00e1s de las viejas que ya se encuentran en el lienzo. destination-in - Las partes de las figuras existentes en el lienzo que se superponen con la nueva figura son preservadas. El resto, incluyendo la nueva figura, se vuelven transparentes destination-out - Las partes de las figuras existentes en el lienzo que no se superponen con la nueva figura son preservadas. El resto, incluyendo la nueva figura, se vuelven transparentes. destination-atop - Las figuras existentes y la nueva son preservadas solo en la parte en la que se superponen. darker - Ambas figuras son dibujadas, pero el color de las partes que se superponen es determinado substrayendo los valores de los colores de cada figura. copy - Solo la nueva figura es dibujada. Las ya existentes se vuelven transparentes. // robando la propiedad globalCompositeOperation lienzo.fillStyle=\"#990000\"; lienzo.fillRect(100,100,300,100); lienzo.globalCompositeOperation=\"destination-atop\"; lienzo.fillStyle=\"#AAAAFF\"; lienzo.font=\"bold 80px verdana, sans-serif\"; lienzo.textAlign=\"center\"; lienzo.textBaseline=\"middle\"; lienzo.fillText(\"PRUEBA\",250,110); Procesar imagenes drawImage() Permite dibujar una imagen en el lienzo drawImage(imagen,x,y) - Dibuja una imagen en el lienzo en la posicion x,y. La imagen puede ser una referencia a un elemento <img> <video> u otro <canvas> drawImage(imagen,x,y,ancho,alto) - Como antes pero permite escalar la imagen drawImage(imagen,x1,y1,ancho1,alto1,x2,y2,ancho2,alto2) - Los valores ..1 definen la parte de la imagen que sera cortada mientras que los valores ..2 indican el lugar donde sera insertado en el lienzo y su nuevo tama\u00f1o var img = document.createElement('img'); img.setAttribute('src', 'http://www.formasterminds.com/snow.jpg'); img.addEventListener(\"load\", function(){ lienzo.drawImage(img, 20, 20); // Otra opcion: Ajustando la imagen al tama\u00f1o del lienzo lienzo.drawImage(img, 0, 0, elem.width, elem.height); }); Datos de imagen Toda imagen puede ser representada por una sucesi\u00f3n de n\u00fameros enteros representando valores rgba Un grupo de valores con esta informaci\u00f3n resultar\u00e1 en un array unidimensional que puede ser usado luego para generar una imagen. Metodos getImageData(x,y,ancho,alto) - toma un rectangulo del lienzo y lo convierte en datos. Retorna un objeto con propiedades width , height y data putImageData(datosImagen,x,y) - convierte los datos de datosImagen en una imagen y la dibujan en el lienzo en la posicion x,y createImageData((ancho,alto)|datos) - Crea datos para representar una imagen vacia. Todos los pixeles son negro transparente. Tambien puede recibir datos como atributo en lugar de ancho,alto img = document.createElement('img'); img.setAttribute('src', 'snow.jpg'); img.addEventListener(\"load\", modimagen); function modimagen(){ lienzo.drawImage(img, 0, 0); var info = lienzo.getImageData(0, 0, 175, 262); var pos; for(var x = 0; x < 175; x++){ for(var y = 0; y < 262; y++){ pos = (info.width * 4 * y) + (x * 4); info.data[pos] = 255 - info.data[pos]; info.data[pos+1] = 255 - info.data[pos+1]; info.data[pos+2] = 255 - info.data[pos+2]; } } lienzo.putImageData(info, 0, 0); } cross-origin setAttribute(\"crossOrigin\",\"anonymous|use-credentials\") - anonymous hace caso omiso de las credenciales y use-credentials requiere credenciales imagen.setAttribute(\"crossOrigin\",\"anonymous|use-credentials\"); Extraccion de datos Metodos toDataURL(image/jpeg|image/png) - Devuelve los datos en formato data:url del contenido del lienzo a una resolucion de 96 ppp toDataURL - Como la anterior pera la resolucion es la original del lienzo toBlob(funcion,image/jpeg|image/png) - Devuelve un objeto con un blob(datos en crudo) que contiene la representacion del lienzo en el formato elegido y resolucion de 96 ppp. La funcion es la encargada de procesar el objeto. toBlobHD(tipo) - Como el anterior pero la resolucion del blob es la del lienzo original Patrones Los patrones son simples adiciones que pueden mejorar nuestros trazados. createPattern(imagen,tipo) - im\u00e1gen es una referencia a la imagen que vamos a usar como patr\u00f3n, y tipo configura el patr\u00f3n por medio de cuatro valores: repeat, repeat-x, repeat-y y no-repeat img = document.createElement('img'); const imageUrl = 'http://www.formasterminds.com/content/bricks.jpg'; img.setAttribute('src', imageUrl); img.addEventListener(\"load\", modimagen); } function modimagen(){ var pattern = lienzo.createPattern(img, 'repeat'); lienzo.fillStyle = pattern; lienzo.fillRect(0, 0, 500, 300); } Animaciones B\u00e1sicamente, debemos borrar el \u00e1rea del lienzo que queremos animar, dibujar las figuras y repetir el proceso una y otra vez. Es mejor usar imagenes (png) que figuras con trazados complejos Elementales // Dos ojos que miran al puntero del raton y lo siguen var lienzo; function iniciar(){ var elem = document.getElementById('lienzo'); lienzo = elem.getContext('2d'); addEventListener('mousemove', animar); } function animar(e){ lienzo.clearRect(0, 0, 300, 500); var xraton = e.clientX; var yraton = e.clientY; var xcentro = 220; var ycentro = 150; var ang = Math.atan2(xraton - xcentro, yraton - ycentro); var x = xcentro + Math.round(Math.sin(ang) * 10); var y = ycentro + Math.round(Math.cos(ang) * 10); lienzo.beginPath(); lienzo.arc(xcentro, ycentro, 20, 0, Math.PI * 2, false); lienzo.moveTo(xcentro + 70, 150); lienzo.arc(xcentro + 50, 150, 20, 0, Math.PI * 2, false); lienzo.stroke(); lienzo.beginPath(); lienzo.moveTo(x + 10, y); lienzo.arc(x, y, 10, 0, Math.PI * 2, false); lienzo.moveTo(x + 60, y); lienzo.arc(x + 50, y, 10, 0, Math.PI * 2, false); lienzo.fill(); } addEventListener(\"load\", iniciar); Profesionales <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"utf-8\"> <title>VideoJuegos</title> <style> body{ text-align: center; } #cajadelienzo{ margin: 100px auto; } #lienzo{ border: 1px solid #999999; } </style> <script src=\"videojuego.js\"></script> </head> <body> <section id=\"cajadelienzo\"> <canvas id=\"lienzo\" width=\"600\" height=\"400\"></canvas> </section> </body> </html> requestAnimationFrame(funcion) - Sincroniza la animacion con la ventana del navegador y el monitor. hay que llamarlo para cada ciclo del bucle cancelAnimationFrame(variable) - Podemos asignar el valor de arriba a una variable y con ese metodo cancelamos el proceso Hay que concentrar el codigo del juego en un objeto global unico var onoff; function gameLoop() { // haces lo que sea onoff = requestAnimationFrame(gameLoop); } // en otro sitio para parar el bucle cancelAnimationFrame(onoff); function gameLoop () { setTimeout(function () { if (running) { update(); render(); } onoff = requestAnimationFrame(gameLoop); // console.log('gameLoop sigue ... ', onoff) if (cancel) { cancelAnimationFrame(onoff); setScoreToZeros(); } }, 1000 / fps); } var mijuego = { lienzo: { ctx: '', offsetx: 0, offsety: 0 }, nave: { x: 300, y: 200, movex: 0, movey: 0, speed: 1 }, iniciar: function(){ var elem = document.getElementById('lienzo'); mijuego.lienzo.ctx = elem.getContext('2d'); mijuego.lienzo.offsetx = elem.offsetLeft; mijuego.lienzo.offsety = elem.offsetTop; document.addEventListener('click', function(e){ mijuego.control(e); }); mijuego.bucle(); }, bucle: function(){ if(mijuego.nave.speed){ mijuego.procesar(); mijuego.detectar(); mijuego.dibujar(); // requestAnimationFrame(function(){ mijuego.bucle() }); webkitRequestAnimationFrame(function(){ mijuego.bucle() }); }else{ mijuego.lienzo.ctx.font = \"bold 36px verdana, sans-serif\"; mijuego.lienzo.ctx.fillText('JUEGO FINALIZADO', 112, 210); } }, control: function(e){ var distancex = e.clientX - (mijuego.lienzo.offsetx + mijuego.nave.x); var distancey = e.clientY - (mijuego.lienzo.offsety + mijuego.nave.y); var ang = Math.atan2(distancex, distancey); mijuego.nave.movex = Math.sin(ang); mijuego.nave.movey = Math.cos(ang); mijuego.nave.speed += 1; }, dibujar: function(){ mijuego.lienzo.ctx.clearRect(0, 0, 600, 400); mijuego.lienzo.ctx.beginPath(); mijuego.lienzo.ctx.arc(mijuego.nave.x, mijuego.nave.y, 20, 0, Math.PI/180*360, false); mijuego.lienzo.ctx.fill(); }, procesar: function(){ mijuego.nave.x += mijuego.nave.movex * mijuego.nave.speed; mijuego.nave.y += mijuego.nave.movey * mijuego.nave.speed; }, detectar: function(){ if(mijuego.nave.x < 0 || mijuego.nave.x > 600 || mijuego.nave.y < 0 || mijuego.nave.y > 400){ mijuego.nave.speed = 0; } } }; addEventListener('load', function(){ mijuego.iniciar(); }); Procesar Video Coger cada cuadro del video desde el elemento <video> y dibujarlo como una imagen en el lienzo usando drawImage() Mostrar video <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"utf-8\"> <title>Video en el Lienzo</title> <style> section{ float: left; } </style> <script> var lienzo, video; function iniciar(){ var elem = document.getElementById('lienzo'); lienzo = elem.getContext('2d'); video = document.getElementById('media'); lienzo.translate(483, 0); lienzo.scale(-1, 1); setInterval(procesarCuadros, 33); } function procesarCuadros(){ lienzs.drawImage(video, 0, 0); } addEventListener(\"load\", iniciar); </script> </head> <body> <section> <video id=\"medio\" width=\"483\" height=\"272\" autoplay> <source src=\"http://www.formasterminds.com/content/trailer2.mp4\"> <source src=\"http://www.formasterminds.com/content/trailer2.ogg\"> </video> </section> <section> <canvas id=\"canvas\" width=\"483\" height=\"272\"></canvas> </section> </body> </html> Graficos de tarta <!doctype html> <canvas width=\"600\" height=\"300\"></canvas> <script> var results = [ {name: \"Contento\", count: 1043, color: \"lightblue\"}, {name: \"Neutral\", count: 563, color: \"lightgreen\"}, {name: \"Descontento\", count: 510, color: \"pink\"}, {name: \"No contesta\", count: 175, color: \"silver\"} ]; var cx = document.querySelector(\"canvas\").getContext(\"2d\"); var total = results.reduce(function(sum, choice) { return sum + choice.count; }, 0); var currentAngle = -0.5 * Math.PI; var centerX = 300, centerY = 150; results.forEach(function(result) { var sliceAngle = (result.count / total) * 2 * Math.PI; cx.beginPath(); cx.arc(centerX, centerY, 100, currentAngle, currentAngle + sliceAngle); var middleAngle = currentAngle + 0.5 * sliceAngle; var textX = Math.cos(middleAngle) * 120 + centerX; var textY = Math.sin(middleAngle) * 120 + centerY; cx.textBaseLine = \"middle\"; if (Math.cos(middleAngle) > 0) cx.textAlign = \"left\"; else cx.textAlign = \"right\"; cx.font = \"15px sans-serif\"; cx.fillStyle = \"black\"; cx.fillText(result.name, textX, textY); currentAngle += sliceAngle; cx.lineTo(centerX, centerY); cx.fillStyle = result.color; cx.fill(); }); </script>","title":"Javascript APIs"},{"location":"javascript-apis/#javascript-apis","text":"Para ver si un navegador tiene una funcionalidad if (navigator.geolocation) { // codigo } else { // codigo } Modernizr puede ayudar if (Modernizr.awesomeNewFeature) { showOffAwesomeNewFeature(); } else { getTheOldLameExperience(); }","title":"JAVASCRIPT APIs"},{"location":"javascript-apis/#libreria-standard","text":"","title":"LIBRERIA STANDARD"},{"location":"javascript-apis/#math","text":"Math es un Objeto Global que actua sobre numeros Propiedades Math.PI - Devuelve pi 3.14159265359 Math.E - constante de Euler Math.LN2 - logaritmo natural de 2 Math.LN10 - logaritmo natural de 10 Math.LOG2E - logaritmo en base 2 de e Math.LOG10E - logaritmo en base 10 de e Math.SQRT1_2 - raiz cuadrada de medio (1/2) Math.SQRT2 - raiz cuadrada de 2 Metodos Math.abs(num) - Devuelve el valor absoluto de num Math.round(num) - Redondea num al entero mas cercano Math.sqrt(num) - Devuelve la raiz cuadrada del numero positivo num Math.ceil(num) - Redondea al entero mas cercano por arriba Math.floor(num) - Redondea al entero mas cercano por abajo Math.random() - Genera un numero aleatorio entre 0 (inclusivo) y 1 (no inclusivo) Math.pow(num, pot) - Devuelve num elevado a la pot Math.max(num1, num2, num3) - devuelve el mayor numero Math.min(num1, num2, num3) - devuelve el menor numero Math.acos(x) - Math.asin(x) - Math.atan(x) - Math.atan2(x) - Math.cos(x) - Math.sin(x) - Math.tan(x) - // Crea un numero aleatorio entre min y max ambos inclusivo Math.floor(Math.random() * (max - min + 1) + min);","title":"Math"},{"location":"javascript-apis/#date","text":"Crear Objeto Date var d = new Date(); var d = new Date(millis); var d = new Date(dateString); var d = new Date(year, month, day, hours, minutes, seconds, millis); Metodos Date.now() - devuelve el numero de Milisegundos desde el 1 ene 1970 Date.parse() - parsea la fecha y devuelve el numero de Milisegundos desde el 1 ene 1970 .getDate() , .setDate() - Dia del mes (1-31) .getDay() - Dia de la semana (0-6) .getFullYear() , .setFullYear() - a\u00f1o (4 digitos) .getHours() , .setHours() - Hora (0-23) .getMilliseconds() , .setMilliseconds() - Milisegundos (0-999) .getMinutes() , .setMinutes() - Minutos (0-59) .getMonth() , .setMonth() - Mes (0-11) .getSeconds() , .setSeconds() - Segundos (0-59) .getTime() , .setTime() - Milisegundos desde 1 Enero 1970 00:00:00 y negativo para cualquier tiempo anterior a esa fecha .getTimezoneOffset() - Minutos de diferencia horaria entre UTC y la hora local Version para UTC .getUTCDate() , .setUTCDate() - Dia del mes (1-31) .toDateString() - Fecha del tipo Mon Jan 17 1982 .toTimeString() - Hora del tipo 19:45:15 GMT+0300 (CEST) .toString() - Devuelve una string con la fecha especificada .toISOString() - Devuelve una string con la fecha especificada usando el standard ISO .date.toJSON() - Devuelve una string con la fecha especificada formateado en JSON. .toLocaleDateString() - Devuelve una string con la fecha especificada usando las convenciones segun la hora local .toLocaleTimeString() - Devuelve una string con la fecha especificada usando las convenciones segun la hora local .toLocaleString() - Devuelve una string con la fecha especificada usando las convenciones segun la hora local .toUTCString() - Devuelve una string con la fecha especificada segun la hora universal .valueOf() - Devuelve el valor primitico de un objeto Date","title":"Date"},{"location":"javascript-apis/#json","text":"JSON.stringify JSON.stringify(value, replacer?, space?) convierte el valor value a una cadena en formato JSON. replacer es opcional y se usa para cambiar value antes de stringify function replacer(key, value) { if (typeof value === 'number') { value = 2 * value; } return value; } JSON.stringify({ a: 5, b: [ 2, 8 ] }, replacer) // '{\"a\":10,\"b\":[4,16]} JSON.parse JSON.parse(text, reviver?) convierte los datos JSON en text y devuelve un valor javascript reviver es opcional y se puede usar para transformar los datos ya parseados","title":"JSON"},{"location":"javascript-apis/#strict-mode","text":"Variables han de ser definidas explicitamente No se puede borrar una variable u objeto usando delete No se puede definir la misma propiedad dos veces No permite los nombres de parametros duplicados En una funcion si no se conoce this en lugar de usar el objeto global window sera undefined Las variables instanciadas dentro del contexto de eval() s\u00f3lo son v\u00e1lidas en ese contexto. La sentencia with(){} ya no se usa js Envolvemos todo la parte del codigo js en una IIFEs (function() { 'use strict'; /* code here */ .. codigo }()); node.js a\u00f1adimos al comienzo del archivo /*jslint node: true */ 'use strict';","title":"STRICT MODE"},{"location":"javascript-apis/#web-storage","text":"","title":"WEB STORAGE"},{"location":"javascript-apis/#objeto-storage","text":"Los navegadores guardan sobre 8mb por dominio en un objecto storage Los datos se guardan como propiedades (clave/calor) del objeto storage Acceso a los datos se hace de manera sincrona Los navegadores usan politica del mismo origen, vamos que los datos solo son accesibles por otras paginas del mismo dominio Para ello las 4 partes del URL deben coincidir Protocolo \u00a1 ojo que https es distinto a http ! Subdominio, maps.google.com no puede acceder a datos guardados de www.google.com Dominio debe coincidir Puerto, este tambien debe coincidr Propiedades .length - numero de claves Metodos .setItem('clave', 'valor') - Crea una nueva pareja clave/valor .getItem('clave') - Devuelve el valor de la clave \"clave\" .removeItem('clave') - Elimina la clave/valor para esa clave .clear() - Limpia toda la informacion del objeto storage sessionStorage Cambios frecuentes cada vez que el usuario visita el sitio, (datos de localizacion, logueos) Es personal y privado, no debe ser visto por otros usuarios del dispositivo localStorage Solo cambia en los intervalos establecidos (horarios, listas de precios) y es util almacenarlo offline Cosas que el usuario use de nuevo si vuelve al sitio (guardar preferencias y ajustes) localStorage.setItem(\"username\", \"marijn\"); console.log(localStorage.getItem(\"username\")); // \u2192 marijn localStorage.removeItem(\"username\"); Un valor en localStorage dura hasta que se sobreescribe, se elimina o el usuario limpia sus datos locales Cada pagina tiene su propio almacen que solo puede interactuar con scripts de la misma pagina Ejemplo var basicRecipes = [{ title: 'Cookies', ingredients: ['Cup shortening', 'Peanut Butter', 'Milk', 'Eggs'] }, { title: 'Spaghetti', ingredients: ['Noodles', 'Tomato Sauce', 'Meatballs', 'Onion'] }, { title: 'Rice Pudding', ingredients: ['White Rice', 'Milk', 'Sugar', 'Salt'] }]; // Estas dos hacen lo mismo localStorage.setItem('basicRecipes', JSON.stringify(basicRecipes)); localStorage.basicRecipes = JSON.stringify(basicRecipes); // Dos formas de hacer lo mismo tambien var sol = JSON.parse(localStorage.getItem('basicRecipes')); console.log(sol[0].title); console.log((JSON.parse(localStorage.basicRecipes))[0]); // Esto borra toda la localStorage localStorage.clear()","title":"Objeto Storage"},{"location":"javascript-apis/#indexeddb","text":"","title":"IndexedDB"},{"location":"javascript-apis/#web-sql","text":"Deprecada, pero aun se usa No funciona ni en chrome ni en IE","title":"Web SQL"},{"location":"javascript-apis/#geolocation","text":"Metodos objeto navigation.geolocation getCurrentPosition(exito, error, conf) - exito - funcion para procesar la ubicacion recibida en el objeto Position error -funcion para procesar los errores retornados en el objeto PositionError conf - objeto para configurar como la informacion sera adquirida watchPosition(exito, error, conf) - igual que el anterior excepto que inicia un proceso de vigilancia para detectar nuevas ubicaciones que nos enviara cada cierto tiempo clearWatch(id) - El metodo watchPosition() retorna un valor que puede ser almacenado en una variable para luego ser usado como id aqui y detener la vigilancia Propiedades objeto Position .coords.latitude - Devuelve latitud en grados decimales .coords.longitude - Devuelve longitud en grados decimales .coords.accuracy - Precision de latitud y longitud en metros .coords.altitude - Devuelve metros sobre el nivel del mar .coords.altitudeAccuracy - Precision de la altitud en metros .coords.heading - Devuelve grados respecto al norte .coords.speed - Devuelve velocidad en m/s .coords.timestamp - Devuelve tiempo desde que se creo (en forma de Date ) Propiedades objeto PositionError PositionError.code - Devuelve un numero de error con los valores: Permiso denegado No disponeble Ha expirado el tiempo PositionError.message - Devuelve un mensaje (pero no para el usuario) var elMap = document.getElementById('loc'); var msg = 'Sorry, we were unable to get your location.'; if (Modernizr.geolocation) { navigator.geolocation.getCurrentPosition(success, fail); elMap.textContent = 'Checking location...'; } else { elMap.textContent = msg; } function success(position) { msg = '<h3>Longitude: '; msg += position.coords.longitude + '</h3>'; msg += '<h3>Latitude: '; msg += position.coords.latitude + '</h3>'; elMap.innerHTML = msg; } function fail(msg) { elMap.textContent = msg; console.log(msg.code); }","title":"GEOLOCATION"},{"location":"javascript-apis/#history","text":"","title":"HISTORY"},{"location":"javascript-apis/#objeto-history","text":"Propiedades .length - numero de articulos en el objeto historia Metodos history.back() - Retrocedes en la historia a la anterior posicion history.forward() - Saltas adelante a la siguiente posicion history.go(n) - Te lleva a la pagina n respecto de tu posicion que es la 0. Por ejemplo -2 echa dos para atras y 1 salta uno hacia adelante history.pushState() - A\u00f1ade un elemento a la historia history.replaceState() - Cambia el actual elemento de la historia por el que pasamos ahora Eventos window.onpopstate - Usado para manejar los movimientos de usuario de adelante atras","title":"Objeto history"},{"location":"javascript-apis/#google-maps","text":"","title":"GOOGLE MAPS"},{"location":"javascript-apis/#api-key","text":"Se consigue aqui","title":"API Key"},{"location":"javascript-apis/#ajustes","text":"Crear un mapa El evento onload llama a la funcion loadScript() LoadScript() crea un elemento <script> que carga la API y cuando se carga llama a init() que inicializa el mapa init() carga el mapa en la pagina. Primero crea un objeto mapOptions con propiedades Luego usa el contructor Map() para crear el map y dibujarlo en la pagina. El contructor tiene dos paremetros el elemento dentro del cual el mapa aparecera dentro el objeto mapOption zoom - Entre 0 (el mundo entero) y 16 mapTypeId - ROADMAP, SATELLITE, HYBRID, TERRAIN function init() { var mapOptions = { // Set up the map options center: new google.maps.LatLng(40.782710,-73.965310), mapTypeId: google.maps.MapTypeId.ROADMAP, zoom: 13 }; var venueMap; // Map() draws a map venueMap = new google.maps.Map(document.getElementById('map'), mapOptions); } function loadScript() { var script = document.createElement('script'); script.src = 'http://maps.googleapis.com/maps/api/js?sensor=false& callback=init'; document.body.appendChild(script); } window.onload = loadScript; Cambiar los controles function init() { var mapOptions = { zoom: 14, center: new google.maps.LatLng(40.782710,-73.965310), mapTypeId: google.maps.MapTypeId.ROADMAP, panControl: false, zoomControl: true, zoomControlOptions: { style: google.maps.ZoomControlStyle.SMALL, position: google.maps.ControlPosition.TOP_RIGHT }, mapTypeControl: true, mapTypeControlOptions: { style: google.maps.MapTypeControlStyle.DROPDOWN_MENU, position: google.maps.ControlPosition.TOP_LEFT }, scaleControl: true, scaleControlOptions: { position: google.maps.ControlPosition.TOP_CENTER }, streetViewControl: false, overviewMapControl: false }; var venueMap = new google.maps.Map(document.getElementById('map'), mapOptions); } function loadScript() { var script = document.createElement('script'); script.src = 'http://maps.googleapis.com/maps/api/js?sensor=false &callback=init'; document.body.appendChild(script); } window.onload = loadScript; A\u00f1adir marcadores var pinlocation = new google.maps.Latlng(40.782710,-73.965310); var startPosition = new google.maps.Marker({ // Create marker position: pinLocation, // Set position map: venueMap, // Specify the map icon: \"img/go.png\" // Path to image });","title":"Ajustes"},{"location":"javascript-apis/#canvas","text":"","title":"CANVAS"},{"location":"javascript-apis/#graficos-para-la-web","text":"<canvas> - Crea el lienzo para dibujar <body> <section id=\"cajacanvas\"> <canvas id=\"canvas\" width=\"500\" height=\"300\"></canvas> </section> </body> .getContext(opcion) - Genera un contexto de dibujo que se asigna al lienzo. opcion puede ser \"2d\" o \"webGL\" function iniciar(){ var elem = document.getElementById('lienzo'); var lienzo = elem.getContext('2d'); // Aqui los distintos ejemplos posteriores } addEventListener(\"load\", iniciar);","title":"Graficos para la web"},{"location":"javascript-apis/#dibujar","text":"function iniciar(){ var elemento=document.getElementById('lienzo'); lienzo=elemento.getContext('2d'); // codigo para dibujar y hacer cosas } window.addEventListener(\"load\", iniciar, false) Rectangulos Metodos fillRect(x,y,ancho,alto) - Dibuja un rectangulo solido. La esquina superior izquierda esta en x,y. Ancho y alto definen el tama\u00f1o del rectangulo strokeRect(x,y,ancho,alto) - Como el anterior pero solo dibuja el contorno clearRect(x,y,ancho,alto) - Es un borrador rectangular lienzo.strokeRect(100,100,120,120); lienzo.fillRect(110,110,100,100); lienzo.clearRect(120,120,80,80); Color Propiedades strokeStyle - color para el contorno de la figura fillStyle - color para el interior de la figura globalAlpha - especifica la transfercnia para todas las figuras dibujadas en el lienzo lienzo.fillStyle = \"#000099\"; lienzo.strokeStyle = \"#990000\"; lienzo.strokeStyrl = \"rgba(255, 165, 0, 1)\" lienzo.globalAlpha = 0.5 // (0 opaco, 1 transparente) Degradados Metodos createLinearGradient(x1,y1,x2,y2) - Crea un objeto que luego sera usado para aplicar un gradiente lineal al lienzo createRadialGradient(x1,y1,r1,x2,y2,r2) - Crea un objeto que luego ser\u00e1 usado para aplicar un gradiente circular o radial al lienzo usando dos c\u00edrculos. Los valores representan la posici\u00f3n del centro de cada c\u00edrculo y sus radios addColorStop(posicion,color) - Posici\u00f3n es un valor entre 0 y 1 que determina d\u00f3nde la degradaci\u00f3n comenzar\u00e1 para ese color en particular. Color especifica los colores que usaran los gradientes var gradiente = lienzo.createLinearGradient(0, 0, 10, 100); gradiente.addColorStop(0.5, '#0000FF'); gradiente.addColorStop(1, '#000000'); lienzo.fillStyle = gradiente; Crear Trazados Lo normal es procesar figuras en segundo plano y una vez hecho enviarlas al contexto a ser dibujadas. Un trazado es como un mapa a ser seguido por el lapiz. Puede incluir diferentes tipos de l\u00edneas, como l\u00edneas rectas, arcos, rect\u00e1ngulos ... para crear figuras complejas Metodos para comenzar y cerrar el trazado beginPath() - Describe el comienzo de una nueva figura. Se llama primero, antes de comenzar a crear el trazado closePath() - Cierra el trazado generando una linea recta desde el ultimo punto hasta el punto de origen. Se puede ignorar cuando usamos el metodo fill() para dibujar el trazado en el lienzo Metodos para dibujar el trazado en el lienzo stroke() - dibuja el trazado de una figura vacia (solo el contorno) fill() - dibuja el trazado de una figura solida clip() - declara una nueva area de corte para el contexto. Al inicializar el contexto el area de corte es el area completa ocupada por el lienzo. clip() cambia esa area a una nueva forma creando una mascara. Todo lo que este fuera de esa mascara no sera dibujado lienzo.beginPath(); // aqu\u00ed va el trazado lienzo.stroke(); Metodos para crear el trazado moveTo(x,y) - mueve el lapiz a una posicion para continuar con el trazado lineTo(x,y) - genera linea recta desde la posicion actual hasta la nueva x,y rect(x,y,ancho,alto) - genera un texangulo que forma parte del trazado arc(x,y,radio,anguloInicio,anguloFinal,direccion) - genera un arco o circulo en la posicion x,y con radio y desde un anguloInicio hasta anguloFinal. La direccion false a favor de las agujas del reloj, true en contra quadraticCurve(cpx,cpy,x,y) - genera una curva cuadratica bezier desde la posicion actual hasta las posicion x,y. cpx y cpy indican el punto que dara forma a la curva bezierCurve(cp1x,cp1y,cp2x,cp2y,x,y) - como el anterior pero genera una curva bezier cubica con dos puntos para moldear la curva lienzo.beginPath(); lienzo.moveTo(100,100); lienzo.lineTo(200,200); lienzo.lineTo(100,200); // Opcion 1 lienzo.closePath(); lienzo.stroke(); // Opcion 2 lienzo.fill(); // circulos con arc() lienzo.arc(100,100,50,0,Math.PI*2, false); // arco de 45 grados var radianes=Math.PI/180*45; lienzo.arc(100,100,50,0,radianes, false); Estilos de linea Propiedades afectan al trazado completo. para cambia las caracteristicas de las lineas hay que crear un nuevo trazado lineWidth - Determina el grosor de la linea, por defecto = 1 lineCap - Determina la forma de la terminacion de la linea butt , round \u00f3 square lineJoin - Forma de la conexion entre dos lineas, round , bevel \u00f3 miter miterLimit - Determina cuanto la conexion de dos lineas sera extendida cuando lineJoin=\"miter\" lienzo.beginPath(); lienzo.arc(200,150,50,0,Math.PI*2, false); lienzo.stroke(); lienzo.lineWidth=10; lienzo.lineCap=\"round\"; lienzo.beginPath(); lienzo.moveTo(230,150); lienzo.arc(200,150,30,0,Math.PI, false); lienzo.stroke(); lienzo.lineWidth=5; lienzo.lineJoin=\"miter\"; lienzo.beginPath(); lienzo.moveTo(195,135); lienzo.lineTo(215,155); lienzo.lineTo(195,155); lienzo.stroke(); Texto Propiedades font - similar a font de CSS y acepta los mismos valores textAlign - Alinea el texto, start , end , left , right , y center textBaseline -Alineamiento vertical, top , hanging , middle , alphabetic , ideographic , y bottom Metodos strokeText(texto,x,y,opcional) - Dibuja el texto en la posicion x,y como una figura vacia(solo contornos). opcional declara el tama\u00f1o maximo,si el texto es mas extenso se encogera fillText(texto,x,y) - Igual que el anterior pero el texto sera solido measureText(texto,x,y) - Retorna informacion sobre el tama\u00f1o de un texto especifico. Util para combinar texto con otras formas y calcular posiciones o colisiones lienzo.font=\"bold 24px verdana, sans-serif\"; lienzo.textAlign=\"start\"; lienzo.fillText(\"Mi mensaje\", 100,100); lienzo.font=\"bold 24px verdana, sans-serif\"; lienzo.textAlign=\"start\"; lienzo.textBaseline=\"bottom\"; lienzo.fillText(\"Mi mensaje\", 100,124); var tamano=lienzo.measureText(\"Mi mensaje\"); lienzo.strokeRect(100,100,tamano.width,24); Sombras Propiedades shadowColor - Color de la sombra usando sintaxis CSS shadowOffsetX - Recibe un numero que indica cuan lejos esta la sombra del objeto en direccion horizontal shadowOffsetY - Recibe un numero que indica cuan lejos esta la sombra del objeto en direccion vertical shadowBlur - Produce efecto de difuminacion para la sombra lienzo.shadowColor=\"rgba(0,0,0,0.5)\"; lienzo.shadowOffsetX=4; lienzo.shadowOffsetY=4; lienzo.shadowBlur=5; lienzo.font=\"bold 50px verdana, sans-serif\"; lienzo.fillText(\"Mi mensaje \", 100,100); Transformaciones translate(x,y) - Mueve el origen del lienzo rotate(angulo) - Rota el lienzo alrededor del origen tantos angulos scale(x,y) - Incrementa o disminuye las unidades de la grilla para reducir o ampliar todo lo dibujado. La escala se puede cambiar solo en un eje. Por defecto valor=1 transform(m1,m2,m3,m4,dx,dy) - El lienzo tiene una matriz de valores, esto aplica una nueva matriz sobre la actual para modificar el lienzo setTransform(m1,m2,m3,m4,dx,dy) - Reinicializa la matriz de transformacion y establece una nueva con estos valores // Moviendo, rotando y escalando. lienzo.fillText(\"PRUEBA\",50,20); lienzo.translate(50,70); lienzo.rotate(Math.PI/180*45); lienzo.fillText(\"PRUEBA\",0,0); lienzo.rotate(-Math.PI/180*45); lienzo.translate(0,100); lienzo.scale(2,2); lienzo.fillText(\"PRUEBA\",0,0); // Transformaciones acumulativas sobre la matriz. lienzo.transform(3,0,0,1,0,0); lienzo.font=\"bold 20px verdana, sans-serif\"; lienzo.fillText(\"PRUEBA\",20,20); lienzo.transform(1,0,0,10,0,0); lienzo.font=\"bold 20px verdana, sans-serif\"; lienzo.fillText(\"PRUEBA\",100,20); Restaurar el estado Metodos save() - graba es estado del lienzo restore() - recupera el ultimo estado grabado // Grabando el estado del lienzo. lienzo.save(); lienzo.translate(50,70); lienzo.font=\"bold 20px verdana, sans-serif\"; lienzo.fillText(\"PRUEBA1\",0,30); lienzo.restore(); lienzo.fillText(\"PRUEBA2\",0,30); globalCompositeOperation Determina como una figura es poscionada y combinada con figuras ya dibujadas en el lienzo Valores de la propiedad source-over - POR DEFECTO - la nueva figura sera dibujada sobre las existentes source-in - Solo la parte de la nueva figura que se sobrepone a las figuras previas es dibujada. El resto de la figura, e incluso el resto de las figuras previas, se vuelven transparentes. source-out - Solo la parte de la nueva figura que no se sobrepone a las figuras previas es dibujada. El resto de la figura, e incluso el resto de las figuras previas, se vuelven transparentes. source-atop - Solo la parte de la nueva figura que se superpone con las figuras previas es dibujada. Las figuras previas son preservadas, pero el resto de la nueva figura se vuelve transparente. lighter - Ambas figuras son dibujadas (nueva y vieja), pero el color de las partes que se superponen es obtenido adicionando los valores de los colores de cada figura. xor - Ambas figuras son dibujadas (nueva y vieja), pero las partes que se superponen se vuelven transparentes. destination-over - Este es el opuesto del valor por defecto. Las nuevas figuras son dibujadas detr\u00e1s de las viejas que ya se encuentran en el lienzo. destination-in - Las partes de las figuras existentes en el lienzo que se superponen con la nueva figura son preservadas. El resto, incluyendo la nueva figura, se vuelven transparentes destination-out - Las partes de las figuras existentes en el lienzo que no se superponen con la nueva figura son preservadas. El resto, incluyendo la nueva figura, se vuelven transparentes. destination-atop - Las figuras existentes y la nueva son preservadas solo en la parte en la que se superponen. darker - Ambas figuras son dibujadas, pero el color de las partes que se superponen es determinado substrayendo los valores de los colores de cada figura. copy - Solo la nueva figura es dibujada. Las ya existentes se vuelven transparentes. // robando la propiedad globalCompositeOperation lienzo.fillStyle=\"#990000\"; lienzo.fillRect(100,100,300,100); lienzo.globalCompositeOperation=\"destination-atop\"; lienzo.fillStyle=\"#AAAAFF\"; lienzo.font=\"bold 80px verdana, sans-serif\"; lienzo.textAlign=\"center\"; lienzo.textBaseline=\"middle\"; lienzo.fillText(\"PRUEBA\",250,110);","title":"Dibujar"},{"location":"javascript-apis/#procesar-imagenes","text":"drawImage() Permite dibujar una imagen en el lienzo drawImage(imagen,x,y) - Dibuja una imagen en el lienzo en la posicion x,y. La imagen puede ser una referencia a un elemento <img> <video> u otro <canvas> drawImage(imagen,x,y,ancho,alto) - Como antes pero permite escalar la imagen drawImage(imagen,x1,y1,ancho1,alto1,x2,y2,ancho2,alto2) - Los valores ..1 definen la parte de la imagen que sera cortada mientras que los valores ..2 indican el lugar donde sera insertado en el lienzo y su nuevo tama\u00f1o var img = document.createElement('img'); img.setAttribute('src', 'http://www.formasterminds.com/snow.jpg'); img.addEventListener(\"load\", function(){ lienzo.drawImage(img, 20, 20); // Otra opcion: Ajustando la imagen al tama\u00f1o del lienzo lienzo.drawImage(img, 0, 0, elem.width, elem.height); }); Datos de imagen Toda imagen puede ser representada por una sucesi\u00f3n de n\u00fameros enteros representando valores rgba Un grupo de valores con esta informaci\u00f3n resultar\u00e1 en un array unidimensional que puede ser usado luego para generar una imagen. Metodos getImageData(x,y,ancho,alto) - toma un rectangulo del lienzo y lo convierte en datos. Retorna un objeto con propiedades width , height y data putImageData(datosImagen,x,y) - convierte los datos de datosImagen en una imagen y la dibujan en el lienzo en la posicion x,y createImageData((ancho,alto)|datos) - Crea datos para representar una imagen vacia. Todos los pixeles son negro transparente. Tambien puede recibir datos como atributo en lugar de ancho,alto img = document.createElement('img'); img.setAttribute('src', 'snow.jpg'); img.addEventListener(\"load\", modimagen); function modimagen(){ lienzo.drawImage(img, 0, 0); var info = lienzo.getImageData(0, 0, 175, 262); var pos; for(var x = 0; x < 175; x++){ for(var y = 0; y < 262; y++){ pos = (info.width * 4 * y) + (x * 4); info.data[pos] = 255 - info.data[pos]; info.data[pos+1] = 255 - info.data[pos+1]; info.data[pos+2] = 255 - info.data[pos+2]; } } lienzo.putImageData(info, 0, 0); } cross-origin setAttribute(\"crossOrigin\",\"anonymous|use-credentials\") - anonymous hace caso omiso de las credenciales y use-credentials requiere credenciales imagen.setAttribute(\"crossOrigin\",\"anonymous|use-credentials\"); Extraccion de datos Metodos toDataURL(image/jpeg|image/png) - Devuelve los datos en formato data:url del contenido del lienzo a una resolucion de 96 ppp toDataURL - Como la anterior pera la resolucion es la original del lienzo toBlob(funcion,image/jpeg|image/png) - Devuelve un objeto con un blob(datos en crudo) que contiene la representacion del lienzo en el formato elegido y resolucion de 96 ppp. La funcion es la encargada de procesar el objeto. toBlobHD(tipo) - Como el anterior pero la resolucion del blob es la del lienzo original Patrones Los patrones son simples adiciones que pueden mejorar nuestros trazados. createPattern(imagen,tipo) - im\u00e1gen es una referencia a la imagen que vamos a usar como patr\u00f3n, y tipo configura el patr\u00f3n por medio de cuatro valores: repeat, repeat-x, repeat-y y no-repeat img = document.createElement('img'); const imageUrl = 'http://www.formasterminds.com/content/bricks.jpg'; img.setAttribute('src', imageUrl); img.addEventListener(\"load\", modimagen); } function modimagen(){ var pattern = lienzo.createPattern(img, 'repeat'); lienzo.fillStyle = pattern; lienzo.fillRect(0, 0, 500, 300); }","title":"Procesar imagenes"},{"location":"javascript-apis/#animaciones","text":"B\u00e1sicamente, debemos borrar el \u00e1rea del lienzo que queremos animar, dibujar las figuras y repetir el proceso una y otra vez. Es mejor usar imagenes (png) que figuras con trazados complejos Elementales // Dos ojos que miran al puntero del raton y lo siguen var lienzo; function iniciar(){ var elem = document.getElementById('lienzo'); lienzo = elem.getContext('2d'); addEventListener('mousemove', animar); } function animar(e){ lienzo.clearRect(0, 0, 300, 500); var xraton = e.clientX; var yraton = e.clientY; var xcentro = 220; var ycentro = 150; var ang = Math.atan2(xraton - xcentro, yraton - ycentro); var x = xcentro + Math.round(Math.sin(ang) * 10); var y = ycentro + Math.round(Math.cos(ang) * 10); lienzo.beginPath(); lienzo.arc(xcentro, ycentro, 20, 0, Math.PI * 2, false); lienzo.moveTo(xcentro + 70, 150); lienzo.arc(xcentro + 50, 150, 20, 0, Math.PI * 2, false); lienzo.stroke(); lienzo.beginPath(); lienzo.moveTo(x + 10, y); lienzo.arc(x, y, 10, 0, Math.PI * 2, false); lienzo.moveTo(x + 60, y); lienzo.arc(x + 50, y, 10, 0, Math.PI * 2, false); lienzo.fill(); } addEventListener(\"load\", iniciar); Profesionales <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"utf-8\"> <title>VideoJuegos</title> <style> body{ text-align: center; } #cajadelienzo{ margin: 100px auto; } #lienzo{ border: 1px solid #999999; } </style> <script src=\"videojuego.js\"></script> </head> <body> <section id=\"cajadelienzo\"> <canvas id=\"lienzo\" width=\"600\" height=\"400\"></canvas> </section> </body> </html> requestAnimationFrame(funcion) - Sincroniza la animacion con la ventana del navegador y el monitor. hay que llamarlo para cada ciclo del bucle cancelAnimationFrame(variable) - Podemos asignar el valor de arriba a una variable y con ese metodo cancelamos el proceso Hay que concentrar el codigo del juego en un objeto global unico var onoff; function gameLoop() { // haces lo que sea onoff = requestAnimationFrame(gameLoop); } // en otro sitio para parar el bucle cancelAnimationFrame(onoff); function gameLoop () { setTimeout(function () { if (running) { update(); render(); } onoff = requestAnimationFrame(gameLoop); // console.log('gameLoop sigue ... ', onoff) if (cancel) { cancelAnimationFrame(onoff); setScoreToZeros(); } }, 1000 / fps); } var mijuego = { lienzo: { ctx: '', offsetx: 0, offsety: 0 }, nave: { x: 300, y: 200, movex: 0, movey: 0, speed: 1 }, iniciar: function(){ var elem = document.getElementById('lienzo'); mijuego.lienzo.ctx = elem.getContext('2d'); mijuego.lienzo.offsetx = elem.offsetLeft; mijuego.lienzo.offsety = elem.offsetTop; document.addEventListener('click', function(e){ mijuego.control(e); }); mijuego.bucle(); }, bucle: function(){ if(mijuego.nave.speed){ mijuego.procesar(); mijuego.detectar(); mijuego.dibujar(); // requestAnimationFrame(function(){ mijuego.bucle() }); webkitRequestAnimationFrame(function(){ mijuego.bucle() }); }else{ mijuego.lienzo.ctx.font = \"bold 36px verdana, sans-serif\"; mijuego.lienzo.ctx.fillText('JUEGO FINALIZADO', 112, 210); } }, control: function(e){ var distancex = e.clientX - (mijuego.lienzo.offsetx + mijuego.nave.x); var distancey = e.clientY - (mijuego.lienzo.offsety + mijuego.nave.y); var ang = Math.atan2(distancex, distancey); mijuego.nave.movex = Math.sin(ang); mijuego.nave.movey = Math.cos(ang); mijuego.nave.speed += 1; }, dibujar: function(){ mijuego.lienzo.ctx.clearRect(0, 0, 600, 400); mijuego.lienzo.ctx.beginPath(); mijuego.lienzo.ctx.arc(mijuego.nave.x, mijuego.nave.y, 20, 0, Math.PI/180*360, false); mijuego.lienzo.ctx.fill(); }, procesar: function(){ mijuego.nave.x += mijuego.nave.movex * mijuego.nave.speed; mijuego.nave.y += mijuego.nave.movey * mijuego.nave.speed; }, detectar: function(){ if(mijuego.nave.x < 0 || mijuego.nave.x > 600 || mijuego.nave.y < 0 || mijuego.nave.y > 400){ mijuego.nave.speed = 0; } } }; addEventListener('load', function(){ mijuego.iniciar(); });","title":"Animaciones"},{"location":"javascript-apis/#procesar-video","text":"Coger cada cuadro del video desde el elemento <video> y dibujarlo como una imagen en el lienzo usando drawImage() Mostrar video <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"utf-8\"> <title>Video en el Lienzo</title> <style> section{ float: left; } </style> <script> var lienzo, video; function iniciar(){ var elem = document.getElementById('lienzo'); lienzo = elem.getContext('2d'); video = document.getElementById('media'); lienzo.translate(483, 0); lienzo.scale(-1, 1); setInterval(procesarCuadros, 33); } function procesarCuadros(){ lienzs.drawImage(video, 0, 0); } addEventListener(\"load\", iniciar); </script> </head> <body> <section> <video id=\"medio\" width=\"483\" height=\"272\" autoplay> <source src=\"http://www.formasterminds.com/content/trailer2.mp4\"> <source src=\"http://www.formasterminds.com/content/trailer2.ogg\"> </video> </section> <section> <canvas id=\"canvas\" width=\"483\" height=\"272\"></canvas> </section> </body> </html>","title":"Procesar Video"},{"location":"javascript-apis/#graficos-de-tarta","text":"<!doctype html> <canvas width=\"600\" height=\"300\"></canvas> <script> var results = [ {name: \"Contento\", count: 1043, color: \"lightblue\"}, {name: \"Neutral\", count: 563, color: \"lightgreen\"}, {name: \"Descontento\", count: 510, color: \"pink\"}, {name: \"No contesta\", count: 175, color: \"silver\"} ]; var cx = document.querySelector(\"canvas\").getContext(\"2d\"); var total = results.reduce(function(sum, choice) { return sum + choice.count; }, 0); var currentAngle = -0.5 * Math.PI; var centerX = 300, centerY = 150; results.forEach(function(result) { var sliceAngle = (result.count / total) * 2 * Math.PI; cx.beginPath(); cx.arc(centerX, centerY, 100, currentAngle, currentAngle + sliceAngle); var middleAngle = currentAngle + 0.5 * sliceAngle; var textX = Math.cos(middleAngle) * 120 + centerX; var textY = Math.sin(middleAngle) * 120 + centerY; cx.textBaseLine = \"middle\"; if (Math.cos(middleAngle) > 0) cx.textAlign = \"left\"; else cx.textAlign = \"right\"; cx.font = \"15px sans-serif\"; cx.fillStyle = \"black\"; cx.fillText(result.name, textX, textY); currentAngle += sliceAngle; cx.lineTo(centerX, centerY); cx.fillStyle = result.color; cx.fill(); }); </script>","title":"Graficos de tarta"},{"location":"javascript-para-web/","text":"JAVASCRIPT PARA WEB BUILT-IN OBJECTS Document Object Model Document Object Model Browser Object Model El objeto superior es window que representa la ventana o pesta\u00f1a del navegador. Propiedades window.innerHeight - altura (excluding browser chrome/user interface) (px) window.innerWidth - anchura (excluding browser chrome/user interface) (px) window.pageXOffset - Distance document has been scrolled horizontally (px) window.pageYOffset - Distance document has been scrolled vertically (px) window.screenX - Coordenada X, respecto esquina superior-izquierda (px) window.screenY - Coordenada Y, respecto esquina superior-izquierda (px) window.location - URL actual (o ruta local al archivo) window.document - Referencia al objeto documento, usado para representar la pagina actual contenida en windows window.history - Referencia al objeto history de la pesta\u00f1a o ventana del navegador que contiene detalles de las paginas que han sido vistas en esa ventana o pesta\u00f1a window.history.length - numero de historias en el objeto history para esa pesta\u00f1a o ventana del navegador window.screen - Hace referencia al objeto screen del monitor window.screen.width - Anchura de la pantalla del monitor(px) window.screen.height - Altura de la pantalla del monitor (px) Metodos window.a1ert() - Crea una caja de dialogo con mensaje. El usuario debe pinchar OK para cerrarla window.open() - Abre una nueva ventana de navegador cuya URL es la especificada como parametro (no funciona si el navegador tiene bloqueado los pop-up) window.print() - Avisa al navegador que el usuario quiere escribir contenidos de la pagina actual (como si el usuario hubiera pulsado la opcion de imprimir del navegador) Global Javascript Objects Es un grupo de objetos individuales que cada uno hace referencia a una parte del lenguaje javascript String Numero Math Date DOM Hay 3 tecnicas de actualizar contenido HTML document.write() element .innerHTML Manipulacion del DOM Arbol DOM El arbol DOM es una maqueta de una pagina web En la parte superior del arbol esta un nodo documento que representa la pagina entera. Es el punto de arranque para todas las rutas por el arbol DOM. Coincide con el document object Los nodos elemento es lo que se busca en el arbol DOM antes de acceder a los nodes de atributo y texto Para eso estan los metodos que permiten buscar y acceder a nodos elemento Las etiquetas abiertas de los elementos HTML pueden contener atributos que estan representados por nodos atributos en al arbol DOM No son hijos del elemento que los tiene, son parte de ese elemento, por eso hay metodos y propiedades especificas para leer y modificar esos atributos Una vez accedido al nodo elemento puedes coger el texto dentro del elemento que esta contenido en su propio nodo texto Pueden tener hijos pero seran hijos del elemento que los contiene Objeto document El objeto superior es document que representa la pagina como un todo Propiedades document.title - Titulo del documento actual document.lastModified - Fecha de la ultima modificacion del documento actual document.URL - Devuelve una cadena con la URL del documento actual document.domain - Devuelve el dominio del documento actual Metodos document.write() - Escribe texto al documento document.getElementByld() - Devuelve el elemento que coincide con el valor de id que se pasa document.querySe1ectorA11() - Devuelve lista de elementos que coincide con el selector CSS que se pasa como parametro document.createElement() - Crea un nuevo elemento document.createTextNode() - Crea un nuevo nodo de texto Acceder a elementos Seleccionar un elemento document.getElementById(\"name\") - Selecciona el elemento con id=\"name\" document.querySelector(\"h4\") - Selecciona el primer elemento h4 element .parentNode - Toma el padre del elemento actual element .previousSibling - Coge el hermano previo element .nextSibling - Coge el hermano siguiente element .firstChild - Coge el primer hijo del actual elemento element .lastChild - Coge el ultimo hijo del actual elemento \u00a1 OJO ! En estos 5 ultimos con los WhiteSpace Nodes Seleccionar varios elementos : Los metodos devuelven una NodeList document.getElementsByClassName(\"name\") - Selecciona todos los elementos que tienen la clase=\"name\" document.getElementsByTagName(\"li\") - Coge todos los elementos que tienen el tag name=\"li\" document.querySelectorAll(h4) - Selecciona todos los elementos que poseen h4 Trabajar con elementos Propiedades element .nodeValue - Permite acceder al contenido de un nodo texto element .innerHTML - Permite acceder a elementos hijo y contenido de texto y de markup element .textContent - Permite acceder al texto del elemento y de sus hijos element .className - Valor del atributo class element .id - Valor del atributo id element .nodeValue Una vez llegas de un elemento a su nodo texto, este tiene la propiedad nodeValue que te da acceso al valor del texto document.getElementById(\"one\").firstChild.nextSibling.nodeValue; element .textContent Permite acceder al texto del elemento y de sus hijos document.getElementByid(\"one\").textContent; element .innerText NO USAR element .innerHTML var elContent = document.getElementByld('one').innerHTML; // Get // elContent = \"<em>fresh</em> figs\" document.getElementByld('one').innerHTML = elContent; // Set Manipulacion DOM document.createElement() - Crea nodos document.createTextNode() - Crea nodos de texto element .appendChild() - A\u00f1ade nodos element .removeChild() - Elimina nodo element .hasAttribute(n) - Chequea si existe el atributo n element .getAttribute(n) - Consigue el valor del atributo n element .setAttribute(n) - Pone el valor del atributo n element .removeAttribute(n) - Elimina el atributo n Crear nuevo contenido en la pagina document.createElement() - Crea un nuevo nodo elemento y se guarda en una variable document.createTextNode() - Crea un nuevo nodo texto y se guarda en una variable element .appendChild() - Lo a\u00f1ade al arbol DOM como un hijo var newEl = document.createElement(\"li\"); var newText document.createTextNode(\"quinoa\"); newEl.appendChild(newText); // Ahora lo posicionamos donde le corresponda var position = document.getElementsByTagName(\"ul\")[O]; position.appendChild(newEl); Eliminar contenido en la pagina Almacenar el elemento a borrar en una variable Almacenar el padre del elemento a borrar en una variable Eliminar el elemento desde su elemento padre var removeEl = document.getElementsByTagName(\"li\")[3]; var containerEl = removeEl.parentNode; containerEl.removeChild(removeEl); Style Objects Style Objects document.getElementById(\"myH1\").style.color = \"red\"; NodeLists Son collections , parecen arrays y estan numerados como tal pero no lo son Propiedades length - indica cuantos items hay en la NodeList Metodos item(n) - devuelve el item con indice numero n nodeLista[n] - es mas comun esta sintaxis con corchetes var lista = document.getElementsByClassName(\"hot\") if (lista.length >= 1) { var primero = lista.item(0); var primero = lista[0]; } Iteraciones var lista = document.querySelectorAll(\"li.cold\") for (var i = 0; i < lista.lenth; i++) { lista[i].className = \"hot\"; } XSS Atacks Escapar todo el contenido que generan los usuarios Todos los datos introducidos por usuarios deben escaparse en el servidor antes de ser mostrados en la pagina. HTML - Escapar todos estos caracteres para que se muestren como caracteres y no sean procesados como codigo Javascript -No incluir datos de fuentes sin confianza.Escapar todos los caracteres ASCII de valor menor a 256 que no sean caracteres alfanumericos URLs - Si tienes enlaces que datos que han introducido los usuarios usa el metodo encodeURIComponent() para codificar los siguientes caracteres : A\u00f1adir contenido del usuario Javascript: - Usar textContent o innerText - NO usar innerHTML jQuery: - Usar .text() - NO Usar .html() salvo: No permitir al usuario contenido con markup Escapar todo el contenido del usuario y a\u00f1adirlo como texto en lugar de como HTML EVENTOS Las Interacciones del usuario crean Eventos Los Eventos disparan Codigo El Codigo responde a los usuarios (p ej : modificando el DOM) Seleccionar el elemento que queremos tenga un evento Indicar que evento en ese elemento disparara la respuesta Indicar el codigo a ejecutar cuando ocurra el evento Lista Eventos User Interface Events load - La pagina web se ha terminado de cargar function setup() { // Al haber cargado la pagina ya esta el contenido disponible } window.addEventListener('load', setup, false); unload - La pagina web se esta descargando a causa de haber pedido otra beforeunload - Justo antes de que el usuario abandone la pagina error - Navegador encuentra un error de Javascript resize - Navegador se ha redimensionado scroll - Usuario ha hecho scroll hacia arriba o abajo, puede referirse a la pagina entera o a un elemento especifico como por ejemplo textarea Keyboard Events keydown - Pulsar una tecla(se repite mientras la tecla esta presionada) keyup - Soltar una tecla keypress - Mientras se inserta el caracter (se repite mientras la tecla esta presionada) Mouse Events click - Pulsar y soltar un boton sobre el mismo elemento dblclick - Pulsar y soltar un boton dos veces sobre el mismo elemento mousedown - Pulsar un bot\u00f3n del rat\u00f3n mientras esta sobre un elemento mouseup - Soltar un bot\u00f3n del rat\u00f3n mientras esta sobre un elemento mousemove - Mover el raton mouseover - Mover el raton por encima de un elemento mouseout - Mover el raton fuera de un elemento Focus Events focus , focusin - EL elemento gana el foco blur , focusout - EL elemento pierde el foco Form Events input - Cambia el valor de cualquier <input> , <textarea> o elemento con el atributo contenteditable change - Cambia el valor en un select box , checkbox o radio button submit - Al enviar un formulario (usando un boton o una tecla) reset - Usuario pincha un boton de resetear formulario (Muy raro verlo) cut - Usuario corta contenido de un campo del formulario copy - Usuario copia contenido de un campo del formulario paste - Usuario pega contenido a un campo del formulario select - Usuario selecciona algo de texto en un campo de formulario Mutation Events : Ocurren cuando la estructura DOM cambia por un script DOMSubtreeModified - Cambio affecta al documento DOMNodeInserted - Se ha insertado un nodo como hijo de otro nodo DOMNodeRemoved - Se ha eliminado un nodo desde otro nodo DOMNodeInsertedIntoDocument - Se ha insertado un nodo como descendiente de otro nodo DOMNodeRemovedFromDocument - Se ha eliminado un nodo como descendiente de otro nodo HTML5 Events DOMContentLoaded - Salta cuando el arbol DOM (toda la estructura HTML) ya esta cargada) a diferencia de load que salta cuando todo el HTML y sus recursos (imagenes, iframes, scripts, css) se han cargado. Asi la pagina parece que es mas rapida de cargar. Se asigna al document o al window hashchange - Salta cuando hay cambios en la URL a partir del ancla #. Funciona sobre el objeto window y despues de saltar el objeto event tendra dos propiedades oldURL , newURL beforeunload - Salta en el objeto windows antes de tirar la pagina. Es el que usan para molestar diciendo si estas seguro de querer abandonar la pagina Manejadores Eventos HTML Event Handlers NO USAR <form method=\"post\" action=\"http://www.example.org/register\"> <label for=\"username\">Create a username: </label> <input type=\"text\" id=\"username\" onblur=\"checkUsername()\" /> <div id=\"feedback\"></div> <label for=\"password\">Create a password: </label> <input type=\"password\" id=\"password\" /> <input type=\"submit\" value=\"sign up!\" /> </form> function checkUsername() { var elMsg = document.getElementById('feedback'); var elUsername = document.getElementById('username'); if (elUsername.value.length < 5) { elMsg.textContent = 'Username must be 5 characters or more'; } else { elMsg.textContent = ''; } } Traditional DOM Event Handlers La pega es que solo puedes vincular una funcion a un evento element .on event = functionName ; function checkUsername() { // codigo que sea } var el = document.getElementByld(\"username\") ; el.onblur = checkUsername; Event Listeners (DOM level 2 ) USAR Permite que un solo evento dispare varios scripts Event Listener Concepto Ejemplo function checkUsername() { // codigo que sea } var el = document.getElementByld(\"username\") ; el.addEventListener(\"blur\", checkUsername, false); Usando Parametros var elUsername = document.getElementById('username'); var elMsg = document.getElementById('feedback'); function checkUsername(minLength) { if (elUsername.value.length < minLength) { elMsg.innerHTML = 'Username must be ' + minLength + ' chars or more'; } else { elMsg.innerHTML = ''; } } elUsername.addEventListener('blur', function() { checkUsername(5); }, false); var button = document.querySelector(\"button\"); button.addEventListener(\"mousedown\", function(event) { if (event.which == 1) console.log(\"Left button\"); else if (event.which == 2) console.log(\"Middle button\"); else if (event.which == 3) console.log(\"Right button\"); }); Event FLow Describe el orden en el que los eventos se procesan Propagacion : Los eventos registrados en nodos con hijos reciben algunos eventos que ocurren en los hijos. Si pulsamos un buton dentro de un parrafo los manejadores de evento del parrafo tambien recibiran el evento click. Si los dos tienen el evento el manejador mas especifico (el mas interno) va primero bubbling - el evento se captura y maneja primero por el elemento mas interno y despues de propaga hacua los elementos exteriores Capturing - el evento se captura primero por el elemento mas externo y se propaga hacia los elementos internos Objeto Event Propiedades target - Objetivo del evento type - Tipo de evento que se ha disparado cancelable - Si se puede cancelar el comportamiento predeterminado de un elemento screenX , screenY - Coordenada de la posicion del cursor respecto del monitor pageX , pageY - Coordenada de la posicion del cursor respecto de la pagina clientX , clientY - Coordenada de la posicion del cursor respecto del navegador Metodos preventDefault() - Cancela el comportamiento por defecto del evento (si es posible) stopPropagation() - Detiene la propagacion del evento por bubbling o capturing Event listener sin parametros La referencia al objeto event se pasa automaticamente aunque en la funcion debe nombrarse (lo normal es e para event ) function checkUsername(e) { var target = e.target; } var el = document.getElementById(\"username\"); el.addEventListener(\"blur\", checkUsername, false); Event listener con parametros La referencia al objeto event se pasa automaticamente pero debe nombrarse en los parametros function checkUsername(e, min) { var target = e.target; } var el = document.getElementById(\"username\"); el.addEventListener(\"blur\", function(e) { checkUsername(e, 5); }, false); Delegacion Para evitar malos rendimientos por ejemplo en listas o celdas o tablas se pone el event listener en el elemento que los contiene y luego se usa la propiedad target del objeto event para encontrar al hijo que desato el evento Setting Timers setTimeout : similar a requestAnimationFrame , fija una funcion para ser ejecutada mas tarde, pero en lugar de llamarla en el siguiente redibujado espera un numero de milisegundos document.body.style.background = \"blue\"; setTimeout(function() { document.body.style.background = \"yellow\"; }, 2000); clearTimeout cancela la ejecucion de la funcion planeada var bombTimer = setTimeout(function() { console.log(\"BOOM!\"); }, 500); if (Math.random() < 0.5) { // 50% chance console.log(\"Defused.\"); clearTimeout(bombTimer); } setInterval y clearInterval son para lo mismo pero la ejecucion se repite cada X milisegundos var ticks = 0; var clock = setInterval(function() { console.log(\"tick\", ticks++); if (ticks == 10) { clearInterval(clock); console.log(\"stop.\"); } }, 200); Debouncing Hay eventos que se pueden disparar muy muy rapidamente (como mousemove o scroll pej). Hay que tener cuidado de no consumir mucho tiempo en su manejador o la pagina se lageara. Se puede usar setTimeout para suavizar el evento y que no haya lageos // Aqui se responde a mousemove pero una vez cada 250 milisegundos function displayCoords(event) { document.body.textContent = \"Mouse \" + event.pageX + \", \" + event.pageY; } var scheduled = false, lastEvent; addEventListener(\"mousemove\", function(event) { lastEvent = event; if (!scheduled) { scheduled = true; setTimeout(function() { scheduled = false; displayCoords(lastEvent); }, 250); } }); AJAX Conceptos Ajax permite pedir datos al servidor y cargarlos sin tener que refrescar la pagina entera Los servidores usan para enviar los datos HTML, XML o JSON Ajax usa un modelo asicrono, permite hacer cosas mientras el navegador espera los datos del servidor para cargarlos Peticion: El navegador pide datos al servidor, la peticion puede incluir datos que el servidor necesite al igual que un formulario puede enviar datos a un servidor En el servidor ocurre lo que sea y se genera una respuesta que puede ser en forma de HTML u otro formato como XML o JSON que luego el navegador convertira en HTML Respuesta: cuando el navegador recibe la respuesta del servidor dispara un evento el cual puede ser usado para ejecutar una funcion javascipt que procesara los datos y los mostrara en pantalla XMLHttpRequest Object Los navegadores usan el objeto XMLHttpRequest para manejar peticiones Ajax. Cuando el servidor responde a la peticion del navegador el mismo objeto XMLHttpRequest procesa el resultado Peticiones Se instancia el objeto XMLHttpRequest para crear un nuevo objeto xhr .open() - Metodo HTTP , url que manejara la peticion, true|false si es asincrono .send() - Envia la peticion al servidor, se puede pasar informacion extra o no Respuestas Cuando el navegador recibe y carga la respuesta del servidor se dispara el evento onload . Esto provoca que se ejecute una funcion La funcion chequea la propiedad status del objeto para asegurarse de que la respuesta del servidor esta bien Formatos de datos <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>JavaScript AJAX - Loading HTML, JSON y XML</title> </head> <body> <header><h1>THE MAKER BUS</h1></header> <h2>The bus stops here.</h2> <section id=\"content\"></section> <script src=\"js/data.js\"></script> </body> </html> // data.html <div class=\"event\"> <img src=\"img/map-ca.png\" alt=\"Map of California\" /> <p><b>Los Angeles, CA</b> May 1</p> </div> <div class=\"event\"> <img src=\"img/map-tx.png\" alt=\"Map of MI casa\" /> <p><b>Austin, TX</b> May 15</p> </div> <div class=\"event\"> <img src=\"img/map-ny.png\" alt=\"Map of New York\" /> <p><b>New York, NY</b> May 30</p> </div> // data.json { \"events\": [ { \"location\": \"San Francisco, CA\", \"date\": \"May 1\", \"map\": \"img/map-ca.png\" }, { \"location\": \"Austin, TX\", \"date\": \"May 15\", \"map\": \"img/map-tx.png\" }, { \"location\": \"New York, NY\", \"date\": \"May 30\", \"map\": \"img/map-ny.png\" } ] } // data.xml <?xml version=\"1.0\" encoding=\"utf-8\" ?> <events> <event> <location>San Francisco, CA</location> <date>May 1</date> <map>img/map-ca.png</map> </event> <event> <location>Austin, TX</location> <date>May 15</date> <map>img/map-tx.png</map> </event> <event> <location>New York, NY</location> <date>May 30</date> <map>img/map-ny.png</map> </event> </events> HTML var xhr = new XMLHttpRequest(); // Create XMLHttpRequest object xhr.onload = function() { // When response has loaded if(xhr.status === 200) { // If server status was ok update var response = xhr.responsetext; document.getElementById('content').innerHTML = response; } }; xhr.open('GET', 'data/data.html', true); // Prepare the request xhr.send(null); JSON var xhr = new XMLHttpRequest(); // Create XMLHttpRequest object xhr.onload = function() { // When readystate changes if(xhr.status === 200) { // If server status was ok responseObject = JSON.parse(xhr.responseText); // BUILD UP STRING WITH NEW CONTENT (could also use DOM manipulation) var newContent = ''; // Loop through object for (var i = 0; i < responseObject.events.length; i++) { newContent += '<div class=\"event\">'; newContent += '<img src=\"' + responseObject.events[i].map + '\" '; newContent += 'alt=\"' + responseObject.events[i].location + '\" />'; newContent += '<p><b>' + responseObject.events[i].location + '</b> '; newContent += responseObject.events[i].date + '</p>'; newContent += '</div>'; } // Update the page with the new content document.getElementById('content').innerHTML = newContent; //} }; xhr.open('GET', 'data/data.json', true); // Prepare the request xhr.send(null); XML var xhr = new XMLHttpRequest(); // Create XMLHttpRequest object xhr.onload = function() { // When response has loaded if (xhr.status === 200) { // If server status was ok var response = xhr.responseXML; // Get XML from the server // Find <event> elements and loop through them var events = response.getElementsByTagName('event'); for (var i = 0; i < events.length; i++) { var container, image, location, city, newline; container = document.createElement('div'); container.className = 'event'; // Add map image image = document.createElement('img'); image.setAttribute('src', getNodeValue(events[i], 'map')); image.setAttribute('alt', getNodeValue(events[i], 'location')); container.appendChild(image); // Add location data location = document.createElement('p'); city = document.createElement('b'); newline = document.createElement('br'); city.appendChild(document.createTextNode(getNodeValue( events[i], 'location'))); location.appendChild(newline); location.insertBefore(city, newline); location.appendChild(document.createTextNode(getNodeValue( events[i], 'date'))); container.appendChild(location); document.getElementById('content').appendChild(container); } } } // Gets content from XML function getNodeValue(obj, tag) { return obj.getElementsByTagName(tag)[0].firstChild.nodeValue; } }; xhr.open('GET', 'data/data.xml', true); // Prepare the request xhr.send(null); Datos de otros servidores Por seguridad AJAX no carga resp\u00f9estas de otros dominios (conocidas como cross-domain requests ) Alternativas Proxy - Crear un archivo en mi servidor que recoge los datos del servidor remoto. Asi las demas paginas de mi web pueden pedir los datos de ese archivo que actua de proxy JSONP Cross-Origin resources Sharing CORS - A\u00f1adir informacion extra a las cabeceras HTTP - Buena Guia para CORS JSONP // data-jsonp.html <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>JavaScript Ajax - JSONP</title> </head> <body> <header><h1>THE MAKER BUS</h1></header> <h2>The bus stops here</h2> <section id=\"content\"></section> <script src=\"js/data-jsonp.js\"></script> <script src=\"http://htmlandcssbook.com/js/jsonp.js?callback=showEvents\"> </script> </body> </html> // js/data-jsonp.js function showEvents(data) { // Callback when JSON loads var newContent = ''; // Variable to hold HTML // BUILD UP STRING WITH NEW CONTENT (could also use DOM manipulation) for (var i = 0; i < data.events.length; i++) { // Loop through object newContent += '<div class=\"event\">'; newContent += '<img src=\"' + data.events[i].map + '\" '; newContent += 'alt=\"' + data.events[i].location + '\" />'; newContent += '<p><b>' + data.events[i].location + '</b> '; newContent += data.events[i].date + '</p>'; newContent += '</div>'; } // Update the page with the new content document.getElementById('content').innerHTML = newContent; } // data/data-jsonp.js showEvents({ \"events\": [ { \"location\": \"San Francisco, CA\", \"date\": \"May 1\", \"map\": \"img/map-ca.png\" }, { \"location\": \"Austin, TX\", \"date\": \"May 15\", \"map\": \"img/map-tx.png\" }, { \"location\": \"New York, NY\", \"date\": \"May 30\", \"map\": \"img/map-ny.png\" } ] }); JSON Notacion JSON JSON es solo texto plano que envias por internet y luego el navegador convierte en objetos para usarlos KEYS colocados entre comillas (no comillas simples y separados del valor por dos puntos. VALUES alguno de los siguientes tipos de datos string - Texto escrito entre comillas number - Numero boolean - true o false array - array de valores o de objetos object - objeto javascript que puede contener objetos hijos o arrays null - cuando el valor esta vacio o perdido Cada pareja clave/valor esta separada por una coma excepto la ultima Objeto JSON events es un array que contiene dos objetos (uno por evento) { \"events\" : [ { \"location\": \"San Francisco, CA\", \"date\": \"May l\", \"map\": \"img/map-ca.png \" }, { \"location\" : \"Austin, TX\", \"date\" : \"May 15\", \"map\": \"img/map-tx.png\" } ] } JSON.stringify() convierte objetos javascript en una cadena formateada usando JSON. Esto permite enviar objetos javascript de el navegador a otra aplicacion JSON.parse() convierte una cadena de datos JSON en objetos javascript que el navegador pueda usar XML Parecido a HTML pero las etiquetas describen el tipo de dato que hay dentro Se puede procesar XML usando los mismos metodos DOM de HTML, por eso es mas facil usando jQuery <?xml version=\"1.O\" encoding=\"utf-8\" ?> <events> <event> <location>San Francisco, CA</location> <date>May 1 </date> <map>img/map-ca.png</map> </event> <event> <location>Austin, TX</location> <date>May 15</ date> <map>img/map-tx.png</map> </event> </events> FORMULARIOS Helper functions A\u00f1adir un event listener function addEvent (el, event, callback) { if ('addEventListener' in el) { el.addEventListener(event, callback, false); } else { el['e' + event + callback] = callback; el[event + callback] = function () { el['e' + event + callback](window.event); }; el.attachEvent('on' + event, el[event + callback]); } } Borrar un event listener function removeEvent(el, event, callback) { if ('removeEventListener' in el) { el.removeEventListener(event, callback, false); } else { el.detachEvent('on' + event, el[event + callback]); el[event + callback] = null; el['e' + event + callback] = null; } } Elemento Form El document tiene una coleccion de formularios que guarda referencias a cada formulario de la pagina document.forms[1] accede al segundo formulario de la pagina document.forms.login accede al formulario cuyo atributo name=\"login\" Cada elemento <form> de la pagina tiene tambien una coleccion de elementos que tiene todos los controles del formulario dentro document.forms[1].element[0] accede al primer control del segundo formulario de la pagina documento.forms[1].elements.password accede al elemento del segundo formulario cuyo atributo name=\"password\" Propiedades action - La URL a que el formulario es enviado para ser procesado method - si se envia por GET o POST name - se usa poco, lo mas comun es seleccionar un formulario por su atributo id elements - una coleccion de elementos en el formulario con los que el usuario puede interactuar. Se puede acceder a ellos por los indices o por los valores de sus atributos \u00b4name\u00b4 Metodos submit() - Tiene el mismo efecto que pinchar el boton submit reset() - Resetea el formulario a los valores iniciales como si la pagina se hubiera recargado Eventos submit - Se dispara cuando el formulario es enviado reset - Se dispara cuando se resetea el formulario Controles del formulario Propiedades value - En una entrada de texto es el texto que el usuario introduce, es el valor del atributo value type - Cuando un formulario se crea usando el elemento <input> esto define el tipo del elemento (text, radio, checkbox, password ..) name - Devuelve o establece el valor de atributo name defaultValue - Es el valor inicial de una entrada de texto cuando la pagina se renderiza form - El formulario al que el control pertenece disabled - Inhabilita el elemento del formulario checked - Indica que checkboxes o botones de radio han sido chequeados. Es un booleano que indica true si esta chequeado defaultChecked - El valor inicial de un checkbox o radio button (booleano) selected - Indica que un elemento de una select box esta seleccionado. Es un booleano que indica true si esta seleccionado. Metodos focus() - Le da el foco a un elemento blur() - Le quita el fofo al elemento select() - Selecciona e ilumina el contenido de texto de un elemento de entrada de texto click() - Dispara un evento click en botones, checkboxes y carga de archivos. evento submit en el boton submit evento reset en el boton reset Eventos blur - Salta cuando el usuario sale de un campo focus - Salta cuando el usuario entra en un campo click - Salta cuando el usuario pincha un elemento change - Salta cuando el valor de un elemento cambia input - Salta cuando cambia el valor de los elementos <input> \u00f3 <textarea> keydown , keyup , keypress - Salta cuando se interactua con el teclado","title":"Javascript para web"},{"location":"javascript-para-web/#javascript-para-web","text":"","title":"JAVASCRIPT PARA WEB"},{"location":"javascript-para-web/#built-in-objects","text":"","title":"BUILT-IN OBJECTS"},{"location":"javascript-para-web/#document-object-model","text":"Document Object Model","title":"Document Object Model"},{"location":"javascript-para-web/#browser-object-model","text":"El objeto superior es window que representa la ventana o pesta\u00f1a del navegador. Propiedades window.innerHeight - altura (excluding browser chrome/user interface) (px) window.innerWidth - anchura (excluding browser chrome/user interface) (px) window.pageXOffset - Distance document has been scrolled horizontally (px) window.pageYOffset - Distance document has been scrolled vertically (px) window.screenX - Coordenada X, respecto esquina superior-izquierda (px) window.screenY - Coordenada Y, respecto esquina superior-izquierda (px) window.location - URL actual (o ruta local al archivo) window.document - Referencia al objeto documento, usado para representar la pagina actual contenida en windows window.history - Referencia al objeto history de la pesta\u00f1a o ventana del navegador que contiene detalles de las paginas que han sido vistas en esa ventana o pesta\u00f1a window.history.length - numero de historias en el objeto history para esa pesta\u00f1a o ventana del navegador window.screen - Hace referencia al objeto screen del monitor window.screen.width - Anchura de la pantalla del monitor(px) window.screen.height - Altura de la pantalla del monitor (px) Metodos window.a1ert() - Crea una caja de dialogo con mensaje. El usuario debe pinchar OK para cerrarla window.open() - Abre una nueva ventana de navegador cuya URL es la especificada como parametro (no funciona si el navegador tiene bloqueado los pop-up) window.print() - Avisa al navegador que el usuario quiere escribir contenidos de la pagina actual (como si el usuario hubiera pulsado la opcion de imprimir del navegador)","title":"Browser Object Model"},{"location":"javascript-para-web/#global-javascript-objects","text":"Es un grupo de objetos individuales que cada uno hace referencia a una parte del lenguaje javascript","title":"Global Javascript Objects"},{"location":"javascript-para-web/#string","text":"","title":"String"},{"location":"javascript-para-web/#numero","text":"","title":"Numero"},{"location":"javascript-para-web/#math","text":"","title":"Math"},{"location":"javascript-para-web/#date","text":"","title":"Date"},{"location":"javascript-para-web/#dom","text":"Hay 3 tecnicas de actualizar contenido HTML document.write() element .innerHTML Manipulacion del DOM","title":"DOM"},{"location":"javascript-para-web/#arbol-dom","text":"El arbol DOM es una maqueta de una pagina web En la parte superior del arbol esta un nodo documento que representa la pagina entera. Es el punto de arranque para todas las rutas por el arbol DOM. Coincide con el document object Los nodos elemento es lo que se busca en el arbol DOM antes de acceder a los nodes de atributo y texto Para eso estan los metodos que permiten buscar y acceder a nodos elemento Las etiquetas abiertas de los elementos HTML pueden contener atributos que estan representados por nodos atributos en al arbol DOM No son hijos del elemento que los tiene, son parte de ese elemento, por eso hay metodos y propiedades especificas para leer y modificar esos atributos Una vez accedido al nodo elemento puedes coger el texto dentro del elemento que esta contenido en su propio nodo texto Pueden tener hijos pero seran hijos del elemento que los contiene","title":"Arbol DOM"},{"location":"javascript-para-web/#objeto-document","text":"El objeto superior es document que representa la pagina como un todo Propiedades document.title - Titulo del documento actual document.lastModified - Fecha de la ultima modificacion del documento actual document.URL - Devuelve una cadena con la URL del documento actual document.domain - Devuelve el dominio del documento actual Metodos document.write() - Escribe texto al documento document.getElementByld() - Devuelve el elemento que coincide con el valor de id que se pasa document.querySe1ectorA11() - Devuelve lista de elementos que coincide con el selector CSS que se pasa como parametro document.createElement() - Crea un nuevo elemento document.createTextNode() - Crea un nuevo nodo de texto","title":"Objeto document"},{"location":"javascript-para-web/#acceder-a-elementos","text":"Seleccionar un elemento document.getElementById(\"name\") - Selecciona el elemento con id=\"name\" document.querySelector(\"h4\") - Selecciona el primer elemento h4 element .parentNode - Toma el padre del elemento actual element .previousSibling - Coge el hermano previo element .nextSibling - Coge el hermano siguiente element .firstChild - Coge el primer hijo del actual elemento element .lastChild - Coge el ultimo hijo del actual elemento \u00a1 OJO ! En estos 5 ultimos con los WhiteSpace Nodes Seleccionar varios elementos : Los metodos devuelven una NodeList document.getElementsByClassName(\"name\") - Selecciona todos los elementos que tienen la clase=\"name\" document.getElementsByTagName(\"li\") - Coge todos los elementos que tienen el tag name=\"li\" document.querySelectorAll(h4) - Selecciona todos los elementos que poseen h4","title":"Acceder a elementos"},{"location":"javascript-para-web/#trabajar-con-elementos","text":"","title":"Trabajar con elementos"},{"location":"javascript-para-web/#propiedades","text":"element .nodeValue - Permite acceder al contenido de un nodo texto element .innerHTML - Permite acceder a elementos hijo y contenido de texto y de markup element .textContent - Permite acceder al texto del elemento y de sus hijos element .className - Valor del atributo class element .id - Valor del atributo id element .nodeValue Una vez llegas de un elemento a su nodo texto, este tiene la propiedad nodeValue que te da acceso al valor del texto document.getElementById(\"one\").firstChild.nextSibling.nodeValue; element .textContent Permite acceder al texto del elemento y de sus hijos document.getElementByid(\"one\").textContent; element .innerText NO USAR element .innerHTML var elContent = document.getElementByld('one').innerHTML; // Get // elContent = \"<em>fresh</em> figs\" document.getElementByld('one').innerHTML = elContent; // Set","title":"Propiedades"},{"location":"javascript-para-web/#manipulacion-dom","text":"document.createElement() - Crea nodos document.createTextNode() - Crea nodos de texto element .appendChild() - A\u00f1ade nodos element .removeChild() - Elimina nodo element .hasAttribute(n) - Chequea si existe el atributo n element .getAttribute(n) - Consigue el valor del atributo n element .setAttribute(n) - Pone el valor del atributo n element .removeAttribute(n) - Elimina el atributo n Crear nuevo contenido en la pagina document.createElement() - Crea un nuevo nodo elemento y se guarda en una variable document.createTextNode() - Crea un nuevo nodo texto y se guarda en una variable element .appendChild() - Lo a\u00f1ade al arbol DOM como un hijo var newEl = document.createElement(\"li\"); var newText document.createTextNode(\"quinoa\"); newEl.appendChild(newText); // Ahora lo posicionamos donde le corresponda var position = document.getElementsByTagName(\"ul\")[O]; position.appendChild(newEl); Eliminar contenido en la pagina Almacenar el elemento a borrar en una variable Almacenar el padre del elemento a borrar en una variable Eliminar el elemento desde su elemento padre var removeEl = document.getElementsByTagName(\"li\")[3]; var containerEl = removeEl.parentNode; containerEl.removeChild(removeEl);","title":"Manipulacion DOM"},{"location":"javascript-para-web/#style-objects","text":"Style Objects document.getElementById(\"myH1\").style.color = \"red\";","title":"Style Objects"},{"location":"javascript-para-web/#nodelists","text":"Son collections , parecen arrays y estan numerados como tal pero no lo son Propiedades length - indica cuantos items hay en la NodeList Metodos item(n) - devuelve el item con indice numero n nodeLista[n] - es mas comun esta sintaxis con corchetes var lista = document.getElementsByClassName(\"hot\") if (lista.length >= 1) { var primero = lista.item(0); var primero = lista[0]; } Iteraciones var lista = document.querySelectorAll(\"li.cold\") for (var i = 0; i < lista.lenth; i++) { lista[i].className = \"hot\"; }","title":"NodeLists"},{"location":"javascript-para-web/#xss-atacks","text":"Escapar todo el contenido que generan los usuarios Todos los datos introducidos por usuarios deben escaparse en el servidor antes de ser mostrados en la pagina. HTML - Escapar todos estos caracteres para que se muestren como caracteres y no sean procesados como codigo Javascript -No incluir datos de fuentes sin confianza.Escapar todos los caracteres ASCII de valor menor a 256 que no sean caracteres alfanumericos URLs - Si tienes enlaces que datos que han introducido los usuarios usa el metodo encodeURIComponent() para codificar los siguientes caracteres : A\u00f1adir contenido del usuario Javascript: - Usar textContent o innerText - NO usar innerHTML jQuery: - Usar .text() - NO Usar .html() salvo: No permitir al usuario contenido con markup Escapar todo el contenido del usuario y a\u00f1adirlo como texto en lugar de como HTML","title":"XSS Atacks"},{"location":"javascript-para-web/#eventos","text":"Las Interacciones del usuario crean Eventos Los Eventos disparan Codigo El Codigo responde a los usuarios (p ej : modificando el DOM) Seleccionar el elemento que queremos tenga un evento Indicar que evento en ese elemento disparara la respuesta Indicar el codigo a ejecutar cuando ocurra el evento","title":"EVENTOS"},{"location":"javascript-para-web/#lista-eventos","text":"User Interface Events load - La pagina web se ha terminado de cargar function setup() { // Al haber cargado la pagina ya esta el contenido disponible } window.addEventListener('load', setup, false); unload - La pagina web se esta descargando a causa de haber pedido otra beforeunload - Justo antes de que el usuario abandone la pagina error - Navegador encuentra un error de Javascript resize - Navegador se ha redimensionado scroll - Usuario ha hecho scroll hacia arriba o abajo, puede referirse a la pagina entera o a un elemento especifico como por ejemplo textarea Keyboard Events keydown - Pulsar una tecla(se repite mientras la tecla esta presionada) keyup - Soltar una tecla keypress - Mientras se inserta el caracter (se repite mientras la tecla esta presionada) Mouse Events click - Pulsar y soltar un boton sobre el mismo elemento dblclick - Pulsar y soltar un boton dos veces sobre el mismo elemento mousedown - Pulsar un bot\u00f3n del rat\u00f3n mientras esta sobre un elemento mouseup - Soltar un bot\u00f3n del rat\u00f3n mientras esta sobre un elemento mousemove - Mover el raton mouseover - Mover el raton por encima de un elemento mouseout - Mover el raton fuera de un elemento Focus Events focus , focusin - EL elemento gana el foco blur , focusout - EL elemento pierde el foco Form Events input - Cambia el valor de cualquier <input> , <textarea> o elemento con el atributo contenteditable change - Cambia el valor en un select box , checkbox o radio button submit - Al enviar un formulario (usando un boton o una tecla) reset - Usuario pincha un boton de resetear formulario (Muy raro verlo) cut - Usuario corta contenido de un campo del formulario copy - Usuario copia contenido de un campo del formulario paste - Usuario pega contenido a un campo del formulario select - Usuario selecciona algo de texto en un campo de formulario Mutation Events : Ocurren cuando la estructura DOM cambia por un script DOMSubtreeModified - Cambio affecta al documento DOMNodeInserted - Se ha insertado un nodo como hijo de otro nodo DOMNodeRemoved - Se ha eliminado un nodo desde otro nodo DOMNodeInsertedIntoDocument - Se ha insertado un nodo como descendiente de otro nodo DOMNodeRemovedFromDocument - Se ha eliminado un nodo como descendiente de otro nodo HTML5 Events DOMContentLoaded - Salta cuando el arbol DOM (toda la estructura HTML) ya esta cargada) a diferencia de load que salta cuando todo el HTML y sus recursos (imagenes, iframes, scripts, css) se han cargado. Asi la pagina parece que es mas rapida de cargar. Se asigna al document o al window hashchange - Salta cuando hay cambios en la URL a partir del ancla #. Funciona sobre el objeto window y despues de saltar el objeto event tendra dos propiedades oldURL , newURL beforeunload - Salta en el objeto windows antes de tirar la pagina. Es el que usan para molestar diciendo si estas seguro de querer abandonar la pagina","title":"Lista Eventos"},{"location":"javascript-para-web/#manejadores-eventos","text":"HTML Event Handlers NO USAR <form method=\"post\" action=\"http://www.example.org/register\"> <label for=\"username\">Create a username: </label> <input type=\"text\" id=\"username\" onblur=\"checkUsername()\" /> <div id=\"feedback\"></div> <label for=\"password\">Create a password: </label> <input type=\"password\" id=\"password\" /> <input type=\"submit\" value=\"sign up!\" /> </form> function checkUsername() { var elMsg = document.getElementById('feedback'); var elUsername = document.getElementById('username'); if (elUsername.value.length < 5) { elMsg.textContent = 'Username must be 5 characters or more'; } else { elMsg.textContent = ''; } } Traditional DOM Event Handlers La pega es que solo puedes vincular una funcion a un evento element .on event = functionName ; function checkUsername() { // codigo que sea } var el = document.getElementByld(\"username\") ; el.onblur = checkUsername; Event Listeners (DOM level 2 ) USAR Permite que un solo evento dispare varios scripts","title":"Manejadores Eventos"},{"location":"javascript-para-web/#event-listener","text":"Concepto Ejemplo function checkUsername() { // codigo que sea } var el = document.getElementByld(\"username\") ; el.addEventListener(\"blur\", checkUsername, false); Usando Parametros var elUsername = document.getElementById('username'); var elMsg = document.getElementById('feedback'); function checkUsername(minLength) { if (elUsername.value.length < minLength) { elMsg.innerHTML = 'Username must be ' + minLength + ' chars or more'; } else { elMsg.innerHTML = ''; } } elUsername.addEventListener('blur', function() { checkUsername(5); }, false); var button = document.querySelector(\"button\"); button.addEventListener(\"mousedown\", function(event) { if (event.which == 1) console.log(\"Left button\"); else if (event.which == 2) console.log(\"Middle button\"); else if (event.which == 3) console.log(\"Right button\"); });","title":"Event Listener"},{"location":"javascript-para-web/#event-flow","text":"Describe el orden en el que los eventos se procesan Propagacion : Los eventos registrados en nodos con hijos reciben algunos eventos que ocurren en los hijos. Si pulsamos un buton dentro de un parrafo los manejadores de evento del parrafo tambien recibiran el evento click. Si los dos tienen el evento el manejador mas especifico (el mas interno) va primero bubbling - el evento se captura y maneja primero por el elemento mas interno y despues de propaga hacua los elementos exteriores Capturing - el evento se captura primero por el elemento mas externo y se propaga hacia los elementos internos","title":"Event FLow"},{"location":"javascript-para-web/#objeto-event","text":"Propiedades target - Objetivo del evento type - Tipo de evento que se ha disparado cancelable - Si se puede cancelar el comportamiento predeterminado de un elemento screenX , screenY - Coordenada de la posicion del cursor respecto del monitor pageX , pageY - Coordenada de la posicion del cursor respecto de la pagina clientX , clientY - Coordenada de la posicion del cursor respecto del navegador Metodos preventDefault() - Cancela el comportamiento por defecto del evento (si es posible) stopPropagation() - Detiene la propagacion del evento por bubbling o capturing Event listener sin parametros La referencia al objeto event se pasa automaticamente aunque en la funcion debe nombrarse (lo normal es e para event ) function checkUsername(e) { var target = e.target; } var el = document.getElementById(\"username\"); el.addEventListener(\"blur\", checkUsername, false); Event listener con parametros La referencia al objeto event se pasa automaticamente pero debe nombrarse en los parametros function checkUsername(e, min) { var target = e.target; } var el = document.getElementById(\"username\"); el.addEventListener(\"blur\", function(e) { checkUsername(e, 5); }, false);","title":"Objeto Event"},{"location":"javascript-para-web/#delegacion","text":"Para evitar malos rendimientos por ejemplo en listas o celdas o tablas se pone el event listener en el elemento que los contiene y luego se usa la propiedad target del objeto event para encontrar al hijo que desato el evento","title":"Delegacion"},{"location":"javascript-para-web/#setting-timers","text":"setTimeout : similar a requestAnimationFrame , fija una funcion para ser ejecutada mas tarde, pero en lugar de llamarla en el siguiente redibujado espera un numero de milisegundos document.body.style.background = \"blue\"; setTimeout(function() { document.body.style.background = \"yellow\"; }, 2000); clearTimeout cancela la ejecucion de la funcion planeada var bombTimer = setTimeout(function() { console.log(\"BOOM!\"); }, 500); if (Math.random() < 0.5) { // 50% chance console.log(\"Defused.\"); clearTimeout(bombTimer); } setInterval y clearInterval son para lo mismo pero la ejecucion se repite cada X milisegundos var ticks = 0; var clock = setInterval(function() { console.log(\"tick\", ticks++); if (ticks == 10) { clearInterval(clock); console.log(\"stop.\"); } }, 200);","title":"Setting Timers"},{"location":"javascript-para-web/#debouncing","text":"Hay eventos que se pueden disparar muy muy rapidamente (como mousemove o scroll pej). Hay que tener cuidado de no consumir mucho tiempo en su manejador o la pagina se lageara. Se puede usar setTimeout para suavizar el evento y que no haya lageos // Aqui se responde a mousemove pero una vez cada 250 milisegundos function displayCoords(event) { document.body.textContent = \"Mouse \" + event.pageX + \", \" + event.pageY; } var scheduled = false, lastEvent; addEventListener(\"mousemove\", function(event) { lastEvent = event; if (!scheduled) { scheduled = true; setTimeout(function() { scheduled = false; displayCoords(lastEvent); }, 250); } });","title":"Debouncing"},{"location":"javascript-para-web/#ajax","text":"","title":"AJAX"},{"location":"javascript-para-web/#conceptos","text":"Ajax permite pedir datos al servidor y cargarlos sin tener que refrescar la pagina entera Los servidores usan para enviar los datos HTML, XML o JSON Ajax usa un modelo asicrono, permite hacer cosas mientras el navegador espera los datos del servidor para cargarlos Peticion: El navegador pide datos al servidor, la peticion puede incluir datos que el servidor necesite al igual que un formulario puede enviar datos a un servidor En el servidor ocurre lo que sea y se genera una respuesta que puede ser en forma de HTML u otro formato como XML o JSON que luego el navegador convertira en HTML Respuesta: cuando el navegador recibe la respuesta del servidor dispara un evento el cual puede ser usado para ejecutar una funcion javascipt que procesara los datos y los mostrara en pantalla","title":"Conceptos"},{"location":"javascript-para-web/#xmlhttprequest-object","text":"Los navegadores usan el objeto XMLHttpRequest para manejar peticiones Ajax. Cuando el servidor responde a la peticion del navegador el mismo objeto XMLHttpRequest procesa el resultado Peticiones Se instancia el objeto XMLHttpRequest para crear un nuevo objeto xhr .open() - Metodo HTTP , url que manejara la peticion, true|false si es asincrono .send() - Envia la peticion al servidor, se puede pasar informacion extra o no Respuestas Cuando el navegador recibe y carga la respuesta del servidor se dispara el evento onload . Esto provoca que se ejecute una funcion La funcion chequea la propiedad status del objeto para asegurarse de que la respuesta del servidor esta bien","title":"XMLHttpRequest Object"},{"location":"javascript-para-web/#formatos-de-datos","text":"<!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>JavaScript AJAX - Loading HTML, JSON y XML</title> </head> <body> <header><h1>THE MAKER BUS</h1></header> <h2>The bus stops here.</h2> <section id=\"content\"></section> <script src=\"js/data.js\"></script> </body> </html> // data.html <div class=\"event\"> <img src=\"img/map-ca.png\" alt=\"Map of California\" /> <p><b>Los Angeles, CA</b> May 1</p> </div> <div class=\"event\"> <img src=\"img/map-tx.png\" alt=\"Map of MI casa\" /> <p><b>Austin, TX</b> May 15</p> </div> <div class=\"event\"> <img src=\"img/map-ny.png\" alt=\"Map of New York\" /> <p><b>New York, NY</b> May 30</p> </div> // data.json { \"events\": [ { \"location\": \"San Francisco, CA\", \"date\": \"May 1\", \"map\": \"img/map-ca.png\" }, { \"location\": \"Austin, TX\", \"date\": \"May 15\", \"map\": \"img/map-tx.png\" }, { \"location\": \"New York, NY\", \"date\": \"May 30\", \"map\": \"img/map-ny.png\" } ] } // data.xml <?xml version=\"1.0\" encoding=\"utf-8\" ?> <events> <event> <location>San Francisco, CA</location> <date>May 1</date> <map>img/map-ca.png</map> </event> <event> <location>Austin, TX</location> <date>May 15</date> <map>img/map-tx.png</map> </event> <event> <location>New York, NY</location> <date>May 30</date> <map>img/map-ny.png</map> </event> </events> HTML var xhr = new XMLHttpRequest(); // Create XMLHttpRequest object xhr.onload = function() { // When response has loaded if(xhr.status === 200) { // If server status was ok update var response = xhr.responsetext; document.getElementById('content').innerHTML = response; } }; xhr.open('GET', 'data/data.html', true); // Prepare the request xhr.send(null); JSON var xhr = new XMLHttpRequest(); // Create XMLHttpRequest object xhr.onload = function() { // When readystate changes if(xhr.status === 200) { // If server status was ok responseObject = JSON.parse(xhr.responseText); // BUILD UP STRING WITH NEW CONTENT (could also use DOM manipulation) var newContent = ''; // Loop through object for (var i = 0; i < responseObject.events.length; i++) { newContent += '<div class=\"event\">'; newContent += '<img src=\"' + responseObject.events[i].map + '\" '; newContent += 'alt=\"' + responseObject.events[i].location + '\" />'; newContent += '<p><b>' + responseObject.events[i].location + '</b> '; newContent += responseObject.events[i].date + '</p>'; newContent += '</div>'; } // Update the page with the new content document.getElementById('content').innerHTML = newContent; //} }; xhr.open('GET', 'data/data.json', true); // Prepare the request xhr.send(null); XML var xhr = new XMLHttpRequest(); // Create XMLHttpRequest object xhr.onload = function() { // When response has loaded if (xhr.status === 200) { // If server status was ok var response = xhr.responseXML; // Get XML from the server // Find <event> elements and loop through them var events = response.getElementsByTagName('event'); for (var i = 0; i < events.length; i++) { var container, image, location, city, newline; container = document.createElement('div'); container.className = 'event'; // Add map image image = document.createElement('img'); image.setAttribute('src', getNodeValue(events[i], 'map')); image.setAttribute('alt', getNodeValue(events[i], 'location')); container.appendChild(image); // Add location data location = document.createElement('p'); city = document.createElement('b'); newline = document.createElement('br'); city.appendChild(document.createTextNode(getNodeValue( events[i], 'location'))); location.appendChild(newline); location.insertBefore(city, newline); location.appendChild(document.createTextNode(getNodeValue( events[i], 'date'))); container.appendChild(location); document.getElementById('content').appendChild(container); } } } // Gets content from XML function getNodeValue(obj, tag) { return obj.getElementsByTagName(tag)[0].firstChild.nodeValue; } }; xhr.open('GET', 'data/data.xml', true); // Prepare the request xhr.send(null);","title":"Formatos de datos"},{"location":"javascript-para-web/#datos-de-otros-servidores","text":"Por seguridad AJAX no carga resp\u00f9estas de otros dominios (conocidas como cross-domain requests ) Alternativas Proxy - Crear un archivo en mi servidor que recoge los datos del servidor remoto. Asi las demas paginas de mi web pueden pedir los datos de ese archivo que actua de proxy JSONP Cross-Origin resources Sharing CORS - A\u00f1adir informacion extra a las cabeceras HTTP - Buena Guia para CORS JSONP // data-jsonp.html <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>JavaScript Ajax - JSONP</title> </head> <body> <header><h1>THE MAKER BUS</h1></header> <h2>The bus stops here</h2> <section id=\"content\"></section> <script src=\"js/data-jsonp.js\"></script> <script src=\"http://htmlandcssbook.com/js/jsonp.js?callback=showEvents\"> </script> </body> </html> // js/data-jsonp.js function showEvents(data) { // Callback when JSON loads var newContent = ''; // Variable to hold HTML // BUILD UP STRING WITH NEW CONTENT (could also use DOM manipulation) for (var i = 0; i < data.events.length; i++) { // Loop through object newContent += '<div class=\"event\">'; newContent += '<img src=\"' + data.events[i].map + '\" '; newContent += 'alt=\"' + data.events[i].location + '\" />'; newContent += '<p><b>' + data.events[i].location + '</b> '; newContent += data.events[i].date + '</p>'; newContent += '</div>'; } // Update the page with the new content document.getElementById('content').innerHTML = newContent; } // data/data-jsonp.js showEvents({ \"events\": [ { \"location\": \"San Francisco, CA\", \"date\": \"May 1\", \"map\": \"img/map-ca.png\" }, { \"location\": \"Austin, TX\", \"date\": \"May 15\", \"map\": \"img/map-tx.png\" }, { \"location\": \"New York, NY\", \"date\": \"May 30\", \"map\": \"img/map-ny.png\" } ] });","title":"Datos de otros servidores"},{"location":"javascript-para-web/#json","text":"","title":"JSON"},{"location":"javascript-para-web/#notacion-json","text":"JSON es solo texto plano que envias por internet y luego el navegador convierte en objetos para usarlos KEYS colocados entre comillas (no comillas simples y separados del valor por dos puntos. VALUES alguno de los siguientes tipos de datos string - Texto escrito entre comillas number - Numero boolean - true o false array - array de valores o de objetos object - objeto javascript que puede contener objetos hijos o arrays null - cuando el valor esta vacio o perdido Cada pareja clave/valor esta separada por una coma excepto la ultima","title":"Notacion JSON"},{"location":"javascript-para-web/#objeto-json","text":"events es un array que contiene dos objetos (uno por evento) { \"events\" : [ { \"location\": \"San Francisco, CA\", \"date\": \"May l\", \"map\": \"img/map-ca.png \" }, { \"location\" : \"Austin, TX\", \"date\" : \"May 15\", \"map\": \"img/map-tx.png\" } ] } JSON.stringify() convierte objetos javascript en una cadena formateada usando JSON. Esto permite enviar objetos javascript de el navegador a otra aplicacion JSON.parse() convierte una cadena de datos JSON en objetos javascript que el navegador pueda usar","title":"Objeto JSON"},{"location":"javascript-para-web/#xml","text":"Parecido a HTML pero las etiquetas describen el tipo de dato que hay dentro Se puede procesar XML usando los mismos metodos DOM de HTML, por eso es mas facil usando jQuery <?xml version=\"1.O\" encoding=\"utf-8\" ?> <events> <event> <location>San Francisco, CA</location> <date>May 1 </date> <map>img/map-ca.png</map> </event> <event> <location>Austin, TX</location> <date>May 15</ date> <map>img/map-tx.png</map> </event> </events>","title":"XML"},{"location":"javascript-para-web/#formularios","text":"","title":"FORMULARIOS"},{"location":"javascript-para-web/#helper-functions","text":"A\u00f1adir un event listener function addEvent (el, event, callback) { if ('addEventListener' in el) { el.addEventListener(event, callback, false); } else { el['e' + event + callback] = callback; el[event + callback] = function () { el['e' + event + callback](window.event); }; el.attachEvent('on' + event, el[event + callback]); } } Borrar un event listener function removeEvent(el, event, callback) { if ('removeEventListener' in el) { el.removeEventListener(event, callback, false); } else { el.detachEvent('on' + event, el[event + callback]); el[event + callback] = null; el['e' + event + callback] = null; } }","title":"Helper functions"},{"location":"javascript-para-web/#elemento-form","text":"El document tiene una coleccion de formularios que guarda referencias a cada formulario de la pagina document.forms[1] accede al segundo formulario de la pagina document.forms.login accede al formulario cuyo atributo name=\"login\" Cada elemento <form> de la pagina tiene tambien una coleccion de elementos que tiene todos los controles del formulario dentro document.forms[1].element[0] accede al primer control del segundo formulario de la pagina documento.forms[1].elements.password accede al elemento del segundo formulario cuyo atributo name=\"password\" Propiedades action - La URL a que el formulario es enviado para ser procesado method - si se envia por GET o POST name - se usa poco, lo mas comun es seleccionar un formulario por su atributo id elements - una coleccion de elementos en el formulario con los que el usuario puede interactuar. Se puede acceder a ellos por los indices o por los valores de sus atributos \u00b4name\u00b4 Metodos submit() - Tiene el mismo efecto que pinchar el boton submit reset() - Resetea el formulario a los valores iniciales como si la pagina se hubiera recargado Eventos submit - Se dispara cuando el formulario es enviado reset - Se dispara cuando se resetea el formulario","title":"Elemento Form"},{"location":"javascript-para-web/#controles-del-formulario","text":"Propiedades value - En una entrada de texto es el texto que el usuario introduce, es el valor del atributo value type - Cuando un formulario se crea usando el elemento <input> esto define el tipo del elemento (text, radio, checkbox, password ..) name - Devuelve o establece el valor de atributo name defaultValue - Es el valor inicial de una entrada de texto cuando la pagina se renderiza form - El formulario al que el control pertenece disabled - Inhabilita el elemento del formulario checked - Indica que checkboxes o botones de radio han sido chequeados. Es un booleano que indica true si esta chequeado defaultChecked - El valor inicial de un checkbox o radio button (booleano) selected - Indica que un elemento de una select box esta seleccionado. Es un booleano que indica true si esta seleccionado. Metodos focus() - Le da el foco a un elemento blur() - Le quita el fofo al elemento select() - Selecciona e ilumina el contenido de texto de un elemento de entrada de texto click() - Dispara un evento click en botones, checkboxes y carga de archivos. evento submit en el boton submit evento reset en el boton reset Eventos blur - Salta cuando el usuario sale de un campo focus - Salta cuando el usuario entra en un campo click - Salta cuando el usuario pincha un elemento change - Salta cuando el valor de un elemento cambia input - Salta cuando cambia el valor de los elementos <input> \u00f3 <textarea> keydown , keyup , keypress - Salta cuando se interactua con el teclado","title":"Controles del formulario"},{"location":"javascript-snippets/","text":"JAVASCRIPT SNIPPETS NUMBERS Random Numbers function randomInt (min, max) { return Math.floor(Math.random() * (max - min + 1) + min); } areAllCharsNumbers function areAllCharsNumbers (str) { return str.match(/^\\d+$/); } remove trailing zeroes const num = 6.76789; num.toFixed(2); // return 6.77 const num = 6; num.toFixed(3); // return 6.000 Number(num.toFixed(2)); // return 6.77 , 6 parseFloat(num.toFixed(3)); // return 6.77 , 6 STRINGS Create UUIDv4 // vale para el navegador y para nodejs function generateUUID() { const template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11; const uuid = template.replace(/[018]/g, function (c) { const random = crypto.getRandomValues(new Uint8Array(1))[0]; const value = (c ^ random & 15 >> c / 4).toString(16); return value; }); return uuid; } Clean whitespaces function removeAllWhitespaces (str) { return str.replace(/\\s+/g, ''); } function replaceAllWhitespacesByChar (str, otherChar) { return str.replace(/\\s+/g, otherChar); } function replaceMultipleWhitespacesWithASingleSpace(str) { return str.replace(/\\s\\s+/g, ' '); } Remove empty strings Eliminar las cadenas vacias de un array let arr = [\"I\", \"am\", \"\", \"still\", \"here\", \"\", \"man\"] // arr = [\"I\", \"am\", \"\", \"still\", \"here\", \"\", \"man\"] // ES5 arr = arr.filter(Boolean) // ES6 arr = arr.filter(v=>v!=''); ARRAYS InitializeMultiArray function initializeMultiArray (cols, rows, value) { let array = []; for (let i = 0; i < cols; i++) { array[i] = []; for (let j = 0; j < rows; j++) { array[i][j] = value; } } return array; } Order Array by Property function orderArrayByPropertyName (property) { let sortOrder = 1; if (property[0] === '-') { sortOrder = -1; property = property.substr(1); } return function (a, b) { let result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0; return result * sortOrder; }; } OBJECTS isEmpty(Object) function objectIsEmpty(obj) { return Object.keys(obj).length === 0 && obj.constructor === Object; } FETCH async function fetchData(c, data) { const options = { method: 'GET', signal: AbortSignal.timeout(5000), headers: { 'Authorization': `Bearer ${\"token\"}`, 'Accept-Charset': 'utf-8', }, }; const url = c.API_URL + c.API_ENDPOINT; try { const response = await fetch(url, options); if (response.ok) { const data = await response.json(); return data; } else { throw new Error(response.status + \" \" + response.statusText); } } catch (err) { console.log('ERROR fetchData => ', err); } } async function fetchData(c, data) { const options = { method: 'POST', signal: AbortSignal.timeout(5000), headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': `Bearer ${\"token\"}`, 'Accept-Charset': 'utf-8' }, body: new URLSearchParams({ 'key': c.API_KEY, //o el token en el header 'data': JSON.stringify(data) }), }; const url = c.API_URL + c.API_ENDPOINT; try { const response = await fetch(url, options); if (response.ok) { const data = await response.json(); return data; } else { throw new Error(response.status + \" \" + response.statusText); } } catch (err) { console.log('ERROR fetchData => ', err); } } // Si la API espera JSON, // cambiar el \"Content-Type\" : \"application/json\" // y convertir body a JSON con JSON.stringify() AJAX REQUESTS GET function getAjaxData (urlData, callback) { const xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () { if (xhr.readyState === 4) { // 4 = \"DONE\" if (xhr.status === 200) { // 200 =\"OK\" callback(JSON.parse(xhr.responseText)); } else { console.log('Error: ' + xhr.status); } } }; xhr.open('GET', urlData); // add false to synchronous request xhr.send(); } GET, POST, PUT ... function makeAjaxRequest (url, action, params, sendCookie , callback) { const xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () { if (xhr.readyState === 4) { // 4 = \"DONE\" if (xhr.status === 200) { // 200 =\"OK\" if (action === 'GET' || action === 'POST') { try { callback(JSON.parse(xhr.responseText)); } catch (e) { console.log('Error parsing Json => ', e); callback({}); } } else { callback(xhr.status); } } else { console.log('Error: ' + xhr.status); } } }; xhr.open(action, url); if (sendCookie) { xhr.withCredentials = true; // allow send cookies } if (action === 'GET') { xhr.send(); } else if (action !== 'GET') { xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8'); if (params) { xhr.send(params); } else { xhr.send(); } // console.log('Request Sent') } } ASYNC/AWAIT REQUEST async function init() { try { const data = await makeRequest(url, 'POST', param); } catch (err) { console.error(\"ERROR FETCHING DATA => \", err); } } function makeRequest(url, method, param) { return new Promise(function (resolve, reject) { let xhr = new XMLHttpRequest(); xhr.open(method, url); xhr.onload = function () { console.log(xhr.status); if (xhr.status >= 200 && xhr.status < 300) { resolve(xhr.response); } else { reject({ status: xhr.status, statusText: xhr.statusText }); } }; xhr.onerror = function () { reject({ status: xhr.status, statusText: xhr.statusText }); }; if (method === 'GET') { xhr.send(); } else if (method !== 'GET') { xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8'); if (param) { xhr.send(param); } else { xhr.send(); } } }); } Wait Multiple Requests let calls = numberOfCalls; for (let i = 0; i < calls; i++) { asyncOperation(params, function (result) { calls--; if (calls <= 0) { // all calls done } }); } NETWORK Validate IP function isValidIP(ip) { const ip4 = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/; const ip6 = /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/; if (ip4.test(ip)) { return true; } if (ip6.test(ip)) { return true; } return false; } Validate Hostname function isValidHostname(hostname) { if (!hostname || hostname.length > 255) { return false; } const condition = /^(?!-)[A-Za-z0-9-]{1,63}(?<!-)$/; const parts = hostname.split('.'); for (let part of parts) { if (!condition.test(part)) { return false; } } return true; } Validate URL function isValidURL(url) { const valid = [\"http\", \"https\"]; const invalid = [\"localhost\", \"127.0.0.1\"]; try { const myUrl = new URL(url); const protocol = myUrl.protocol.replace(\":\", \"\"); const hostname = myUrl.hostname; return valid.includes(protocol) && !invalid.includes(hostname); } catch (err) { return false; } } Remove protocol-www function cleanUrl(url) { if (url.startsWith('https://')) { url = url.slice(8); } else if (url.startsWith('http://')) { url = url.slice(7); } if (url.startsWith('www.')) { url = url.slice(4); } return url; } VARIOS Set daily task function onceADayTask () { let now = new Date(); let target = new Date( now.getFullYear(), now.getMonth(), now.getDate() + 1, // the next day, ... 5, 0, 0 // ...at 05:00:00 hours server local time ); let msToTask = target.getTime() - now.getTime(); setTimeout(function () { // do whatever you want onceADayTask(); }, msToTask); } Check Date valid fails 30-31 feb, 31 apr and so on ... if (isNaN(new Date(date).getTime())) { return 'incorrect date'; // date not valid date } Random Colors function getRandomColor () { let letters = '0123456789ABCDEF'.split(''); let color = '#'; for (let i = 0; i < 6; i++) { color += letters[Math.floor(Math.random() * 16)]; } return color; } Check Image exists const image = new Image(); image.onload = () => { // exists }; image.onerror = () => { // not exists }; image.src = linkToImage; Check isJSON function isJSON(data) { try { JSON.parse(data); } catch (e) { return false; } return true; } DATE AddDays to Date function addDays (date, days) { let result = new Date(date); result.setDate(result.getDate() + days); return result; }","title":"Javascript snippets"},{"location":"javascript-snippets/#javascript-snippets","text":"","title":"JAVASCRIPT SNIPPETS"},{"location":"javascript-snippets/#numbers","text":"","title":"NUMBERS"},{"location":"javascript-snippets/#random-numbers","text":"function randomInt (min, max) { return Math.floor(Math.random() * (max - min + 1) + min); }","title":"Random Numbers"},{"location":"javascript-snippets/#areallcharsnumbers","text":"function areAllCharsNumbers (str) { return str.match(/^\\d+$/); }","title":"areAllCharsNumbers"},{"location":"javascript-snippets/#remove-trailing-zeroes","text":"const num = 6.76789; num.toFixed(2); // return 6.77 const num = 6; num.toFixed(3); // return 6.000 Number(num.toFixed(2)); // return 6.77 , 6 parseFloat(num.toFixed(3)); // return 6.77 , 6","title":"remove trailing zeroes"},{"location":"javascript-snippets/#strings","text":"","title":"STRINGS"},{"location":"javascript-snippets/#create-uuidv4","text":"// vale para el navegador y para nodejs function generateUUID() { const template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11; const uuid = template.replace(/[018]/g, function (c) { const random = crypto.getRandomValues(new Uint8Array(1))[0]; const value = (c ^ random & 15 >> c / 4).toString(16); return value; }); return uuid; }","title":"Create UUIDv4"},{"location":"javascript-snippets/#clean-whitespaces","text":"function removeAllWhitespaces (str) { return str.replace(/\\s+/g, ''); } function replaceAllWhitespacesByChar (str, otherChar) { return str.replace(/\\s+/g, otherChar); } function replaceMultipleWhitespacesWithASingleSpace(str) { return str.replace(/\\s\\s+/g, ' '); }","title":"Clean whitespaces"},{"location":"javascript-snippets/#remove-empty-strings","text":"Eliminar las cadenas vacias de un array let arr = [\"I\", \"am\", \"\", \"still\", \"here\", \"\", \"man\"] // arr = [\"I\", \"am\", \"\", \"still\", \"here\", \"\", \"man\"] // ES5 arr = arr.filter(Boolean) // ES6 arr = arr.filter(v=>v!='');","title":"Remove empty strings"},{"location":"javascript-snippets/#arrays","text":"","title":"ARRAYS"},{"location":"javascript-snippets/#initializemultiarray","text":"function initializeMultiArray (cols, rows, value) { let array = []; for (let i = 0; i < cols; i++) { array[i] = []; for (let j = 0; j < rows; j++) { array[i][j] = value; } } return array; }","title":"InitializeMultiArray"},{"location":"javascript-snippets/#order-array-by-property","text":"function orderArrayByPropertyName (property) { let sortOrder = 1; if (property[0] === '-') { sortOrder = -1; property = property.substr(1); } return function (a, b) { let result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0; return result * sortOrder; }; }","title":"Order Array by Property"},{"location":"javascript-snippets/#objects","text":"","title":"OBJECTS"},{"location":"javascript-snippets/#isemptyobject","text":"function objectIsEmpty(obj) { return Object.keys(obj).length === 0 && obj.constructor === Object; }","title":"isEmpty(Object)"},{"location":"javascript-snippets/#fetch","text":"async function fetchData(c, data) { const options = { method: 'GET', signal: AbortSignal.timeout(5000), headers: { 'Authorization': `Bearer ${\"token\"}`, 'Accept-Charset': 'utf-8', }, }; const url = c.API_URL + c.API_ENDPOINT; try { const response = await fetch(url, options); if (response.ok) { const data = await response.json(); return data; } else { throw new Error(response.status + \" \" + response.statusText); } } catch (err) { console.log('ERROR fetchData => ', err); } } async function fetchData(c, data) { const options = { method: 'POST', signal: AbortSignal.timeout(5000), headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': `Bearer ${\"token\"}`, 'Accept-Charset': 'utf-8' }, body: new URLSearchParams({ 'key': c.API_KEY, //o el token en el header 'data': JSON.stringify(data) }), }; const url = c.API_URL + c.API_ENDPOINT; try { const response = await fetch(url, options); if (response.ok) { const data = await response.json(); return data; } else { throw new Error(response.status + \" \" + response.statusText); } } catch (err) { console.log('ERROR fetchData => ', err); } } // Si la API espera JSON, // cambiar el \"Content-Type\" : \"application/json\" // y convertir body a JSON con JSON.stringify()","title":"FETCH"},{"location":"javascript-snippets/#ajax-requests","text":"","title":"AJAX REQUESTS"},{"location":"javascript-snippets/#get","text":"function getAjaxData (urlData, callback) { const xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () { if (xhr.readyState === 4) { // 4 = \"DONE\" if (xhr.status === 200) { // 200 =\"OK\" callback(JSON.parse(xhr.responseText)); } else { console.log('Error: ' + xhr.status); } } }; xhr.open('GET', urlData); // add false to synchronous request xhr.send(); }","title":"GET"},{"location":"javascript-snippets/#get-post-put","text":"function makeAjaxRequest (url, action, params, sendCookie , callback) { const xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () { if (xhr.readyState === 4) { // 4 = \"DONE\" if (xhr.status === 200) { // 200 =\"OK\" if (action === 'GET' || action === 'POST') { try { callback(JSON.parse(xhr.responseText)); } catch (e) { console.log('Error parsing Json => ', e); callback({}); } } else { callback(xhr.status); } } else { console.log('Error: ' + xhr.status); } } }; xhr.open(action, url); if (sendCookie) { xhr.withCredentials = true; // allow send cookies } if (action === 'GET') { xhr.send(); } else if (action !== 'GET') { xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8'); if (params) { xhr.send(params); } else { xhr.send(); } // console.log('Request Sent') } }","title":"GET, POST, PUT ..."},{"location":"javascript-snippets/#asyncawait-request","text":"async function init() { try { const data = await makeRequest(url, 'POST', param); } catch (err) { console.error(\"ERROR FETCHING DATA => \", err); } } function makeRequest(url, method, param) { return new Promise(function (resolve, reject) { let xhr = new XMLHttpRequest(); xhr.open(method, url); xhr.onload = function () { console.log(xhr.status); if (xhr.status >= 200 && xhr.status < 300) { resolve(xhr.response); } else { reject({ status: xhr.status, statusText: xhr.statusText }); } }; xhr.onerror = function () { reject({ status: xhr.status, statusText: xhr.statusText }); }; if (method === 'GET') { xhr.send(); } else if (method !== 'GET') { xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8'); if (param) { xhr.send(param); } else { xhr.send(); } } }); }","title":"ASYNC/AWAIT REQUEST"},{"location":"javascript-snippets/#wait-multiple-requests","text":"let calls = numberOfCalls; for (let i = 0; i < calls; i++) { asyncOperation(params, function (result) { calls--; if (calls <= 0) { // all calls done } }); }","title":"Wait Multiple Requests"},{"location":"javascript-snippets/#network","text":"","title":"NETWORK"},{"location":"javascript-snippets/#validate-ip","text":"function isValidIP(ip) { const ip4 = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/; const ip6 = /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/; if (ip4.test(ip)) { return true; } if (ip6.test(ip)) { return true; } return false; }","title":"Validate IP"},{"location":"javascript-snippets/#validate-hostname","text":"function isValidHostname(hostname) { if (!hostname || hostname.length > 255) { return false; } const condition = /^(?!-)[A-Za-z0-9-]{1,63}(?<!-)$/; const parts = hostname.split('.'); for (let part of parts) { if (!condition.test(part)) { return false; } } return true; }","title":"Validate Hostname"},{"location":"javascript-snippets/#validate-url","text":"function isValidURL(url) { const valid = [\"http\", \"https\"]; const invalid = [\"localhost\", \"127.0.0.1\"]; try { const myUrl = new URL(url); const protocol = myUrl.protocol.replace(\":\", \"\"); const hostname = myUrl.hostname; return valid.includes(protocol) && !invalid.includes(hostname); } catch (err) { return false; } }","title":"Validate URL"},{"location":"javascript-snippets/#remove-protocol-www","text":"function cleanUrl(url) { if (url.startsWith('https://')) { url = url.slice(8); } else if (url.startsWith('http://')) { url = url.slice(7); } if (url.startsWith('www.')) { url = url.slice(4); } return url; }","title":"Remove protocol-www"},{"location":"javascript-snippets/#varios","text":"","title":"VARIOS"},{"location":"javascript-snippets/#set-daily-task","text":"function onceADayTask () { let now = new Date(); let target = new Date( now.getFullYear(), now.getMonth(), now.getDate() + 1, // the next day, ... 5, 0, 0 // ...at 05:00:00 hours server local time ); let msToTask = target.getTime() - now.getTime(); setTimeout(function () { // do whatever you want onceADayTask(); }, msToTask); }","title":"Set daily task"},{"location":"javascript-snippets/#check-date-valid","text":"fails 30-31 feb, 31 apr and so on ... if (isNaN(new Date(date).getTime())) { return 'incorrect date'; // date not valid date }","title":"Check Date valid"},{"location":"javascript-snippets/#random-colors","text":"function getRandomColor () { let letters = '0123456789ABCDEF'.split(''); let color = '#'; for (let i = 0; i < 6; i++) { color += letters[Math.floor(Math.random() * 16)]; } return color; }","title":"Random Colors"},{"location":"javascript-snippets/#check-image-exists","text":"const image = new Image(); image.onload = () => { // exists }; image.onerror = () => { // not exists }; image.src = linkToImage;","title":"Check Image exists"},{"location":"javascript-snippets/#check-isjson","text":"function isJSON(data) { try { JSON.parse(data); } catch (e) { return false; } return true; }","title":"Check isJSON"},{"location":"javascript-snippets/#date","text":"","title":"DATE"},{"location":"javascript-snippets/#adddays-to-date","text":"function addDays (date, days) { let result = new Date(date); result.setDate(result.getDate() + days); return result; }","title":"AddDays to Date"},{"location":"javascript/","text":"JAVASCRIPT console.log() prompt(\"introduce datos aqui\") confirm(\"Aceptas si o no\") alert(\"Ventana en la pantalla\") // Comentarios de una linea /* ... /* Comentarios multilinea OPERADORES Aritmeticos + Suma - Resta * Multiplicacion / Division % Modulo, lo que sobra de la division entera ++ Incremento -- Decremento Asignacion = x = y += x = x + y -= x = x - y *= x = x * y /= x = x / y %= x = x % y Comparacion == igual === igual valor e igual tipo != no igual !== no igual valor ni igual tipo > mayor que < menor que <= mayor o igual que >= menor o igual que Logicos && AND || OR ! NOT Ternario condici\u00f3n ? true : false var edad = 21 var mayorEdad = (edad > 18 ? alert(\"Eres mayor\"): alert(\"Eres menor\")); Unitarios typeof(variableQueSea) o typeof valor - Devuelve una string con el tipo de la variable dato typeof(undefined) // \"undefined\" typeof(null) // \"object\" typeof(valor booleano) // \"boolean\" typeof(valor numerico) // \"number\" typeof(cadena) // \"string\" typeof(funcion) // \"function\" typeof(otros valores) // \"object\" // null devolviendo object es un bug que no se puede arreglar debido // a todo el codigo ya existente que cascaria valor instanceof Constr - devuelve true si el valor ha sido creado por el constructor Constr {} instanceof Object // true [] instanceof Object // true, Array es un subconstructor de Object null instanceof Object // false var b = new Bar(); b instanceof bar; // true in - Devuelve true si la propiedad especificada existe en el objeto especificado propiedadNombreOrNumero in nombreObjeto var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); 0 in trees; // true 3 in trees; // true 6 in trees; // false \"bay\" in trees; // false (especificar indice, no valor en ese indice \"length\" in trees; // true (length is una propiedad de Array) VARIABLES En javascript las variables no tienen tipos, son los valores quienes tienen tipos Las variables se pasan siempre por valor, pero cuando una variable se refiere a un objeto (incluyendo arrays) ese valor es una referencia al objeto Asi cambiar el valor de la variable no cambia el objeto o valor primitivo subyacente, solo apunta la variable a una nueva primitiva u objeto Al cambiar una propiedad de un objeto referenciado por una variable cambia el objeto que subyacente Alcance La visibilidad es hacia fuera en las funciones. Yo veo las variables de las funciones externas que me contienen pero no veo las de dentro Global - Declarada fuera de una funcion var carName = 'volvo'; // codigo aqui puede usar carName function myFunction() { // codigo aqui puede usar carName } - Si asigno un valor a una variable no declarada, esta se convierte en global // codigo aqui puede usar carName function myFunction() { carName = 'volvo'; // codigo aqui puede usar carName } - Shadowing var carName = 'volvo'; function myFunction() { var carName = \"seat\"; console.log(carName); // seat, la var local oculta a la global } Local Variables declaradas dentro de una funcion permanecen locales a esa funcion // codigo aqui NO puede usar carName function myFunction() { var carName = 'volvo'; // codigo aqui puede usar carName } Hoisting Significa mover al comienzo del alcance o rango de vision (scope) Todas las declaraciones de variables son hoisted (levantadas) - La declaracion se mueve al comienzo de la funcion aunque la asignacion permanece donde estan function foo () { console.log(tmp); // undefined en vez de cascar por tmp is not defined if (false) { var tmp = 3; // aqui no entra } } // es por el hoisted que hace que la funcion se ejecute asi function foo() { var tmp; // hoisted declaration , aqui se hace la declaracion console.log(tmp); if (false) { tmp = 3; // aqui permanece la asignacion } } Conversion de tipos Number(string) // Convierte cadena string en un numero parseInt(string) // Convierte la cadena string en un numero entero parseFloat(string) // Convierte la cadena string en un numero flotante String(numero) // Convierte el numero en una string numero.toString() // equivale a String(numero) y devuelve una string Array.toString() // convierte un array en una string con los elementos // separados por una coma De Objeto a Array const createEvents = () => { let controls = document.getElementsByClassName('control'); // ambas son conversiones validas controls = Array.from(controls) controls = Object.values(controls); // ahora puedo usar forEach controls.forEach(function (element, i) { console.log(i, element); }); }; NUMEROS Internamente son un numero flotante de 64 bits NaN (Not a number) - no equivale a ningun valor ni siquiera a el mismo Infinity - es mayor que cualquier otro numero (excepto NaN) y es menor que cualquier numero (excepto NaN). util como valores por defecto para buscar minimos y maximos Metodos : isNan(numero) - Detecta si es numero o no numero.toFixed(n) - Redondea a n decimales (devuelve una string) numero.toPrecision(n) - Redondea a n digitos decimales incluidos (devuelve una string) numero.toExponential(n) - Representa el numero en notacion exponencial (devuelve una string) numero.toString() - equivale a String(numero) y devuelve una string STRING Puede estar entre comillas simples o comillas dobles Las cadenas tienen un propiedad length. \"cadena\".length Las cadenas son inmutables. no se pueden cambiar pero si crear nuevas Para escapar caracteres usamos \\ \\n nueva linea por ejemplo Metodos parseInt(string) - Convierte la cadena string en un numero String.fromCharCode(car1) - Convierte un codigo de letra en una cadena con la letra var codigo = 65; var letra = String.fromCharCode(codigo); // letra = \"A\" string.fromCharCode(car1, car2, ...) var a = String.fromCharCode(67, 97, 116); // a is 'Cat' string.charAt(pos) - Devuelve la letra en la posicion pos var name = 'Curly'; var initial = name.charAt(0); // initial is 'C' string.charCodeAt(pos) - Devuelve el codigo de la letra en la posicion pos var name = 'Curly'; var initial = name.charCodeAt(0); // initial is 67 string.concat(str1, str2, ...) - Junta los strings. Mejor usar + var s = 'C'.concat('a', 't'); // s es 'Cat' string.indexOf(cadenaBuscada, pos) - Busca una cadenaBuscada en la string y si la encuentra devuelve la posicion del primer caracter, si no devuelve -1. El parametro opcional pos indica a partir de donde buscar var text = 'Mississippi'; var p = text.indexOf('ss'); // p es 2 p = text.indexOf('ss', 3); // p es 5 p = text.indexOf('ss', 6); // p es -1 string.lastIndexOf(cadenaBuscada, pos) - Como indexOf pero busca desde atras hacia adelante \"canal\".lastIndexOf(\"a\") // returns 3 \"canal\".lastIndexOf(\"a\",2) // returns 1 \"canal\".lastIndexOf(\"a\",0) // returns -1 string.replace(valorBuscado, valorNuevo) - Reemplaza el valorBuscado por el valorNuevo solo una vez salvo que el valorBuscado sea una expresion regular var str = \"Visita mi casa\"; var res = str.replace(\"casa\", \"huerta\"); // \"Visita mi huerta\" string.search(regexp) - Busca una cadena que case con la expresion regular pasada y devuelve la posicion del primer caracter o -1 var text = 'Por la ma\u00f1ana \" yo me levanto'; var pos = text.search(/[\"']/); // pos es 14 string.slice(comienzo, fin) - Crea una nueva string desde la posicion comienzo incluida hasta la posicion fin NO incluida. Fin es opcional y por defecto es string.length var cadena = 'Hola mundo'; var res = cadena.slice(1, 4); // res es 'ola' var res = cadena.slice(2); // res es 'la mundo' string.split(separador, limite) - Crea un array de cadenas al separar el string original en piezas separadas por el parametro separador Limite es el limite de nuevas cadenas var cadena = \"Como lo llevas hoy amigo\"; var res = cadena.split(\" \", 4) // res es ['Como','lo','llevas','hoy'] string.substring(comienzo, fin) - Usar string.slice() en su lugar string.toLowerCase() - Convierte la string a minusculas string.toUpperCase() - Convierte la string a mayusculas string.match(regexp) - busca la regexp en la cadena string y devuelve las coincidencias en un array var str = \"The rain in SPAIN stays mainly in the plain\"; var res = str.match(/ain/g); console.log(res) // [ 'ain', 'ain', 'ain' ] string.trim(cadena) - Elimina los espacios en blanco y los saltos de linea del comienzo y del final de la cadena string.startsWith(\"str\") - returns boolean const domain = \"codetabs.com\"; console.log(domain.startsWith(\"www.\")); // false MAPS El objeto Map es una colecci\u00f3n de pares clave-valor. Aqu\u00ed hay algunas caracter\u00edsticas clave: const myMap = new Map Claves \u00fanicas : Cada clave en un Map es \u00fanica, lo que significa que no puede haber duplicados. Iteraci\u00f3n : Puedes iterar sobre un Map utilizando un bucle for...of , que devuelve un array de dos elementos [clave, valor] en cada iteraci\u00f3n. for (let [key, value] of myMap) { console.log(key, value); } for (let [key, value] of myMap.entries()) { console.log(key, value); } for (let key of myMap.keys()) { console.log(key); } for (let value of myMap.values()) { console.log(value); } M\u00e9todos \u00fatiles : Algunos m\u00e9todos importantes del objeto Map incluyen: set(key, value) : Agrega o actualiza un elemento con una clave y un valor. get(key) : Devuelve el valor asociado a la clave. has(key) : Verifica si una clave existe en el Map . delete(key) : Elimina un elemento por su clave. clear() : Elimina todos los elementos del Map . size : Devuelve el numero de elementos del Map let mapa = new Map(); mapa.set('a', 1); mapa.set('b', 2); console.log(mapa.get('a')); // 1 ARRAYS Los arrays en Javascript son falsos arrays pero aun asi renta su uso Heredan de Array.prototype muchos metodos muy utiles Creacion de Arrays Array Literal var vacio = []; var numeros = ['cero','uno','dos','tres','cuatro','cinco', 'seis','siete','ocho','nueve','diez']; vacio[1] // undefined numeros[1] // 'one' Array constructor var colores = new Array('blanco', 'rojo', 'azul') Iteracion de arrays No usar for in que da muchos problemas por no ser objetos puros. Podria iterar siguiendo un orden aleatorio y ademas la variable sobre la que itera(que es el indice) es una string y no un numero (asi que cuidado al hacer luego cualquier operacion con ella) for ( var i = 0; i < numeros.length; i = i + 1) { console.log(numeros[i]); } Lazy initialization En arrays multidimensionales, el segundo array no se crea por defecto y hay que inicializarlo antes de usarlo initializeMultiArray: function (cols, rows, value) { var array = []; for (var i = 0; i < cols; i++) { array[i] = []; for (var j = 0; j < rows; j++) { array[i][j] = value; } } return array; } Metodos D Destructivos - modifican los arrays sobre los que se invocan ND No Destructivos - NO modifican los arrays sobre los que se invocan A\u00f1adir elementos D array.push(item1, item2, ...) - A\u00f1ade los items al final del array. Pero cada item que a\u00f1ade lo hace como un array item var a = ['a', 'b', 'c']; var b = ['x', 'y', 'z']; var c = a.push(b, true); // a is['a', 'b', 'c', ['x', 'y', 'z'], true] // c is 5 D array.unshift(item1, item2, ...) - como push pero a\u00f1ade los items al principio del array. Devuelve la nueva length var a = ['a', 'b', 'c']; var r = a.unshift('?', '@'); // a es ['?', '@', 'a', 'b', 'c'] //r es 5 Eliminar elementos D array.pop() - Elimina y devuelve el ultimo elemento del array. Si el array vacio devuelve undefined var a = ['a', 'b', 'c']; var c = a.pop(); // a is ['a', 'b'] , c is 'c' D array.shift() - elimina el primer elemento del array y lo devuelve. Si el array esta vacio devuelve undefined var a = ['a', 'b', 'c']; var c = a.shift(); // a es ['b', 'c'] , c is 'a' Iteracion ND forEach(valor, indice) - Ejecuta una funcion una vez para cada elemento del array. var people = [ {name: 'Casey', rate: 60}, {name: 'Camille', rate: 80}, {name: 'Gordon', rate: 75}, {name: 'Nigel', rate: 120} ]; var results = []; people.forEach(function(person) { if (person.rate >= 65 && person.rate <= 90) { results.push(person); } }); ND some() - Comprueba si algunos elementos del array pasan un test definido por una funcion. Al primer elemento que da true se acaba de iteracion var ages = [3, 10, 18, 20]; function checkAdult(age) { return age >= 18; } function myFunction() { res = ages.some(checkAdult); } // res = true ND every() - Comprueba si todos los elementos del array pasan un test definido por una funcion. Al primer elemento que da false se acaba la iteracion var ages = [3, 10, 18, 20]; function checkAdult(age) { return age >= 18; } function myFunction() { res = ages.every(checkAdult); } // res = false Combinar ND array.concat(item1, item2 ...) - Va a\u00f1adiendo los items, array no cambia var a = ['a', 'b', 'c']; var b = ['x', 'y', 'z']; var c = a.concat(b, true); // c is ['a', 'b', 'c', 'x', 'y', 'z', true] Filtrar ND filter() - Crea un nuevo array con todos los elementos que pasan un test especificado en una funcion var people = [ {name: 'Casey', rate: 60}, {name: 'Camille', rate: 80}, {name: 'Gordon', rate: 75}, {name: 'Nigel', rate: 120} ]; function priceRange(person) { return (person.rate >= 65) && (person.rate <= 90); }; var results = []; results = people.filter(priceRange); El callback se invoca con tres elementos EL valor del elemento El indice del elemento El objeto Array que estamos filtrando result = result.filter(function (val, i, res) { console.log(val, i, res); }); ND reduce() - Reduce el array a un solo valor. Ejecuta una funcion suministrada para cada valor del array(de izda a derecha). El valor de return se guarda en un acumulador var total = [0, 1, 2, 3].reduce(function(a, b){ return a + b; }); // total == 6 var numbers = [65, 44, 12, 4]; function getSum(total, num) { return total + num; } console.log(numbers.reduce(getSum)); // resultado = 125 var array = [4,5,6,7,8]; var singleVal = 0; singleVal = array.reduce(function(previousVal, currentVal) { return previousVal + currentVal; }, 0); Buscar ND array.indexOf(\"elemento\") - Busca el elemento en el array y devuelve su posicion o -1 si no lo encuentra var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"]; var a = fruits.indexOf(\"Apple\"); // a = 2 ND array.lastIndexOf - Como indexOf pero desde atras hacia adelante var array = [2, 5, 9, 2]; array.lastIndexOf(2); // 3 array.lastIndexOf(7); // -1 array.lastIndexOf(2, 3); // 3 array.lastIndexOf(2, 2); // 0 array.includes(value) - Devuelve false or true si encuentra o no el elemento dentro del array function disemvowel (str) { var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']; var res = []; str.split('').forEach(function (value, index) { if (!vowels.includes(value)) res.push(value) //if (vowels.indexOf(value) === -1) res.push(value); }); return res.join(''); } Ordenar D array.sort(funcionDeComparacion) - Por defecto la comparacion la hace asumiendo que todos los elementos son strings var n = [4, 8, 15, 16, 23, 42]; n.sort(function (a, b) { return a - b; }); // n is [4, 8, 15, 16, 23, 42]; D array.reverse() - invierte todos los elementos del array y devuelve una referencia al array original (pero ya modificado) var a = ['a', 'b', 'c']; var b = a.reverse( ); // tanto a como b son ['c', 'b', 'a'] Modificar ND map() - Llama una funcion sobre cada elemento del array y crea un nuevo array con los resultados var numbers = [4, 9, 16, 25]; function myFunction() { x = numbers.map(Math.sqrt); // x = [2, 3, 4, 5] } ND array.join(separador) - crea un string concatenando todos los elementos del array usando el separador indicado que por defecto es ','. Si usas espacio en blanco como separador se unen todos sin separacion var a = ['a', 'b', 'c']; a.push('d'); var c = a.join(''); // c is 'abcd'; ND array.slice(comienzo, fin) - copia una parte del array desde el array[comienzo] incluido hasta el array[fin] NO incluido. Fin es opcional y por defecto es array.length var a = ['a', 'b', 'c']; var b = a.slice(0, 1); // b es ['a'] var c = a.slice(1); // c es ['b', 'c'] var d = a.slice(1, 2); // d es ['b'] D array.splice(comienzo, borrarCont, item1, item2, ...) - Elimina elementos reemplazandolos otros nuevos (item1, ...). El primer elemento eliminado es rarray[comienzo] y a partir de aqui (el incluido) elimina los siguientes borrarCont. Inserta los items en su lugar . Devuelve los elementos borrados var a = ['a', 'b', 'c']; var r = a.splice(1, 1, 'ache', 'bug'); // a es ['a', 'ache', 'bug', 'c'] // r es ['b'] //Para borrar por ejemplo el elemento con indice = 3 de un array array.splice(indice, 1); Utilidades ND array.findIndex() - devuelve el indice del primer elemento del array que cumple la funcion que se le pasa. Si ninguno la cumple devuelve -1. const arr = [5, 12, 8, 130, 44]; function findFirstLargeNumber(element) { return element > 13; } console.log(arr.findIndex(findFirstLargeNumber)); // 3 OBJETOS Un Objeto es un contenedor de propiedades Una propiedad es un nombre y un valor (cualquiera menos undefined) Los objetos se pasan siempre por referencia for in - Itera sobre todas las propiedades del objeto incluso funciones o propiedades de los prototipos. Para evitarlo se usan filtros como typeof !== 'function' \u00f3 hasOwnProperty Tambien puede usar el for object.hasOwnProperty(nombre) Devuelve true si el objeto tiene la propiedad nombre y false si no. El prototipo no se examina var a = {member: true}; var b = Object.create(a); var t = a.hasOwnProperty('member'); // t is true var u = b.hasOwnProperty('member'); // u is false var v = b.member // v is true get - usuario.name -> devuelve \"Pepe\" set - usuario.name = \"Manolo\" usuario.newProperty = \"ciudad\" - crea una nueva propiedad ciudad in usuario - devuelve true usuario.ciudad !== undefined = true delete uuario.ciudad - elimina la propiedad del objeto bind Extraer metodos de un objeto var func = usuario.diHola; func() // typeof : cannot read property \"name\" of undefined var func = usuario.diHola.bind(usuario); // bind crea una nueva funcion cuyo this siempre tendra el valor pasado func() // \"Hola de parte de Pepe\" Crear Objetos Literales - Los valores de las propiedades se pueden obtener de cualquier expresion incluso de otros objetos anidados - Bueno para la creaci\u00f3n de nuevos valores de objeto - NO son reusables var objetoVacio = {}; var usuario = { diHola : function() { alert(\"Hola de parte de\", this.name); }, name : \"Pepe\", edad : 50, nacimiento : { // los objetos se pueden anidar fecha: \"01-01-1980\", lugar: \"La Tierra\" } }; Constructores Herencia - En javascript los objetos heredan directamente de otros objetos (prototipos) - Con el operador new podemos montarnos factorias de objetos y hacer un pseudoclasico patron de dise\u00f1o Son factorias de objetos, similar a las clases de otros lenguajes // REUSABLE function Punto(x, y) { this.x = x; this.y = y; } Punto.prototype.dist = function () { return Math.sqrt(this.x*this.x + this.y*this.y); }; var p1 = new Punto(2, 7); var p2 = new Punto(3, 4)); p1.y // 7 p2.dist // 5 Object.keys Object.keys(obj) devuelve un array de cadenas formado por los propiedades del objeto // simple array var arr = ['a', 'b', 'c']; console.log(Object.keys(arr)); // console: ['0', '1', '2'] // array like object var obj = { 0: 'a', 1: 'b', 2: 'c' }; console.log(Object.keys(obj)); // console: ['0', '1', '2'] // array like object with random key ordering var anObj = { 100: 'a', 2: 'b', 7: 'c' }; console.log(Object.keys(anObj)); // console: ['2', '7', '100'] let days = { '2017-05-20': { users: ['user1', 'user2'], hits: '4' }, '2017-05-21': { users: ['user3'], hits: '5' } } // convert users[] to users.length Object.keys(days).map(function (index) { if (Array.isArray(days[index].users)) { days[index].users = days[index].users.length; } }); Object.entries object.entries const assetsList = { 'crew1': path + 'crew/crew1.png', 'crew2': path + 'crew/crew2.png', 'crew3': path + 'crew/crew3.png', 'crew4': path + 'crew/crew4.png', 'crew5': path + 'crew/crew5.png', 'crew6': path + 'crew/crew6.png', }; export default function loadResources() { let sprites = []; const assetsNames = Object.entries(assetsList); console.log(assetsNames); assetsNames.forEach(async function (value) { console.log(value); sprites[value] = await loadResource(value[1]); }); return sprites; } Estructuras de Datos let dayHits = { 'day1': { users: ['user1', 'user2'], hits: '4' }, 'day2': { users: ['user3'], hits: '5' } } let countries = { 'US': { 'users' : 1, } } // create data struct let start = new Date(lastSaved); let end = new Date(); while (start <= end) { const dayDate = start.toISOString().split('T')[0]; days[dayDate] = { // we create key using [] 'hits': 0, 'users': [] }; start = new Date(start.setDate(start.getDate() + 1)); } let dayServices = { 'service1': { users: ['user1', 'user11'], hits: '1' }, 'service2': { users: ['user2', 'user22'], hits: '2' } } let dayHits = { 'day1': dayServices, 'day2': dayServices } console.log(dayHits['day2']['service2'].users) this Usada dentro de funciones y objetos para referirse a un objeto que lo normal es el objeto en el que la funcion opera Funcion con alcance global (no esta dentro de ningun otro objeto o funcion) this se refiere al objeto window function windowSize() { var width = this.innerWidth; var height = this.innerHeight; return [height, width] } Variables globales, las variables globales se convierten en propiedades del objeto window var width = 600; var shape = {width: 300}; var showWidth = function() { document.write(this.width); }; showWidth(); // this.width = 600 Metodo de un objeto, si una funcion se define dentro de un objeto se convierte en un metodo de ese objeto. En un metodo this se refiere al objeto que lo contiene var shape = { width: 600, height: 400, getArea: function() { return this.width * this.height; } } Funciones con nombre globales y usadas como metodos de un objeto, this se refiere al objeto que contiene a la funcion var width = 600; var shape = {width: 300}; var showWidth = function() { document.write(this.width); }; shape.getWidth = showWidth; shape.getWidth(); // this.width = 300 Prototipos Object.create crea un nuevo objeto que usa uno viejo como prototipo var proto = { sentencia : 4, condicional : 2 } var creaPrisionero = function (nombre, id) { var prisionero = Object.create(proto); prisionero.nombre = nombre; prisionero.id = id; return prisionero; } var primerPrisionero = creaPrisionero ('Juan', '65891'); var segundoPrisionero = crearPrisionero ('Pepe', '13698'); BOOLEAN true o false Operadores Logicos AND --> && OR --> || NOT --> ! Operador ternario u operador condicional test ? expression1 : expression2 // test true => expression1 // test false => expression2 var now = new Date(); var greeting = \"Good\" + ((now.getHours() > 17) ? \" evening.\" : \" day.\"); Convertir valor no-booleano a booleano - false - string : cadena Vacia \"\" numbers : 0, -0, NaN null, undefined boolean : false - true - Todo lo demas NULL - UNDEFINED Se usan para denotar la ausencia de valor Operaciones que producen undefined : - Variables sin inicializar - Parametros perdidos - Leer propiedades inexistentes - Los return de funciones que no devuelven nada explicitamente Operaciones que producen null : - El ultimo elemento de la cadena de prototipo - RegExp.prototype.exec() si no encuentra un valor que case null es para objetos undefined es para propiedades, metodos o variables que no han sido inicializadas chequear si algo es undefined \u00f3 null if (x === undefined || x === null) { ... } // o aprovechar que tanto undefined como null se consideran false if (!x) { ... } ESTRUCTURAS DE CONTROL if ... else if (condicion1) { instrucciones_if_condicion1_es_true; } else if (condicion2) { instrucciones_if_condicion2_es_true; } else if (condicion3) { instrucciones_if_condicion3_es_true; } ... else { instrucciones_if_ninguna_condicion_es_true } while while El codigo puede que no se ejecute nunca while (condicion) { instrucciones_while_condicion_es_true; } do while El codigo se ejecuta minimo una vez do { instrucciones_while_condicion_es_true } while (condicion) for inicializacion - Se ejecuta antes que el bucle empiece condicion - Define la condicion para seguir ejecutando el bucle actualizacion - Se ejecuta cada vez que el bucle se ha ejecutado for (inicializacion; condicion; actualizacion) { codigo_se_ejecuta:con_cada_bucle; } for (var i = 0; i < 10; i++) { document.writeln(i); } for in Recorre todas las propiedades de un objeto o array incluidas las heredadas const obj = {a: 1, b: 2, c: 3}; for (let v in obj) { console.log(v); // a b c } Para evitar las propiedades heredadas se usa hasOwnProperty for (var key in person) { if (person.hasOwnProperty(key)) { console.log(key); } } for of Itera sobre los valores de Arrays, Strings, Maps ,NodeLists y mas colecciones const cars = ['BMW', 'Volvo', 'Mini']; let x; for (x of cars) { console.log(x); } for each ... in DEPRECATED NO USAR switch switch(expresion) { case 'uno': instrucciones; break; case 'dos': instrucciones; break; default: instrucciones_por_defecto; break; } switch (new Date().getDay()) { //getDay() numero de dia de la semana case 6: text = \"Sabado\"; break; case 0: text = \"Domingo\"; break; default: text = \"Entre semana\"; break; } FUNCIONES Las funciones son enlazadas a Function.prototype que a su vez esta enlazado a Object.prototype Cada funcion se crea con una propiedad prototype cuyo valor es un objeto con una propiedad constructor cuyo valor es la funcion Cada funcion se crea con dos propiedades ocultas - El contexto de la funcion - El codigo que implementa el comportamiento de la funcion Parametros y Argumentos Peque\u00f1a diferencia entre ambos Parametros: son las variables que se definen cuando se declara la funcion Argumentos: son los valores que se pasan a la funcion al invocarla Si a una funcion le pasamos demasiados parametros los que sobran los ignora Si a una funcion le pasamos menos parametros a los que faltan les asigna undefined arguments object - Un objeto similar a un Array (pero sin ninguno de sus metodos) que se corresponde con los argumentos pasados a la funci\u00f3n. function fourArguments (a, b, c) { console.log(arguments.length); console.log(arguments[0]); console.log(arguments[3]); } fourArguments('uno', 'dos', 'tres', 'cuatro'); // function sinParametros () { return arguments; } var args = sinParametros(\"uno\",\"dos\",\"tres\",\"cuatro\",\"cinco\") args.length // 5 Asignar valores por defecto a los parametros function pair(x, y) { x = x || 0; y = y || 0; return[x,y]; } Hoisting Significa mover al comienzo del alcance o rango de vision (scope) Las declaraciones de funciones son completamente hoisted por ello se puede llamar a una funcion antes de que sea declarada Las expresiones de funciones no son hoisted y por ello no se pueden llamar antes de ser declaradas return multiples valores Para ello usan un array funcion getMedidas(anchura, altura, profundidad) { var area = anchura * altura; var volumen = anchura * altura * profundidad; var medidas = [area, volumen]; return medidas; } var area1 = getMedidas(5,4,10)[0]; var volumen1 = getMedidas(5,4,10)[1]; Invocacion Se realiza nombrefuncion(); Cuando invocamos una funcion 1- Se suspende la ejecucion de la funcion actual 2- Pasa el control y los parametros a la nueva funcion 3- Tambien se pasan this y arguments 4- El valor de this depende del patron de invocacion de los cuales existen 4 Patrones de invocacion - Metodos, this se refiere al objecto desde el que se invoca el metodo - Funcion, this se refiere al objeto global - Constructor, this se refiere al nuevo objeto que se esta construyendo - Apply PENDIENTE Tipos de funciones Named functions Declaracion de funciones function declaration - las puedes llamar cuando quieras antes de que se lean, incluso en el onload function nombreFuncion () { codigo; } Expresiones de funciones function expressions - no se pueden usar hasta que este encontrada y definida ANONIMAS var nombreFuncion = function() { codigo; } NAMED var referenciaFuncion = function nombreFuncion() { codigo; } Anonymous functions function () { codigo; } Autoejecutables Immediately Invoked Function Expressions (IIFEs) Una vez declarada se llama a si misma para inicializarse y estar ya disponible para otras partes de la aplicacion Se usa para declarar variables que no afectan al resto del codigo fuera de la funcion pues contiene la visibilidad de las variables Pueden usar tambien return ANONIMA (function(){ //c\u00f3digo de tu funci\u00f3n }()); // con parametros (function(w,d,o){ //Ahora w es un alias (shortcut) para window //d es un alias de document //o es un alias de otraVariableMuyLarga }(window, document, otraVariableMuyLarga)); NAMED (function nombreFuncion(){ //c\u00f3digo de tu funci\u00f3n }()); Recursividad Una funcion que se llama a si misma es recursiva function power(base, exponent) { if (exponent == 0) return 1; else return base * power(base, exponent - 1); } console.log(power(2, 3)); // \u2192 8 CLOSURE Es una forma de \"recordar\" y tener acceso a las variables de una funcion una vez que ya ha terminado de ejecutarse. Closure ejemplo1 function crearContador(x) { function sumarCantidad(y) { return x + y; } return sumarCantidad } var sumarADos = crearContador(2); console.log(sumarADos(1)); // 3 console.log(sumarADos(5)); // 7 Closure ejemplo2 function wrapValue(n) { var localVariable = n; return function() { return localVariable; }; } var wrap1 = wrapValue(1); var wrap2 = wrapValue(2); console.log(wrap1()); // \u2192 1 console.log(wrap2()); // \u2192 2 ERRORES Contexto de ejecucion Se corresponden con el alcance o visibilidad de las variables - Contexto Global : codigo que esta en el script pero no en una funcion. Solo hay un contexto global en una pagina - Contexto de funcion : codigo que se ejecuta dentro de una funcion. Cada funcion tiene su propio contexto Cada vez que un script entra en un nuevo contexto de ejecucion hay dos fases : - Preparacion :, se crea un nuevo alcance. Se crean variables, funciones y argumentos y se determina el valor de this . - Ejecucion : ahora se pueden asignar valores a las variables, se referencian las funciones y se ejecuta su codigo y se ejecutan tambien las sentencias Objeto variables - Cada contexto de ejecucion tiene su propio objeto variables que tiene las variables, funciones y parametros que estan disponibles para ese contexto. - Cada contxto de ejecucion tiene tambien acceso al padre de objeto variables Excepciones Cuando se produce un error, mira en su contexto a ver si hay codigo para manejar el error, si no lo hay sube hacia arriba por el stack buscando codigo para manejar el error. Si llega al contexto global y no lo encuentra termina la ejecucion del script y crea un objeto Error Objecto Error Tipos de objetos error Error - error generico SyntaxError - no se ha respetado la sintaxis ReferenceError - se ha referenciado una variable que o no esta declarada o esta fuera del alcance TypeError - hay un inesperado tipo de datos que no puede ser forzado RangeError - numeros en un rango no aceptable +0 URIError - metodos del tipo encodeURI() decodeURI() mal usados EvalError - funcion eval() mal usada Propiedades name - tipo de ejecucion message - descripcion fileNumber - nombre del archivo javascript lineNumber - numero de la linea con error Manejo excepciones Interrumpen la ejecucion del programa. Para evitarlo hay que capturarlas try { // intenta ejecutar este codigo } catch (exception) { // si hay una excepcion ejecuta este codigo } finally { // esto siempre se ejecuta } Throwing errors Si sabes que algo podria causar un fallo puedes generar tus propios errores antes que el interprete lo haga. throw new Error(\"mensaje\"); var width = 12; var height = 'test'; function calcArea(width, height) { try { var area = width * height; if (!isNaN(area)) { // If it is a number return area; } else { // Otherwise throw an error throw new Error('calcArea() received invalid number'); } } catch(e) { // If there was an error console.log(e.name + ' ' + e.message); return 'We were unable to calculate the area.'; } } document.getElementById('area').innerHTML = calcArea(width, height); function getPerson (id) { if (id < 0) { throw new Error('ID must not be negative: ' + id); } return { id: id }; // normally: retrieved from database } function getPersons (ids) { var result = []; ids.forEach(function (id) { try { var person = getPerson(id); result.push(person); } catch (exception) { console.log(exception); } }); return result; } PROGRAMACION ASINCRONA Tareas Asincronas - Peticiones de red (llamadas AJAX, peticiones al servidor... etc) - Operaciones con el sistema de archivos (leer/escribir archivos ... etc) - Operaciones retrasadas a proposito (alarmas, repeticiones periodicas.. etc) Callback Son funciones que se ejecutan una vez que el proceso asincrono que las llama se ha terminado function nombreCompleto (nombre, apellido, callback) { console.log(\"Me llamo \" + nombre + \" \" + apellido); callback(apellido); } var saludos = function (ape) { console.log(\"Hola, Sr \" + ape); }; nombreCompleto(\"Brus\", \"Bilis\", saludos); // url.js db.getList(printList); function printList (rows) { console.log('rows', rows); } // database.js getList: function (callback) { console.log('list'); con.query('SELECT * FROM url', function (err, rows) { if (err) throw err; // error-first callbacks convencion callback(rows); }); }, Promises var p = new Promise(function(resolve, reject) { if (/* condition */) { resolve(/* value */); // fulfilled successfully } else { reject(/* reason */); // error, rejected } }); (function () { 'use strict'; var body = document.querySelector('body'); var myImage = new Image(); // Call the function with the URL we want to load, but then chain // the promise then() method on to the end of it. This contains two // callbacks imgLoad('darth.jpg').then(function (response) { // The first runs when the promise resolves, with the // request.response specified within the resolve() method. var imageURL = window.URL.createObjectURL(response); myImage.src = imageURL; body.appendChild(myImage); // The second runs when the promise is rejected, and logs the //Error specified with the reject() method. }, function (Error) { console.log(Error); }); /* otra sintaxis }).catch(function (Error) { console.log(Error); }); */ // tambien podemos almacenar la promesa en una variable para una // sintaxis mas clara // var p = imgLoad(url); // p.then(bla bla); // p.catch(bla bla); function imgLoad (url) { // Create new promise with the Promise() constructor. This has as // its argument a function with two parameters, resolve and reject return new Promise(function (resolve, reject) { // Standard XHR to load an image var request = new XMLHttpRequest(); request.open('GET', url); request.responseType = 'blob'; // When the request loads, check whether it was successful request.onload = function () { if (request.status === 200) { // If successful, resolve the promise by passing back the // request response resolve(request.response); } else { // If it fails, reject the promise with a error message reject(Error(\"Image didn't load successfully; error code:\" + request.statusText)); } }; request.onerror = function () { // Also deal with the case when the entire request fails to // begin with // This is probably a network error, so reject the promise // with an appropriate message reject(Error('There was a network error.')); }; // Send the request request.send(); }); } }()); PATRONES DE DISE\u00d1O Libro bueno de patrones de dise\u00f1o Se usa para replicar el concepto de clases para guardar metodos y variables publicas y privadas dentro de un objeto. Eso nos permite crear una API publica para los metodos que queramos Funciones IIFE funciones autoejecutables IIFEs (function () { // todas las variables y funciones son locales a esto // pero aun tiene acceso a todas las globales }()); Importacion global (function ($, YAHOO) { // Nos da acceso a las globales jQuery (as $) y YAHOO aqui dentro }(jQuery, YAHOO)); var app = (function () { 'use strict'; function init () { console.log('Inicio', Dungeon.hola()); renderer.setMyCanvas(); renderer.drawMyCanvas(); } return { init: init }; }()); var renderer = (function () { 'use strict'; var cols = 80; var rows = 50; var ppp = 10; function setMyCanvas () { canvas = document.getElementById('myCanvas'); ctx = canvas.getContext('2d'); canvas.width = cols * ppp; canvas.height = rows * ppp; } function drawMyCanvas () { console.log('Drawing Map...'); } return { setMyCanvas: setMyCanvas, drawMyCanvas: drawMyCanvas }; }()); var Dungeon = { hola: function () { return 'ROGUE'; } }; addEventListener('load', app.init); Con creacion manual de objetos function User(){ var username, password; function doLogin(user,pw) { username = user; password = pw; } var publicAPI = { login: doLogin }; return publicAPI; } var fred = User(); // crea un modulo User fred.login(\"fred\", \"Battery34\"); Module Export var Modulo = (function () { var mod = {}; var privadaVariable = 1; function privadoMetodo () { return privadaVariable++; } mod.moduloPropiedad = 'Hola'; mod.moduloMetodo = function () { return privadoMetodo(); }; return mod; })(); console.log(Modulo.moduloPropiedad); // Hola console.log(Modulo.moduloMetodo()); // 1 console.log(Modulo.moduloMetodo()); // 2 Object Interface var weekDay = function() { var names = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\"]; return { name: function(number) { return names[number]; }, number: function(name) { return names.indexOf(name); } }; }(); console.log(weekDay.name(weekDay.number(\"Sunday\"))); // \u2192 Sunday Object literal var myModule = { myProperty: \"someValue\", myConfig: { useCaching: true, language: \"en\" }, saySomething: function () { console.log( \"Where is Paul Irish today?\" ); }, reportMyConfig: function () { console.log( \"Caching is: \" + ( this.myConfig.useCaching ? \"enabled\" : \"disabled\") ); }, updateMyConfig: function( newConfig ) { if ( typeof newConfig === \"object\" ) { this.myConfig = newConfig; console.log( this.myConfig.language ); } } }; myModule.saySomething(); // Where is Paul Irish today? myModule.reportMyConfig(); // Caching is: enabled myModule.updateMyConfig({ // fr language: \"fr\", useCaching: false }); myModule.reportMyConfig(); // Caching is: disabled Datos: Arrays vs Objects Grupos de objetos se pueden almacenar en arrays o como propiedades de otros objetos Objetos en un array var people = [ {name: 'Casey ', rate: 70, active: true}, {name: 'Camille', rate: 80, active: true}, {name: 'Gordon', rate: 75, active: false}, {name: 'Nigel', rate: 120, active: true} ] Objetos como propiedades de otros objetos var people = { Casey= {rate: 70, active: true}, Camille = {rate: 80, active: true}, Gordon= {rate: 75, active: false} , Nigel = {rate: 120, active: true } } ES6 const - let const Crea constantes que no se pueden modificar, ha de asignarse el valor en la declaracion let Declara variables que no son accesibles mas alla del ambito de creacion Ejemplo mejor: para los for funcion arrow Para las funciones anonimas // ES5 var multiplicar = function(x, y) { return x * y; } // ES6 var multiplicar = (x, y) => { return x * y }; template strings let nombre1 = \"JavaScript\"; let nombre2 = \"awesome\"; console.log(`S\u00f3lo quiero decir que ${nombre1} is ${nombre2}`); modulos bar.js function hello(who) { return \"Let me introduce: \" + who; } export hello; foo.js import hello from \"bar\"; // import only `hello()` from \"bar\" module var hungry = \"hippo\"; function awesome() { console.log( hello( hungry ).toUpperCase() ); } export awesome; baz.js module foo from \"foo\"; // import the entire \"foo\" and \"bar\" modules module bar from \"bar\"; console.log( bar.hello( \"rhino\" ) ); // Let me introduce: rhino foo.awesome(); // LET ME INTRODUCE: HIPPO","title":"Javascript"},{"location":"javascript/#javascript","text":"console.log() prompt(\"introduce datos aqui\") confirm(\"Aceptas si o no\") alert(\"Ventana en la pantalla\") // Comentarios de una linea /* ... /* Comentarios multilinea","title":"JAVASCRIPT"},{"location":"javascript/#operadores","text":"Aritmeticos + Suma - Resta * Multiplicacion / Division % Modulo, lo que sobra de la division entera ++ Incremento -- Decremento Asignacion = x = y += x = x + y -= x = x - y *= x = x * y /= x = x / y %= x = x % y Comparacion == igual === igual valor e igual tipo != no igual !== no igual valor ni igual tipo > mayor que < menor que <= mayor o igual que >= menor o igual que Logicos && AND || OR ! NOT Ternario condici\u00f3n ? true : false var edad = 21 var mayorEdad = (edad > 18 ? alert(\"Eres mayor\"): alert(\"Eres menor\")); Unitarios typeof(variableQueSea) o typeof valor - Devuelve una string con el tipo de la variable dato typeof(undefined) // \"undefined\" typeof(null) // \"object\" typeof(valor booleano) // \"boolean\" typeof(valor numerico) // \"number\" typeof(cadena) // \"string\" typeof(funcion) // \"function\" typeof(otros valores) // \"object\" // null devolviendo object es un bug que no se puede arreglar debido // a todo el codigo ya existente que cascaria valor instanceof Constr - devuelve true si el valor ha sido creado por el constructor Constr {} instanceof Object // true [] instanceof Object // true, Array es un subconstructor de Object null instanceof Object // false var b = new Bar(); b instanceof bar; // true in - Devuelve true si la propiedad especificada existe en el objeto especificado propiedadNombreOrNumero in nombreObjeto var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); 0 in trees; // true 3 in trees; // true 6 in trees; // false \"bay\" in trees; // false (especificar indice, no valor en ese indice \"length\" in trees; // true (length is una propiedad de Array)","title":"OPERADORES"},{"location":"javascript/#variables","text":"En javascript las variables no tienen tipos, son los valores quienes tienen tipos Las variables se pasan siempre por valor, pero cuando una variable se refiere a un objeto (incluyendo arrays) ese valor es una referencia al objeto Asi cambiar el valor de la variable no cambia el objeto o valor primitivo subyacente, solo apunta la variable a una nueva primitiva u objeto Al cambiar una propiedad de un objeto referenciado por una variable cambia el objeto que subyacente","title":"VARIABLES"},{"location":"javascript/#alcance","text":"La visibilidad es hacia fuera en las funciones. Yo veo las variables de las funciones externas que me contienen pero no veo las de dentro Global - Declarada fuera de una funcion var carName = 'volvo'; // codigo aqui puede usar carName function myFunction() { // codigo aqui puede usar carName } - Si asigno un valor a una variable no declarada, esta se convierte en global // codigo aqui puede usar carName function myFunction() { carName = 'volvo'; // codigo aqui puede usar carName } - Shadowing var carName = 'volvo'; function myFunction() { var carName = \"seat\"; console.log(carName); // seat, la var local oculta a la global } Local Variables declaradas dentro de una funcion permanecen locales a esa funcion // codigo aqui NO puede usar carName function myFunction() { var carName = 'volvo'; // codigo aqui puede usar carName } Hoisting Significa mover al comienzo del alcance o rango de vision (scope) Todas las declaraciones de variables son hoisted (levantadas) - La declaracion se mueve al comienzo de la funcion aunque la asignacion permanece donde estan function foo () { console.log(tmp); // undefined en vez de cascar por tmp is not defined if (false) { var tmp = 3; // aqui no entra } } // es por el hoisted que hace que la funcion se ejecute asi function foo() { var tmp; // hoisted declaration , aqui se hace la declaracion console.log(tmp); if (false) { tmp = 3; // aqui permanece la asignacion } }","title":"Alcance"},{"location":"javascript/#conversion-de-tipos","text":"Number(string) // Convierte cadena string en un numero parseInt(string) // Convierte la cadena string en un numero entero parseFloat(string) // Convierte la cadena string en un numero flotante String(numero) // Convierte el numero en una string numero.toString() // equivale a String(numero) y devuelve una string Array.toString() // convierte un array en una string con los elementos // separados por una coma De Objeto a Array const createEvents = () => { let controls = document.getElementsByClassName('control'); // ambas son conversiones validas controls = Array.from(controls) controls = Object.values(controls); // ahora puedo usar forEach controls.forEach(function (element, i) { console.log(i, element); }); };","title":"Conversion de tipos"},{"location":"javascript/#numeros","text":"Internamente son un numero flotante de 64 bits NaN (Not a number) - no equivale a ningun valor ni siquiera a el mismo Infinity - es mayor que cualquier otro numero (excepto NaN) y es menor que cualquier numero (excepto NaN). util como valores por defecto para buscar minimos y maximos Metodos : isNan(numero) - Detecta si es numero o no numero.toFixed(n) - Redondea a n decimales (devuelve una string) numero.toPrecision(n) - Redondea a n digitos decimales incluidos (devuelve una string) numero.toExponential(n) - Representa el numero en notacion exponencial (devuelve una string) numero.toString() - equivale a String(numero) y devuelve una string","title":"NUMEROS"},{"location":"javascript/#string","text":"Puede estar entre comillas simples o comillas dobles Las cadenas tienen un propiedad length. \"cadena\".length Las cadenas son inmutables. no se pueden cambiar pero si crear nuevas Para escapar caracteres usamos \\ \\n nueva linea por ejemplo","title":"STRING"},{"location":"javascript/#metodos","text":"parseInt(string) - Convierte la cadena string en un numero String.fromCharCode(car1) - Convierte un codigo de letra en una cadena con la letra var codigo = 65; var letra = String.fromCharCode(codigo); // letra = \"A\" string.fromCharCode(car1, car2, ...) var a = String.fromCharCode(67, 97, 116); // a is 'Cat' string.charAt(pos) - Devuelve la letra en la posicion pos var name = 'Curly'; var initial = name.charAt(0); // initial is 'C' string.charCodeAt(pos) - Devuelve el codigo de la letra en la posicion pos var name = 'Curly'; var initial = name.charCodeAt(0); // initial is 67 string.concat(str1, str2, ...) - Junta los strings. Mejor usar + var s = 'C'.concat('a', 't'); // s es 'Cat' string.indexOf(cadenaBuscada, pos) - Busca una cadenaBuscada en la string y si la encuentra devuelve la posicion del primer caracter, si no devuelve -1. El parametro opcional pos indica a partir de donde buscar var text = 'Mississippi'; var p = text.indexOf('ss'); // p es 2 p = text.indexOf('ss', 3); // p es 5 p = text.indexOf('ss', 6); // p es -1 string.lastIndexOf(cadenaBuscada, pos) - Como indexOf pero busca desde atras hacia adelante \"canal\".lastIndexOf(\"a\") // returns 3 \"canal\".lastIndexOf(\"a\",2) // returns 1 \"canal\".lastIndexOf(\"a\",0) // returns -1 string.replace(valorBuscado, valorNuevo) - Reemplaza el valorBuscado por el valorNuevo solo una vez salvo que el valorBuscado sea una expresion regular var str = \"Visita mi casa\"; var res = str.replace(\"casa\", \"huerta\"); // \"Visita mi huerta\" string.search(regexp) - Busca una cadena que case con la expresion regular pasada y devuelve la posicion del primer caracter o -1 var text = 'Por la ma\u00f1ana \" yo me levanto'; var pos = text.search(/[\"']/); // pos es 14 string.slice(comienzo, fin) - Crea una nueva string desde la posicion comienzo incluida hasta la posicion fin NO incluida. Fin es opcional y por defecto es string.length var cadena = 'Hola mundo'; var res = cadena.slice(1, 4); // res es 'ola' var res = cadena.slice(2); // res es 'la mundo' string.split(separador, limite) - Crea un array de cadenas al separar el string original en piezas separadas por el parametro separador Limite es el limite de nuevas cadenas var cadena = \"Como lo llevas hoy amigo\"; var res = cadena.split(\" \", 4) // res es ['Como','lo','llevas','hoy'] string.substring(comienzo, fin) - Usar string.slice() en su lugar string.toLowerCase() - Convierte la string a minusculas string.toUpperCase() - Convierte la string a mayusculas string.match(regexp) - busca la regexp en la cadena string y devuelve las coincidencias en un array var str = \"The rain in SPAIN stays mainly in the plain\"; var res = str.match(/ain/g); console.log(res) // [ 'ain', 'ain', 'ain' ] string.trim(cadena) - Elimina los espacios en blanco y los saltos de linea del comienzo y del final de la cadena string.startsWith(\"str\") - returns boolean const domain = \"codetabs.com\"; console.log(domain.startsWith(\"www.\")); // false","title":"Metodos"},{"location":"javascript/#maps","text":"El objeto Map es una colecci\u00f3n de pares clave-valor. Aqu\u00ed hay algunas caracter\u00edsticas clave: const myMap = new Map Claves \u00fanicas : Cada clave en un Map es \u00fanica, lo que significa que no puede haber duplicados. Iteraci\u00f3n : Puedes iterar sobre un Map utilizando un bucle for...of , que devuelve un array de dos elementos [clave, valor] en cada iteraci\u00f3n. for (let [key, value] of myMap) { console.log(key, value); } for (let [key, value] of myMap.entries()) { console.log(key, value); } for (let key of myMap.keys()) { console.log(key); } for (let value of myMap.values()) { console.log(value); } M\u00e9todos \u00fatiles : Algunos m\u00e9todos importantes del objeto Map incluyen: set(key, value) : Agrega o actualiza un elemento con una clave y un valor. get(key) : Devuelve el valor asociado a la clave. has(key) : Verifica si una clave existe en el Map . delete(key) : Elimina un elemento por su clave. clear() : Elimina todos los elementos del Map . size : Devuelve el numero de elementos del Map let mapa = new Map(); mapa.set('a', 1); mapa.set('b', 2); console.log(mapa.get('a')); // 1","title":"MAPS"},{"location":"javascript/#arrays","text":"Los arrays en Javascript son falsos arrays pero aun asi renta su uso Heredan de Array.prototype muchos metodos muy utiles Creacion de Arrays Array Literal var vacio = []; var numeros = ['cero','uno','dos','tres','cuatro','cinco', 'seis','siete','ocho','nueve','diez']; vacio[1] // undefined numeros[1] // 'one' Array constructor var colores = new Array('blanco', 'rojo', 'azul') Iteracion de arrays No usar for in que da muchos problemas por no ser objetos puros. Podria iterar siguiendo un orden aleatorio y ademas la variable sobre la que itera(que es el indice) es una string y no un numero (asi que cuidado al hacer luego cualquier operacion con ella) for ( var i = 0; i < numeros.length; i = i + 1) { console.log(numeros[i]); } Lazy initialization En arrays multidimensionales, el segundo array no se crea por defecto y hay que inicializarlo antes de usarlo initializeMultiArray: function (cols, rows, value) { var array = []; for (var i = 0; i < cols; i++) { array[i] = []; for (var j = 0; j < rows; j++) { array[i][j] = value; } } return array; }","title":"ARRAYS"},{"location":"javascript/#metodos_1","text":"D Destructivos - modifican los arrays sobre los que se invocan ND No Destructivos - NO modifican los arrays sobre los que se invocan A\u00f1adir elementos D array.push(item1, item2, ...) - A\u00f1ade los items al final del array. Pero cada item que a\u00f1ade lo hace como un array item var a = ['a', 'b', 'c']; var b = ['x', 'y', 'z']; var c = a.push(b, true); // a is['a', 'b', 'c', ['x', 'y', 'z'], true] // c is 5 D array.unshift(item1, item2, ...) - como push pero a\u00f1ade los items al principio del array. Devuelve la nueva length var a = ['a', 'b', 'c']; var r = a.unshift('?', '@'); // a es ['?', '@', 'a', 'b', 'c'] //r es 5 Eliminar elementos D array.pop() - Elimina y devuelve el ultimo elemento del array. Si el array vacio devuelve undefined var a = ['a', 'b', 'c']; var c = a.pop(); // a is ['a', 'b'] , c is 'c' D array.shift() - elimina el primer elemento del array y lo devuelve. Si el array esta vacio devuelve undefined var a = ['a', 'b', 'c']; var c = a.shift(); // a es ['b', 'c'] , c is 'a' Iteracion ND forEach(valor, indice) - Ejecuta una funcion una vez para cada elemento del array. var people = [ {name: 'Casey', rate: 60}, {name: 'Camille', rate: 80}, {name: 'Gordon', rate: 75}, {name: 'Nigel', rate: 120} ]; var results = []; people.forEach(function(person) { if (person.rate >= 65 && person.rate <= 90) { results.push(person); } }); ND some() - Comprueba si algunos elementos del array pasan un test definido por una funcion. Al primer elemento que da true se acaba de iteracion var ages = [3, 10, 18, 20]; function checkAdult(age) { return age >= 18; } function myFunction() { res = ages.some(checkAdult); } // res = true ND every() - Comprueba si todos los elementos del array pasan un test definido por una funcion. Al primer elemento que da false se acaba la iteracion var ages = [3, 10, 18, 20]; function checkAdult(age) { return age >= 18; } function myFunction() { res = ages.every(checkAdult); } // res = false Combinar ND array.concat(item1, item2 ...) - Va a\u00f1adiendo los items, array no cambia var a = ['a', 'b', 'c']; var b = ['x', 'y', 'z']; var c = a.concat(b, true); // c is ['a', 'b', 'c', 'x', 'y', 'z', true] Filtrar ND filter() - Crea un nuevo array con todos los elementos que pasan un test especificado en una funcion var people = [ {name: 'Casey', rate: 60}, {name: 'Camille', rate: 80}, {name: 'Gordon', rate: 75}, {name: 'Nigel', rate: 120} ]; function priceRange(person) { return (person.rate >= 65) && (person.rate <= 90); }; var results = []; results = people.filter(priceRange); El callback se invoca con tres elementos EL valor del elemento El indice del elemento El objeto Array que estamos filtrando result = result.filter(function (val, i, res) { console.log(val, i, res); }); ND reduce() - Reduce el array a un solo valor. Ejecuta una funcion suministrada para cada valor del array(de izda a derecha). El valor de return se guarda en un acumulador var total = [0, 1, 2, 3].reduce(function(a, b){ return a + b; }); // total == 6 var numbers = [65, 44, 12, 4]; function getSum(total, num) { return total + num; } console.log(numbers.reduce(getSum)); // resultado = 125 var array = [4,5,6,7,8]; var singleVal = 0; singleVal = array.reduce(function(previousVal, currentVal) { return previousVal + currentVal; }, 0); Buscar ND array.indexOf(\"elemento\") - Busca el elemento en el array y devuelve su posicion o -1 si no lo encuentra var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"]; var a = fruits.indexOf(\"Apple\"); // a = 2 ND array.lastIndexOf - Como indexOf pero desde atras hacia adelante var array = [2, 5, 9, 2]; array.lastIndexOf(2); // 3 array.lastIndexOf(7); // -1 array.lastIndexOf(2, 3); // 3 array.lastIndexOf(2, 2); // 0 array.includes(value) - Devuelve false or true si encuentra o no el elemento dentro del array function disemvowel (str) { var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']; var res = []; str.split('').forEach(function (value, index) { if (!vowels.includes(value)) res.push(value) //if (vowels.indexOf(value) === -1) res.push(value); }); return res.join(''); } Ordenar D array.sort(funcionDeComparacion) - Por defecto la comparacion la hace asumiendo que todos los elementos son strings var n = [4, 8, 15, 16, 23, 42]; n.sort(function (a, b) { return a - b; }); // n is [4, 8, 15, 16, 23, 42]; D array.reverse() - invierte todos los elementos del array y devuelve una referencia al array original (pero ya modificado) var a = ['a', 'b', 'c']; var b = a.reverse( ); // tanto a como b son ['c', 'b', 'a'] Modificar ND map() - Llama una funcion sobre cada elemento del array y crea un nuevo array con los resultados var numbers = [4, 9, 16, 25]; function myFunction() { x = numbers.map(Math.sqrt); // x = [2, 3, 4, 5] } ND array.join(separador) - crea un string concatenando todos los elementos del array usando el separador indicado que por defecto es ','. Si usas espacio en blanco como separador se unen todos sin separacion var a = ['a', 'b', 'c']; a.push('d'); var c = a.join(''); // c is 'abcd'; ND array.slice(comienzo, fin) - copia una parte del array desde el array[comienzo] incluido hasta el array[fin] NO incluido. Fin es opcional y por defecto es array.length var a = ['a', 'b', 'c']; var b = a.slice(0, 1); // b es ['a'] var c = a.slice(1); // c es ['b', 'c'] var d = a.slice(1, 2); // d es ['b'] D array.splice(comienzo, borrarCont, item1, item2, ...) - Elimina elementos reemplazandolos otros nuevos (item1, ...). El primer elemento eliminado es rarray[comienzo] y a partir de aqui (el incluido) elimina los siguientes borrarCont. Inserta los items en su lugar . Devuelve los elementos borrados var a = ['a', 'b', 'c']; var r = a.splice(1, 1, 'ache', 'bug'); // a es ['a', 'ache', 'bug', 'c'] // r es ['b'] //Para borrar por ejemplo el elemento con indice = 3 de un array array.splice(indice, 1); Utilidades ND array.findIndex() - devuelve el indice del primer elemento del array que cumple la funcion que se le pasa. Si ninguno la cumple devuelve -1. const arr = [5, 12, 8, 130, 44]; function findFirstLargeNumber(element) { return element > 13; } console.log(arr.findIndex(findFirstLargeNumber)); // 3","title":"Metodos"},{"location":"javascript/#objetos","text":"Un Objeto es un contenedor de propiedades Una propiedad es un nombre y un valor (cualquiera menos undefined) Los objetos se pasan siempre por referencia for in - Itera sobre todas las propiedades del objeto incluso funciones o propiedades de los prototipos. Para evitarlo se usan filtros como typeof !== 'function' \u00f3 hasOwnProperty Tambien puede usar el for object.hasOwnProperty(nombre) Devuelve true si el objeto tiene la propiedad nombre y false si no. El prototipo no se examina var a = {member: true}; var b = Object.create(a); var t = a.hasOwnProperty('member'); // t is true var u = b.hasOwnProperty('member'); // u is false var v = b.member // v is true get - usuario.name -> devuelve \"Pepe\" set - usuario.name = \"Manolo\" usuario.newProperty = \"ciudad\" - crea una nueva propiedad ciudad in usuario - devuelve true usuario.ciudad !== undefined = true delete uuario.ciudad - elimina la propiedad del objeto bind Extraer metodos de un objeto var func = usuario.diHola; func() // typeof : cannot read property \"name\" of undefined var func = usuario.diHola.bind(usuario); // bind crea una nueva funcion cuyo this siempre tendra el valor pasado func() // \"Hola de parte de Pepe\"","title":"OBJETOS"},{"location":"javascript/#crear-objetos","text":"Literales - Los valores de las propiedades se pueden obtener de cualquier expresion incluso de otros objetos anidados - Bueno para la creaci\u00f3n de nuevos valores de objeto - NO son reusables var objetoVacio = {}; var usuario = { diHola : function() { alert(\"Hola de parte de\", this.name); }, name : \"Pepe\", edad : 50, nacimiento : { // los objetos se pueden anidar fecha: \"01-01-1980\", lugar: \"La Tierra\" } }; Constructores Herencia - En javascript los objetos heredan directamente de otros objetos (prototipos) - Con el operador new podemos montarnos factorias de objetos y hacer un pseudoclasico patron de dise\u00f1o Son factorias de objetos, similar a las clases de otros lenguajes // REUSABLE function Punto(x, y) { this.x = x; this.y = y; } Punto.prototype.dist = function () { return Math.sqrt(this.x*this.x + this.y*this.y); }; var p1 = new Punto(2, 7); var p2 = new Punto(3, 4)); p1.y // 7 p2.dist // 5","title":"Crear Objetos"},{"location":"javascript/#objectkeys","text":"Object.keys(obj) devuelve un array de cadenas formado por los propiedades del objeto // simple array var arr = ['a', 'b', 'c']; console.log(Object.keys(arr)); // console: ['0', '1', '2'] // array like object var obj = { 0: 'a', 1: 'b', 2: 'c' }; console.log(Object.keys(obj)); // console: ['0', '1', '2'] // array like object with random key ordering var anObj = { 100: 'a', 2: 'b', 7: 'c' }; console.log(Object.keys(anObj)); // console: ['2', '7', '100'] let days = { '2017-05-20': { users: ['user1', 'user2'], hits: '4' }, '2017-05-21': { users: ['user3'], hits: '5' } } // convert users[] to users.length Object.keys(days).map(function (index) { if (Array.isArray(days[index].users)) { days[index].users = days[index].users.length; } });","title":"Object.keys"},{"location":"javascript/#objectentries","text":"object.entries const assetsList = { 'crew1': path + 'crew/crew1.png', 'crew2': path + 'crew/crew2.png', 'crew3': path + 'crew/crew3.png', 'crew4': path + 'crew/crew4.png', 'crew5': path + 'crew/crew5.png', 'crew6': path + 'crew/crew6.png', }; export default function loadResources() { let sprites = []; const assetsNames = Object.entries(assetsList); console.log(assetsNames); assetsNames.forEach(async function (value) { console.log(value); sprites[value] = await loadResource(value[1]); }); return sprites; }","title":"Object.entries"},{"location":"javascript/#estructuras-de-datos","text":"let dayHits = { 'day1': { users: ['user1', 'user2'], hits: '4' }, 'day2': { users: ['user3'], hits: '5' } } let countries = { 'US': { 'users' : 1, } } // create data struct let start = new Date(lastSaved); let end = new Date(); while (start <= end) { const dayDate = start.toISOString().split('T')[0]; days[dayDate] = { // we create key using [] 'hits': 0, 'users': [] }; start = new Date(start.setDate(start.getDate() + 1)); } let dayServices = { 'service1': { users: ['user1', 'user11'], hits: '1' }, 'service2': { users: ['user2', 'user22'], hits: '2' } } let dayHits = { 'day1': dayServices, 'day2': dayServices } console.log(dayHits['day2']['service2'].users)","title":"Estructuras de Datos"},{"location":"javascript/#this","text":"Usada dentro de funciones y objetos para referirse a un objeto que lo normal es el objeto en el que la funcion opera Funcion con alcance global (no esta dentro de ningun otro objeto o funcion) this se refiere al objeto window function windowSize() { var width = this.innerWidth; var height = this.innerHeight; return [height, width] } Variables globales, las variables globales se convierten en propiedades del objeto window var width = 600; var shape = {width: 300}; var showWidth = function() { document.write(this.width); }; showWidth(); // this.width = 600 Metodo de un objeto, si una funcion se define dentro de un objeto se convierte en un metodo de ese objeto. En un metodo this se refiere al objeto que lo contiene var shape = { width: 600, height: 400, getArea: function() { return this.width * this.height; } } Funciones con nombre globales y usadas como metodos de un objeto, this se refiere al objeto que contiene a la funcion var width = 600; var shape = {width: 300}; var showWidth = function() { document.write(this.width); }; shape.getWidth = showWidth; shape.getWidth(); // this.width = 300","title":"this"},{"location":"javascript/#prototipos","text":"Object.create crea un nuevo objeto que usa uno viejo como prototipo var proto = { sentencia : 4, condicional : 2 } var creaPrisionero = function (nombre, id) { var prisionero = Object.create(proto); prisionero.nombre = nombre; prisionero.id = id; return prisionero; } var primerPrisionero = creaPrisionero ('Juan', '65891'); var segundoPrisionero = crearPrisionero ('Pepe', '13698');","title":"Prototipos"},{"location":"javascript/#boolean","text":"true o false Operadores Logicos AND --> && OR --> || NOT --> ! Operador ternario u operador condicional test ? expression1 : expression2 // test true => expression1 // test false => expression2 var now = new Date(); var greeting = \"Good\" + ((now.getHours() > 17) ? \" evening.\" : \" day.\"); Convertir valor no-booleano a booleano - false - string : cadena Vacia \"\" numbers : 0, -0, NaN null, undefined boolean : false - true - Todo lo demas","title":"BOOLEAN"},{"location":"javascript/#null-undefined","text":"Se usan para denotar la ausencia de valor Operaciones que producen undefined : - Variables sin inicializar - Parametros perdidos - Leer propiedades inexistentes - Los return de funciones que no devuelven nada explicitamente Operaciones que producen null : - El ultimo elemento de la cadena de prototipo - RegExp.prototype.exec() si no encuentra un valor que case null es para objetos undefined es para propiedades, metodos o variables que no han sido inicializadas chequear si algo es undefined \u00f3 null if (x === undefined || x === null) { ... } // o aprovechar que tanto undefined como null se consideran false if (!x) { ... }","title":"NULL - UNDEFINED"},{"location":"javascript/#estructuras-de-control","text":"if ... else if (condicion1) { instrucciones_if_condicion1_es_true; } else if (condicion2) { instrucciones_if_condicion2_es_true; } else if (condicion3) { instrucciones_if_condicion3_es_true; } ... else { instrucciones_if_ninguna_condicion_es_true } while while El codigo puede que no se ejecute nunca while (condicion) { instrucciones_while_condicion_es_true; } do while El codigo se ejecuta minimo una vez do { instrucciones_while_condicion_es_true } while (condicion) for inicializacion - Se ejecuta antes que el bucle empiece condicion - Define la condicion para seguir ejecutando el bucle actualizacion - Se ejecuta cada vez que el bucle se ha ejecutado for (inicializacion; condicion; actualizacion) { codigo_se_ejecuta:con_cada_bucle; } for (var i = 0; i < 10; i++) { document.writeln(i); } for in Recorre todas las propiedades de un objeto o array incluidas las heredadas const obj = {a: 1, b: 2, c: 3}; for (let v in obj) { console.log(v); // a b c } Para evitar las propiedades heredadas se usa hasOwnProperty for (var key in person) { if (person.hasOwnProperty(key)) { console.log(key); } } for of Itera sobre los valores de Arrays, Strings, Maps ,NodeLists y mas colecciones const cars = ['BMW', 'Volvo', 'Mini']; let x; for (x of cars) { console.log(x); } for each ... in DEPRECATED NO USAR switch switch(expresion) { case 'uno': instrucciones; break; case 'dos': instrucciones; break; default: instrucciones_por_defecto; break; } switch (new Date().getDay()) { //getDay() numero de dia de la semana case 6: text = \"Sabado\"; break; case 0: text = \"Domingo\"; break; default: text = \"Entre semana\"; break; }","title":"ESTRUCTURAS DE CONTROL"},{"location":"javascript/#funciones","text":"Las funciones son enlazadas a Function.prototype que a su vez esta enlazado a Object.prototype Cada funcion se crea con una propiedad prototype cuyo valor es un objeto con una propiedad constructor cuyo valor es la funcion Cada funcion se crea con dos propiedades ocultas - El contexto de la funcion - El codigo que implementa el comportamiento de la funcion Parametros y Argumentos Peque\u00f1a diferencia entre ambos Parametros: son las variables que se definen cuando se declara la funcion Argumentos: son los valores que se pasan a la funcion al invocarla Si a una funcion le pasamos demasiados parametros los que sobran los ignora Si a una funcion le pasamos menos parametros a los que faltan les asigna undefined arguments object - Un objeto similar a un Array (pero sin ninguno de sus metodos) que se corresponde con los argumentos pasados a la funci\u00f3n. function fourArguments (a, b, c) { console.log(arguments.length); console.log(arguments[0]); console.log(arguments[3]); } fourArguments('uno', 'dos', 'tres', 'cuatro'); // function sinParametros () { return arguments; } var args = sinParametros(\"uno\",\"dos\",\"tres\",\"cuatro\",\"cinco\") args.length // 5 Asignar valores por defecto a los parametros function pair(x, y) { x = x || 0; y = y || 0; return[x,y]; } Hoisting Significa mover al comienzo del alcance o rango de vision (scope) Las declaraciones de funciones son completamente hoisted por ello se puede llamar a una funcion antes de que sea declarada Las expresiones de funciones no son hoisted y por ello no se pueden llamar antes de ser declaradas return multiples valores Para ello usan un array funcion getMedidas(anchura, altura, profundidad) { var area = anchura * altura; var volumen = anchura * altura * profundidad; var medidas = [area, volumen]; return medidas; } var area1 = getMedidas(5,4,10)[0]; var volumen1 = getMedidas(5,4,10)[1]; Invocacion Se realiza nombrefuncion(); Cuando invocamos una funcion 1- Se suspende la ejecucion de la funcion actual 2- Pasa el control y los parametros a la nueva funcion 3- Tambien se pasan this y arguments 4- El valor de this depende del patron de invocacion de los cuales existen 4 Patrones de invocacion - Metodos, this se refiere al objecto desde el que se invoca el metodo - Funcion, this se refiere al objeto global - Constructor, this se refiere al nuevo objeto que se esta construyendo - Apply PENDIENTE","title":"FUNCIONES"},{"location":"javascript/#tipos-de-funciones","text":"Named functions Declaracion de funciones function declaration - las puedes llamar cuando quieras antes de que se lean, incluso en el onload function nombreFuncion () { codigo; } Expresiones de funciones function expressions - no se pueden usar hasta que este encontrada y definida ANONIMAS var nombreFuncion = function() { codigo; } NAMED var referenciaFuncion = function nombreFuncion() { codigo; } Anonymous functions function () { codigo; } Autoejecutables Immediately Invoked Function Expressions (IIFEs) Una vez declarada se llama a si misma para inicializarse y estar ya disponible para otras partes de la aplicacion Se usa para declarar variables que no afectan al resto del codigo fuera de la funcion pues contiene la visibilidad de las variables Pueden usar tambien return ANONIMA (function(){ //c\u00f3digo de tu funci\u00f3n }()); // con parametros (function(w,d,o){ //Ahora w es un alias (shortcut) para window //d es un alias de document //o es un alias de otraVariableMuyLarga }(window, document, otraVariableMuyLarga)); NAMED (function nombreFuncion(){ //c\u00f3digo de tu funci\u00f3n }());","title":"Tipos de funciones"},{"location":"javascript/#recursividad","text":"Una funcion que se llama a si misma es recursiva function power(base, exponent) { if (exponent == 0) return 1; else return base * power(base, exponent - 1); } console.log(power(2, 3)); // \u2192 8","title":"Recursividad"},{"location":"javascript/#closure","text":"Es una forma de \"recordar\" y tener acceso a las variables de una funcion una vez que ya ha terminado de ejecutarse. Closure ejemplo1 function crearContador(x) { function sumarCantidad(y) { return x + y; } return sumarCantidad } var sumarADos = crearContador(2); console.log(sumarADos(1)); // 3 console.log(sumarADos(5)); // 7 Closure ejemplo2 function wrapValue(n) { var localVariable = n; return function() { return localVariable; }; } var wrap1 = wrapValue(1); var wrap2 = wrapValue(2); console.log(wrap1()); // \u2192 1 console.log(wrap2()); // \u2192 2","title":"CLOSURE"},{"location":"javascript/#errores","text":"","title":"ERRORES"},{"location":"javascript/#contexto-de-ejecucion","text":"Se corresponden con el alcance o visibilidad de las variables - Contexto Global : codigo que esta en el script pero no en una funcion. Solo hay un contexto global en una pagina - Contexto de funcion : codigo que se ejecuta dentro de una funcion. Cada funcion tiene su propio contexto Cada vez que un script entra en un nuevo contexto de ejecucion hay dos fases : - Preparacion :, se crea un nuevo alcance. Se crean variables, funciones y argumentos y se determina el valor de this . - Ejecucion : ahora se pueden asignar valores a las variables, se referencian las funciones y se ejecuta su codigo y se ejecutan tambien las sentencias Objeto variables - Cada contexto de ejecucion tiene su propio objeto variables que tiene las variables, funciones y parametros que estan disponibles para ese contexto. - Cada contxto de ejecucion tiene tambien acceso al padre de objeto variables Excepciones Cuando se produce un error, mira en su contexto a ver si hay codigo para manejar el error, si no lo hay sube hacia arriba por el stack buscando codigo para manejar el error. Si llega al contexto global y no lo encuentra termina la ejecucion del script y crea un objeto Error","title":"Contexto de ejecucion"},{"location":"javascript/#objecto-error","text":"Tipos de objetos error Error - error generico SyntaxError - no se ha respetado la sintaxis ReferenceError - se ha referenciado una variable que o no esta declarada o esta fuera del alcance TypeError - hay un inesperado tipo de datos que no puede ser forzado RangeError - numeros en un rango no aceptable +0 URIError - metodos del tipo encodeURI() decodeURI() mal usados EvalError - funcion eval() mal usada Propiedades name - tipo de ejecucion message - descripcion fileNumber - nombre del archivo javascript lineNumber - numero de la linea con error","title":"Objecto Error"},{"location":"javascript/#manejo-excepciones","text":"Interrumpen la ejecucion del programa. Para evitarlo hay que capturarlas try { // intenta ejecutar este codigo } catch (exception) { // si hay una excepcion ejecuta este codigo } finally { // esto siempre se ejecuta }","title":"Manejo excepciones"},{"location":"javascript/#throwing-errors","text":"Si sabes que algo podria causar un fallo puedes generar tus propios errores antes que el interprete lo haga. throw new Error(\"mensaje\"); var width = 12; var height = 'test'; function calcArea(width, height) { try { var area = width * height; if (!isNaN(area)) { // If it is a number return area; } else { // Otherwise throw an error throw new Error('calcArea() received invalid number'); } } catch(e) { // If there was an error console.log(e.name + ' ' + e.message); return 'We were unable to calculate the area.'; } } document.getElementById('area').innerHTML = calcArea(width, height); function getPerson (id) { if (id < 0) { throw new Error('ID must not be negative: ' + id); } return { id: id }; // normally: retrieved from database } function getPersons (ids) { var result = []; ids.forEach(function (id) { try { var person = getPerson(id); result.push(person); } catch (exception) { console.log(exception); } }); return result; }","title":"Throwing errors"},{"location":"javascript/#programacion-asincrona","text":"Tareas Asincronas - Peticiones de red (llamadas AJAX, peticiones al servidor... etc) - Operaciones con el sistema de archivos (leer/escribir archivos ... etc) - Operaciones retrasadas a proposito (alarmas, repeticiones periodicas.. etc)","title":"PROGRAMACION ASINCRONA"},{"location":"javascript/#callback","text":"Son funciones que se ejecutan una vez que el proceso asincrono que las llama se ha terminado function nombreCompleto (nombre, apellido, callback) { console.log(\"Me llamo \" + nombre + \" \" + apellido); callback(apellido); } var saludos = function (ape) { console.log(\"Hola, Sr \" + ape); }; nombreCompleto(\"Brus\", \"Bilis\", saludos); // url.js db.getList(printList); function printList (rows) { console.log('rows', rows); } // database.js getList: function (callback) { console.log('list'); con.query('SELECT * FROM url', function (err, rows) { if (err) throw err; // error-first callbacks convencion callback(rows); }); },","title":"Callback"},{"location":"javascript/#promises","text":"var p = new Promise(function(resolve, reject) { if (/* condition */) { resolve(/* value */); // fulfilled successfully } else { reject(/* reason */); // error, rejected } }); (function () { 'use strict'; var body = document.querySelector('body'); var myImage = new Image(); // Call the function with the URL we want to load, but then chain // the promise then() method on to the end of it. This contains two // callbacks imgLoad('darth.jpg').then(function (response) { // The first runs when the promise resolves, with the // request.response specified within the resolve() method. var imageURL = window.URL.createObjectURL(response); myImage.src = imageURL; body.appendChild(myImage); // The second runs when the promise is rejected, and logs the //Error specified with the reject() method. }, function (Error) { console.log(Error); }); /* otra sintaxis }).catch(function (Error) { console.log(Error); }); */ // tambien podemos almacenar la promesa en una variable para una // sintaxis mas clara // var p = imgLoad(url); // p.then(bla bla); // p.catch(bla bla); function imgLoad (url) { // Create new promise with the Promise() constructor. This has as // its argument a function with two parameters, resolve and reject return new Promise(function (resolve, reject) { // Standard XHR to load an image var request = new XMLHttpRequest(); request.open('GET', url); request.responseType = 'blob'; // When the request loads, check whether it was successful request.onload = function () { if (request.status === 200) { // If successful, resolve the promise by passing back the // request response resolve(request.response); } else { // If it fails, reject the promise with a error message reject(Error(\"Image didn't load successfully; error code:\" + request.statusText)); } }; request.onerror = function () { // Also deal with the case when the entire request fails to // begin with // This is probably a network error, so reject the promise // with an appropriate message reject(Error('There was a network error.')); }; // Send the request request.send(); }); } }());","title":"Promises"},{"location":"javascript/#patrones-de-diseno","text":"Libro bueno de patrones de dise\u00f1o Se usa para replicar el concepto de clases para guardar metodos y variables publicas y privadas dentro de un objeto. Eso nos permite crear una API publica para los metodos que queramos","title":"PATRONES DE DISE\u00d1O"},{"location":"javascript/#funciones-iife","text":"funciones autoejecutables IIFEs (function () { // todas las variables y funciones son locales a esto // pero aun tiene acceso a todas las globales }()); Importacion global (function ($, YAHOO) { // Nos da acceso a las globales jQuery (as $) y YAHOO aqui dentro }(jQuery, YAHOO)); var app = (function () { 'use strict'; function init () { console.log('Inicio', Dungeon.hola()); renderer.setMyCanvas(); renderer.drawMyCanvas(); } return { init: init }; }()); var renderer = (function () { 'use strict'; var cols = 80; var rows = 50; var ppp = 10; function setMyCanvas () { canvas = document.getElementById('myCanvas'); ctx = canvas.getContext('2d'); canvas.width = cols * ppp; canvas.height = rows * ppp; } function drawMyCanvas () { console.log('Drawing Map...'); } return { setMyCanvas: setMyCanvas, drawMyCanvas: drawMyCanvas }; }()); var Dungeon = { hola: function () { return 'ROGUE'; } }; addEventListener('load', app.init); Con creacion manual de objetos function User(){ var username, password; function doLogin(user,pw) { username = user; password = pw; } var publicAPI = { login: doLogin }; return publicAPI; } var fred = User(); // crea un modulo User fred.login(\"fred\", \"Battery34\"); Module Export var Modulo = (function () { var mod = {}; var privadaVariable = 1; function privadoMetodo () { return privadaVariable++; } mod.moduloPropiedad = 'Hola'; mod.moduloMetodo = function () { return privadoMetodo(); }; return mod; })(); console.log(Modulo.moduloPropiedad); // Hola console.log(Modulo.moduloMetodo()); // 1 console.log(Modulo.moduloMetodo()); // 2 Object Interface var weekDay = function() { var names = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\"]; return { name: function(number) { return names[number]; }, number: function(name) { return names.indexOf(name); } }; }(); console.log(weekDay.name(weekDay.number(\"Sunday\"))); // \u2192 Sunday","title":"Funciones IIFE"},{"location":"javascript/#object-literal","text":"var myModule = { myProperty: \"someValue\", myConfig: { useCaching: true, language: \"en\" }, saySomething: function () { console.log( \"Where is Paul Irish today?\" ); }, reportMyConfig: function () { console.log( \"Caching is: \" + ( this.myConfig.useCaching ? \"enabled\" : \"disabled\") ); }, updateMyConfig: function( newConfig ) { if ( typeof newConfig === \"object\" ) { this.myConfig = newConfig; console.log( this.myConfig.language ); } } }; myModule.saySomething(); // Where is Paul Irish today? myModule.reportMyConfig(); // Caching is: enabled myModule.updateMyConfig({ // fr language: \"fr\", useCaching: false }); myModule.reportMyConfig(); // Caching is: disabled","title":"Object literal"},{"location":"javascript/#datos-arrays-vs-objects","text":"Grupos de objetos se pueden almacenar en arrays o como propiedades de otros objetos Objetos en un array var people = [ {name: 'Casey ', rate: 70, active: true}, {name: 'Camille', rate: 80, active: true}, {name: 'Gordon', rate: 75, active: false}, {name: 'Nigel', rate: 120, active: true} ] Objetos como propiedades de otros objetos var people = { Casey= {rate: 70, active: true}, Camille = {rate: 80, active: true}, Gordon= {rate: 75, active: false} , Nigel = {rate: 120, active: true } }","title":"Datos: Arrays vs Objects"},{"location":"javascript/#es6","text":"","title":"ES6"},{"location":"javascript/#const-let","text":"const Crea constantes que no se pueden modificar, ha de asignarse el valor en la declaracion let Declara variables que no son accesibles mas alla del ambito de creacion Ejemplo mejor: para los for","title":"const - let"},{"location":"javascript/#funcion-arrow","text":"Para las funciones anonimas // ES5 var multiplicar = function(x, y) { return x * y; } // ES6 var multiplicar = (x, y) => { return x * y };","title":"funcion arrow"},{"location":"javascript/#template-strings","text":"let nombre1 = \"JavaScript\"; let nombre2 = \"awesome\"; console.log(`S\u00f3lo quiero decir que ${nombre1} is ${nombre2}`);","title":"template strings"},{"location":"javascript/#modulos","text":"bar.js function hello(who) { return \"Let me introduce: \" + who; } export hello; foo.js import hello from \"bar\"; // import only `hello()` from \"bar\" module var hungry = \"hippo\"; function awesome() { console.log( hello( hungry ).toUpperCase() ); } export awesome; baz.js module foo from \"foo\"; // import the entire \"foo\" and \"bar\" modules module bar from \"bar\"; console.log( bar.hello( \"rhino\" ) ); // Let me introduce: rhino foo.awesome(); // LET ME INTRODUCE: HIPPO","title":"modulos"},{"location":"nodejs-bases-de-datos/","text":"NODEJS para BASES DE DATOS SQLITE driver better-sqlite3 backups Al activar pragma('journal_mode=WAL'), en vez de un archivo hay 3 para la DB. nombre.db3 nombre.db3-shm nombre.db3-wal Para hacer un backup sin riesgo consolidando los tres archivos apt install sqlite3 sqlite3 myArchivo.db3 \".backup backup-MyArchivo.db3\" Select, Replace e Insert /* */ const options = {}; import sqlite3 from 'better-sqlite3'; const myDB = new sqlite3('./path/to/databaseFile.db3', options); myDB.pragma('journal_mode = WAL'); const store = { table1: \"table1\", readTable1: function () { const sql = `SELECT * FROM ${this.table1}`; const stmt = myDB.prepare(sql); const rows = stmt.all(); return rows.map(function (row) { return { server: row.server, data: row.data }; }); }, saveTable1: function (req) { const data = req.body.data; const server = req.body.server; if (!server || !data) { return; } const sql = `REPLACE INTO ${this.table1} (server, data) VALUES (?, ?)`; const stmt = myDB.prepare(sql); stmt.run(server, data); }, table2: \"table2\", readTable2: function () { const sql = `SELECT * FROM \"${this.table2}\"`; const stmt = myDB.prepare(sql); const rows = stmt.all(); return rows.map(function (row) { return { day: row.day, alexa: row.alexa, loc: row.loc, stars: row.stars, proxy: row.proxy, headers: row.headers, weather: row.weather, geoip: row.geoip, video2gif: row.video2gif, sp500: row.sp500, tetris: row.tetris, random: row.random, }; }); }, readTodayTable2: function () { const today = new Date().toISOString().split('T')[0]; const sql = `SELECT * FROM \"${this.table2}\" WHERE day = ?`; const stmt = myDB.prepare(sql); const rows = stmt.all(today); return rows[0]; }, saveTable2: function (data) { const inserts = [ data.day, data.alexa, data.loc, data.stars, data.proxy, data.headers, data.weather, data.geoip, data.video2gif, data.random, ]; const sql = ` INSERT INTO \"${this.table2}\" (day, alexa, loc, stars, proxy, headers, weather, geoip, video2gif, random) VALUES (?, 0, 0, 0, 0, 0, 0, 0, 0, 0) ON CONFLICT(day) DO UPDATE SET alexa = ?, loc = ?, stars = ?, proxy = ?, headers = ?, weather = ?, geoip = ?, video2gif = ?, random = ? `; const stmt = myDB.prepare(sql); stmt.run(inserts); }, }; export { store }; MYSQL 8 driver documentacion github MYSQL 5 (desactualizado) driver 2.17.X https://github.com/mysqljs/mysql npm install --save mysql const mysql = require('mysql'); const con = mysql.createConnection({ host : 'localhost' || process.env.HOST, user : 'username' || process.env.USER, password : 'password' || process.env.PASSWORD, database : 'databaseName' || process.env.DB }); test function testDB () { console.log('Connecting ......'); // console.log(con) con.connect(function (err) { if (err) { console.log('Error connecting to DB => ', err); } else { console.log('Connection OK'); } }); } configurar la conexion const TABLE = process.env.TABLE; const TABLE2 = process.env.TABLE2; const mysql = require('mysql'); const con = mysql.createConnection({ host: process.env.HOST, user: process.env.MYSQLUSER, password: process.env.PASSWORD, database: process.env.DB, connectTimeout: 20000, // avoid ETIMEDOUT acquireTimeout: 20000 // avoid ETIMEDOUT }); Mantener la conexion activa function initApp() { setInterval(function () { keepConnectionAlive(); }, 5000); } function keepConnectionAlive() { let sql = 'SELECT 1'; sql = mysql.format(sql); con.query(sql, function (err, rows) { if (err) { console.error('Error Keeping connection Alive =>', err); // throw err } else { //console.log('Keep connection Alive =>', rows); } }); } select function loadIP () { let sql = 'SELECT INET6_NTOA(ip) AS ip FROM ??;'; const inserts = [TABLE]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.log('ERR => ', err); } console.log(rows[1].ip); }); } insert function insertHit (d, id, callback) { let sql = 'INSERT INTO ?? (ip, time) VALUE (INET6_ATON(?), ?);'; const inserts = [TABLE, d.ip, d.time]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.log('Insert HIT error =>', err); // throw err } else { // console.log(rows) callback(); } }); } update function updateDB (dbData) { let sql = 'UPDATE bandwith '; sql += 'SET data = ? '; sql += 'WHERE server = ?'; const inserts = [dbData.data, dbData.server]; sql = mysql.format(sql, inserts); con.query(sql, function (err) { if (err) { throw err; } else { con.end(function () { console.log('Update OK'); return; }); } }); } function insertHit(time) { let sql = 'INSERT INTO ?? (time, geoip)'; sql += ' VALUES (?, 0)'; sql += ` ON DUPLICATE KEY UPDATE geoip = geoip + 1;`; const inserts = [TABLE, time]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.error('Insert HIT error =>', err); // throw err } else { //console.log(rows); } }); } function insertHit (data) { let sql = 'INSERT INTO ?? (time, alexa, loc, stars, proxy, headers, weather)'; sql += ' VALUES (?, 0, 0, 0, 0, 0, 0)'; sql += ` ON DUPLICATE KEY UPDATE ${data.service} = ${data.service} +1;`; const inserts = [MY_TABLE, data.time]; // , data.service, data.service] sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.log('Insert HIT error =>', err); // throw err } else { // console.log(rows) } }); } cascada function dailyUpdate () { const today = new Date(); const yesterday = lib.addDays(today, -1).toISOString().split('T')[0]; console.log('yesterday', yesterday); let sql = 'SELECT count(*) as hits FROM ?? WHERE time=?'; const inserts = [TABLE2, yesterday]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.log('ERR => ', err); return; } console.log(rows[0].hits); // UPDATE let sql2 = 'INSERT INTO ?? (day, day_hits) VALUE (?, ?);'; const inserts2 = [TABLE1, yesterday, rows[0].hits]; sql2 = mysql.format(sql2, inserts2); con.query(sql2, function (err, rows) { if (err) { console.log('Select origin2 ERROR =>', err); throw err; } else { console.log('UPDATED ', TABLE2); // DELETE YESTERDAY HITS let sql3 = 'delete FROM ?? where time=?;'; const inserts3 = [TABLE2, yesterday]; sql3 = mysql.format(sql3, inserts3); con.query(sql3, function (err, rows) { if (err) { console.log('Delete yesterday hits ERROR =>', err); throw err; } else { console.log('UPDATED ', TABLE2); con.end(function () {}); } }); } }); }); } ejemplo completo // probado con mysql driver 2.12.0 const db = { getData: function (req, res , callback) { const sql = 'SELECT id, nombre FROM ??'; const inserts = [tableName]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { throw err; } else { callback(rows); } }); }, getDataJoin: function (req, res, callback) { var sql = 'SELECT puesto, bidonlote, bidonorden, adhesivos.nombre AS adhesivo, oentrada, operarios.nombre AS operario, fentrada '; sql += 'FROM registros '; sql += 'JOIN adhesivos ON registros.adhesivo = adhesivos.id '; sql += 'JOIN operarios ON registros.oentrada = operarios.id '; sql += 'WHERE fsalida IS NULL '; sql += 'ORDER BY puesto ASC;'; var inserts = []; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { throw err; } else { callback(res); } }); }, insertData: function (req, res, callback) { const sql = 'INSERT INTO table (value1, value2) VALUES (?, ?)'; const inserts = [req.body.value1, req.body.value2]; sql = mysql.format(sql, inserts); con.query(sql, function (err) { if (err) { throw err; } else { console.log('Insert OK'); } }); }, updateData: function (req, res, callback) { const sql = 'UPDATE records '; sql += 'SET field1 = ?, field2 = ? '; sql += 'WHERE field1 IS NULL AND field2 IS NULL AND field3 = ?'; const inserts = [req.body.field1, new Date(), req.body.field3]; sql = mysql.format(sql, inserts); con.query(sql, function (err) { if (err) { throw err; } else { console.log('Update OK'); } }); }, testConnection: function (req, res, callback) { console.log('Connecting ......') con.connect(function (err) { if (err) { console.log('Error connecting to DB') res.status = false; } else { console.log('Connection OK') res.status = true; } con.end(function () {}); callback(res); }); } }; trucos testConnection - si lo ejecutas varias veces una vez da error la otra bien y asi todo el rato. Es por algo de que al ser asincrono no cierra bien. Si no usas connect ni end, solo con querys va bien","title":"Nodejs Bases de Datos"},{"location":"nodejs-bases-de-datos/#nodejs-para-bases-de-datos","text":"","title":"NODEJS para BASES DE DATOS"},{"location":"nodejs-bases-de-datos/#sqlite","text":"","title":"SQLITE"},{"location":"nodejs-bases-de-datos/#driver","text":"better-sqlite3","title":"driver"},{"location":"nodejs-bases-de-datos/#backups","text":"Al activar pragma('journal_mode=WAL'), en vez de un archivo hay 3 para la DB. nombre.db3 nombre.db3-shm nombre.db3-wal Para hacer un backup sin riesgo consolidando los tres archivos apt install sqlite3 sqlite3 myArchivo.db3 \".backup backup-MyArchivo.db3\"","title":"backups"},{"location":"nodejs-bases-de-datos/#select-replace-e-insert","text":"/* */ const options = {}; import sqlite3 from 'better-sqlite3'; const myDB = new sqlite3('./path/to/databaseFile.db3', options); myDB.pragma('journal_mode = WAL'); const store = { table1: \"table1\", readTable1: function () { const sql = `SELECT * FROM ${this.table1}`; const stmt = myDB.prepare(sql); const rows = stmt.all(); return rows.map(function (row) { return { server: row.server, data: row.data }; }); }, saveTable1: function (req) { const data = req.body.data; const server = req.body.server; if (!server || !data) { return; } const sql = `REPLACE INTO ${this.table1} (server, data) VALUES (?, ?)`; const stmt = myDB.prepare(sql); stmt.run(server, data); }, table2: \"table2\", readTable2: function () { const sql = `SELECT * FROM \"${this.table2}\"`; const stmt = myDB.prepare(sql); const rows = stmt.all(); return rows.map(function (row) { return { day: row.day, alexa: row.alexa, loc: row.loc, stars: row.stars, proxy: row.proxy, headers: row.headers, weather: row.weather, geoip: row.geoip, video2gif: row.video2gif, sp500: row.sp500, tetris: row.tetris, random: row.random, }; }); }, readTodayTable2: function () { const today = new Date().toISOString().split('T')[0]; const sql = `SELECT * FROM \"${this.table2}\" WHERE day = ?`; const stmt = myDB.prepare(sql); const rows = stmt.all(today); return rows[0]; }, saveTable2: function (data) { const inserts = [ data.day, data.alexa, data.loc, data.stars, data.proxy, data.headers, data.weather, data.geoip, data.video2gif, data.random, ]; const sql = ` INSERT INTO \"${this.table2}\" (day, alexa, loc, stars, proxy, headers, weather, geoip, video2gif, random) VALUES (?, 0, 0, 0, 0, 0, 0, 0, 0, 0) ON CONFLICT(day) DO UPDATE SET alexa = ?, loc = ?, stars = ?, proxy = ?, headers = ?, weather = ?, geoip = ?, video2gif = ?, random = ? `; const stmt = myDB.prepare(sql); stmt.run(inserts); }, }; export { store };","title":"Select, Replace e Insert"},{"location":"nodejs-bases-de-datos/#mysql-8","text":"","title":"MYSQL 8"},{"location":"nodejs-bases-de-datos/#driver_1","text":"documentacion github","title":"driver"},{"location":"nodejs-bases-de-datos/#mysql-5-desactualizado","text":"","title":"MYSQL 5 (desactualizado)"},{"location":"nodejs-bases-de-datos/#driver_2","text":"2.17.X https://github.com/mysqljs/mysql npm install --save mysql const mysql = require('mysql'); const con = mysql.createConnection({ host : 'localhost' || process.env.HOST, user : 'username' || process.env.USER, password : 'password' || process.env.PASSWORD, database : 'databaseName' || process.env.DB });","title":"driver"},{"location":"nodejs-bases-de-datos/#test","text":"function testDB () { console.log('Connecting ......'); // console.log(con) con.connect(function (err) { if (err) { console.log('Error connecting to DB => ', err); } else { console.log('Connection OK'); } }); }","title":"test"},{"location":"nodejs-bases-de-datos/#configurar-la-conexion","text":"const TABLE = process.env.TABLE; const TABLE2 = process.env.TABLE2; const mysql = require('mysql'); const con = mysql.createConnection({ host: process.env.HOST, user: process.env.MYSQLUSER, password: process.env.PASSWORD, database: process.env.DB, connectTimeout: 20000, // avoid ETIMEDOUT acquireTimeout: 20000 // avoid ETIMEDOUT });","title":"configurar la conexion"},{"location":"nodejs-bases-de-datos/#mantener-la-conexion-activa","text":"function initApp() { setInterval(function () { keepConnectionAlive(); }, 5000); } function keepConnectionAlive() { let sql = 'SELECT 1'; sql = mysql.format(sql); con.query(sql, function (err, rows) { if (err) { console.error('Error Keeping connection Alive =>', err); // throw err } else { //console.log('Keep connection Alive =>', rows); } }); }","title":"Mantener la conexion activa"},{"location":"nodejs-bases-de-datos/#select","text":"function loadIP () { let sql = 'SELECT INET6_NTOA(ip) AS ip FROM ??;'; const inserts = [TABLE]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.log('ERR => ', err); } console.log(rows[1].ip); }); }","title":"select"},{"location":"nodejs-bases-de-datos/#insert","text":"function insertHit (d, id, callback) { let sql = 'INSERT INTO ?? (ip, time) VALUE (INET6_ATON(?), ?);'; const inserts = [TABLE, d.ip, d.time]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.log('Insert HIT error =>', err); // throw err } else { // console.log(rows) callback(); } }); }","title":"insert"},{"location":"nodejs-bases-de-datos/#update","text":"function updateDB (dbData) { let sql = 'UPDATE bandwith '; sql += 'SET data = ? '; sql += 'WHERE server = ?'; const inserts = [dbData.data, dbData.server]; sql = mysql.format(sql, inserts); con.query(sql, function (err) { if (err) { throw err; } else { con.end(function () { console.log('Update OK'); return; }); } }); } function insertHit(time) { let sql = 'INSERT INTO ?? (time, geoip)'; sql += ' VALUES (?, 0)'; sql += ` ON DUPLICATE KEY UPDATE geoip = geoip + 1;`; const inserts = [TABLE, time]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.error('Insert HIT error =>', err); // throw err } else { //console.log(rows); } }); } function insertHit (data) { let sql = 'INSERT INTO ?? (time, alexa, loc, stars, proxy, headers, weather)'; sql += ' VALUES (?, 0, 0, 0, 0, 0, 0)'; sql += ` ON DUPLICATE KEY UPDATE ${data.service} = ${data.service} +1;`; const inserts = [MY_TABLE, data.time]; // , data.service, data.service] sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.log('Insert HIT error =>', err); // throw err } else { // console.log(rows) } }); }","title":"update"},{"location":"nodejs-bases-de-datos/#cascada","text":"function dailyUpdate () { const today = new Date(); const yesterday = lib.addDays(today, -1).toISOString().split('T')[0]; console.log('yesterday', yesterday); let sql = 'SELECT count(*) as hits FROM ?? WHERE time=?'; const inserts = [TABLE2, yesterday]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { console.log('ERR => ', err); return; } console.log(rows[0].hits); // UPDATE let sql2 = 'INSERT INTO ?? (day, day_hits) VALUE (?, ?);'; const inserts2 = [TABLE1, yesterday, rows[0].hits]; sql2 = mysql.format(sql2, inserts2); con.query(sql2, function (err, rows) { if (err) { console.log('Select origin2 ERROR =>', err); throw err; } else { console.log('UPDATED ', TABLE2); // DELETE YESTERDAY HITS let sql3 = 'delete FROM ?? where time=?;'; const inserts3 = [TABLE2, yesterday]; sql3 = mysql.format(sql3, inserts3); con.query(sql3, function (err, rows) { if (err) { console.log('Delete yesterday hits ERROR =>', err); throw err; } else { console.log('UPDATED ', TABLE2); con.end(function () {}); } }); } }); }); }","title":"cascada"},{"location":"nodejs-bases-de-datos/#ejemplo-completo","text":"// probado con mysql driver 2.12.0 const db = { getData: function (req, res , callback) { const sql = 'SELECT id, nombre FROM ??'; const inserts = [tableName]; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { throw err; } else { callback(rows); } }); }, getDataJoin: function (req, res, callback) { var sql = 'SELECT puesto, bidonlote, bidonorden, adhesivos.nombre AS adhesivo, oentrada, operarios.nombre AS operario, fentrada '; sql += 'FROM registros '; sql += 'JOIN adhesivos ON registros.adhesivo = adhesivos.id '; sql += 'JOIN operarios ON registros.oentrada = operarios.id '; sql += 'WHERE fsalida IS NULL '; sql += 'ORDER BY puesto ASC;'; var inserts = []; sql = mysql.format(sql, inserts); con.query(sql, function (err, rows) { if (err) { throw err; } else { callback(res); } }); }, insertData: function (req, res, callback) { const sql = 'INSERT INTO table (value1, value2) VALUES (?, ?)'; const inserts = [req.body.value1, req.body.value2]; sql = mysql.format(sql, inserts); con.query(sql, function (err) { if (err) { throw err; } else { console.log('Insert OK'); } }); }, updateData: function (req, res, callback) { const sql = 'UPDATE records '; sql += 'SET field1 = ?, field2 = ? '; sql += 'WHERE field1 IS NULL AND field2 IS NULL AND field3 = ?'; const inserts = [req.body.field1, new Date(), req.body.field3]; sql = mysql.format(sql, inserts); con.query(sql, function (err) { if (err) { throw err; } else { console.log('Update OK'); } }); }, testConnection: function (req, res, callback) { console.log('Connecting ......') con.connect(function (err) { if (err) { console.log('Error connecting to DB') res.status = false; } else { console.log('Connection OK') res.status = true; } con.end(function () {}); callback(res); }); } };","title":"ejemplo completo"},{"location":"nodejs-bases-de-datos/#trucos","text":"testConnection - si lo ejecutas varias veces una vez da error la otra bien y asi todo el rato. Es por algo de que al ser asincrono no cierra bien. Si no usas connect ni end, solo con querys va bien","title":"trucos"},{"location":"nodejs-snippets/","text":"NODEJS SNIPPETS ES MODULES Hasta que sean nativos en nodejs 21.X la opcion es poner en package.json { \"type\": \"module\" } o usar la extension mjs en lugar de js. FETCH async function fetchData(c, data) { const url = `${c.API_URL}${c.API_ENDPOINT}`; const options = { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept-Charset': 'utf-8' }, body: new URLSearchParams({ 'key': c.API_KEY, 'data': JSON.stringify(data) }).toString(), }; try { const response = await fetch(url, options); if (response.ok) { const responseData = await response.json(); return responseData; } else { throw new Error(`${response.status} ${response.statusText}`); } } catch (err) { console.log('ERROR fetchData => ', err); } } HTTP Request GET function makeHttpsRequest (path, callback) { https.get(path, (res) => { res.setEncoding('utf8'); var body = ''; res.on('data', (d) => { body += d; }); res.on('end', () => { try { var parsed = JSON.parse(body); } catch (err) { console.error('Unable to parse response as JSON', err); return callback(err, null, null); } callback(null, res, parsed); }); }).on('error', (err) => { console.error('Error with the request:', err.message); callback(err, null, null); }); } POST, PUT ... const querystring = require('querystring'); const parameters = querystring.stringify({ 'test': c.app.valid, 'server': data.server, 'data': data.data }); const options = { timeout: 3000, hostname || host: 'api.codetabs.com', port: 443, path: '/api/resource', method: 'GET', headers: { 'Authorization': 'Bearer ' + process.env.TOKEN_0, \"Content-Type\": 'x-www-form-urlencoded', \"User-Agent\": \"user agent\", 'Accept': 'application/json', 'Content-Length': Buffer.byteLength(parameters), 'Accept-Charset': 'utf-8' } }; makeRequest(options, parameters, function (err, res, data) { if (err !== null) { console.error('data sent FAIL => ', err); return; } console.log('data sent OK', data.server); }); function makeRequest(options, parameters, callback) { const req = https.request(options, function (res) { let body = ''; res.setEncoding('utf8'); res.on('data', function (d) { body += d; // save all the data from response //console.log('BODY =>', body); }); res.on('end', function () { //console.log('RES END'); try { //console.log(body); var parsed = JSON.parse(body); } catch (err) { console.error('Unable to parse response as JSON', err); return callback(err, null, null); } callback(null, res, parsed); }); }); if (options.method !== 'GET') { req.write(parameters); } req.on('timeout', function () { //console.error('TIMEOUT'); req.abort(); // lo envia a abort }); req.on(\"abort\", function () { callback(\"TIMEOUT\", null, null); }); req.on('error', function (err) { console.error('Error request => ', err); // para evitar que salte // Error: socket hang up // code: 'ECONNRESET' //console.log(err); }); req.end(); } // ASYNC POST REQUEST try { const myRequest = await makeRequestAsync(options, parameters); console.log(myRequest); } catch (err) { console.log(err); } function makeRequestAsync(options, parameters) { return new Promise((resolve, reject) => { const req = https.request(options, function (res) { let body = ''; res.setEncoding('utf8'); res.on('data', function (d) { body += d; // save all the data from response }); res.on('end', function () { try { var parsedResponse = JSON.parse(body); } catch (err) { console.error('Unable to parse response as JSON', err); reject(err); } resolve(parsedResponse); }); }); if (options.method !== 'GET') { req.write(parameters); } req.on('timeout', function () { req.abort(); // send req to abort }); req.on(\"abort\", function () { reject(\"TIMEOUT\"); }); req.on('error', function (err) { console.error('Error request => ', err); // Avoid -> Error: socket hang up code: 'ECONNRESET' }); req.end(); }); } FILES read JSON // sincrona import { readFileSync } from 'fs'; function loadJsonFile() { try { const data = readFileSync('./data.json', 'utf8'); return JSON.parse(data); } catch (err) { console.error('Error reading JSON file =>', err); return null; } } // asincrona import { promises as fs } from 'fs'; async function loadJsonFile() { try { const data = await fs.readFile('./data.json', 'utf8'); return JSON.parse(data); } catch (err) { console.error('Error reading JSON file =>', err); } } write JSON // sincrona import { writeFileSync } from 'fs'; function saveJsonFile(jsonData) { try { const data = JSON.stringify(jsonData, null, 2); writeFileSync('./data.json', data, 'utf8'); } catch (err) { console.error('Error saving JSON file =>', err); } } // asincrona import { promises as fs } from 'fs'; async function saveJsonFile(jsonData) { try { const data = JSON.stringify(jsonData, null, 2); await fs.writeFile(\"./data.json\", data); } catch (err) { console.error(\"Error Saving JSON file => \", err); } } Get file from url Descargar archivo a nuestro servidor con expressjs desde una url const fs = require('fs'); const https = require('https'); function downloadFile (url, where, cb) { const file = fs.createWriteStream(where); https.get(url, function (response) { response.pipe(file); response.on('end', function (end) { cb(true); }); response.on('error', function (err) { console.log('ERROR=', err); cb(false); }); }); } Readline file const fs = require(\"fs\"); const readline = require(\"readline\"); function countLocFromTxt(filePath, cb) { const lineReader = readline.createInterface({ input: fs.createReadStream(filePath) }); let lineNumber = 1; lineReader.on('line', function (line) { console.log(lineNumber); lineNumber++; }); lineReader.on('close', function () { cb(data); }); } Upload File npm install --save formidable <form class=\"upload\" method=\"post\" enctype=\"multipart/form-data\"> <input type=\"file\" class=\"input\" id=\"inputFile\" name=\"inputFile\"> <button type=\"submit\" id=\"upload\" class=\"action\">UPLOAD</button> </form> const fs = require(\"fs\"); const formidable = require('formidable'); const form = new formidable.IncomingForm(); form.parse(req, function (err, fields, files) { const filename = files.inputFile.name; const oldpath = files.inputFile.path; const newpath = __dirname + \"/desired/path/uploads\" + filename; fs.rename(oldpath, newpath, function (err) { if (err) throw err; }); }); NETWORK get IP function getIP(req) { return ( req.headers['x-forwarded-for'] || req.connection.remoteAddress || req.socket.remoteAddress || req.connection.socket.remoteAddress).split(',')[0]; } check url exists const https = require('https'); const url = require('url'); function checkUrlExists (urlchecked, cb) { const options = { method: 'HEAD', host: url.parse(urlchecked).host, path: url.parse(urlchecked).path }; const req = https.get(options, function (response) { // console.log('STATUS=>', response.statusCode) cb(response.statusCode === 200); }); req.end(); req.on('error', function (err) { console.log('Error checking url => ', err); cb(false); }); } ASYNC/AWAIT // Ejemplo 1 function sleep(sleepTime) { return new Promise(function (resolve, reject) { setTimeout(resolve, sleepTime); }); } async function go() { console.log('Starting'); await sleep(1000); console.log('Ending'); } // Ejemplo 2 async function doThings() { try { const exist = await existsRepo(url); console.log(exists); } catch(err) { console.error(err); } } function existsRepo (urlchecked) { return new Promise(function (resolve, reject) { lib.checkUrlExists(urlchecked, function (err, res) { if (err) { resolve(err); } resolve(res); }); }); } paralelismo // Asi tarda 1000ms async function series() { console.log(\"series\"); await wait(500); await wait(500); console.log(\"series done\"); } // Asi tarda 500ms async function parallel() { console.log('parallel'); const wait1 = wait(500); const wait2 = wait(500); await wait1; await wait2; console.log('parallel done'); } // Asi tarda 500ms async function parallel2() { console.log(\"parallel2\"); const [wait1, wait2] = await Promise.all([ wait(500), wait(500), ]); console.log('parallel2 done'); } series(); parallel(); parallel2(); MISC Linux Commands Sincronos import { execSync } from \"child_process\"; const createNewDir = `cd ${origin} && mkdir ${newDir}`; try { const modes = [\"dev\", \"production\"]; const mode = modes[action]; if (mode === \"dev\") { console.log(createNewDir); } if (mode === \"production\") { execSync(createNewDir); } } catch (err) { console.error('Error =>', err); } Asincronos import { exec } from 'child_process'; // callbacks function runCommandCB(command, cb) { exec(command, function (err, stdout, stderr) { if (err) { console.error(`Error executing \"${command}\" =>`, err); cb(err, stderr || stdout); return; } if (stderr) { console.warn(`Warn executing \"${command}\" =>`, stderr); cb(null, stderr); return; } cb(null, stdout); }); } runCommandCB(command, function (err, output) { if (err) { console.log(\"Err => \", err); } else { console.log(\"Output => \", output); } }); // promises function runCommand(command) { return new Promise(function (resolve, reject) { exec(command, function (err, stdout, stderr) { if (err) { console.error(`Error executing \"${command}\":`, err); reject(new Error(`Execution failed: ${stderr || stdout}`)); return; } if (stderr) { console.warn(`Warning executing \"${command}\":`, stderr); resolve(stderr); return; } resolve(stdout); }); }); } // usar con promises runCommand(command) .then(function (output) { console.log(\"Output => \", output); }) .catch(function (err) { console.log(\"Err => \", err); }); // usar con async/await async function doCommand(command) { try { const output = await runCommand(command); console.log(\"Output => \", output); } catch (err) { console.log(\"Err => \", err.message); } } pm2 cluster Buscar un proceso if (process.env && process.env.pm_id) { if (process.env.pm_id === '0') { onceADayTask(); } } if (process.env && process.env.pm_id) { //running in pm2 if (process.env.pm_id % os.cpus().length !== 0) { return; } else { doTask(); } }","title":"Nodejs snippets"},{"location":"nodejs-snippets/#nodejs-snippets","text":"","title":"NODEJS SNIPPETS"},{"location":"nodejs-snippets/#es-modules","text":"Hasta que sean nativos en nodejs 21.X la opcion es poner en package.json { \"type\": \"module\" } o usar la extension mjs en lugar de js.","title":"ES MODULES"},{"location":"nodejs-snippets/#fetch","text":"async function fetchData(c, data) { const url = `${c.API_URL}${c.API_ENDPOINT}`; const options = { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Accept-Charset': 'utf-8' }, body: new URLSearchParams({ 'key': c.API_KEY, 'data': JSON.stringify(data) }).toString(), }; try { const response = await fetch(url, options); if (response.ok) { const responseData = await response.json(); return responseData; } else { throw new Error(`${response.status} ${response.statusText}`); } } catch (err) { console.log('ERROR fetchData => ', err); } }","title":"FETCH"},{"location":"nodejs-snippets/#http-request","text":"","title":"HTTP Request"},{"location":"nodejs-snippets/#get","text":"function makeHttpsRequest (path, callback) { https.get(path, (res) => { res.setEncoding('utf8'); var body = ''; res.on('data', (d) => { body += d; }); res.on('end', () => { try { var parsed = JSON.parse(body); } catch (err) { console.error('Unable to parse response as JSON', err); return callback(err, null, null); } callback(null, res, parsed); }); }).on('error', (err) => { console.error('Error with the request:', err.message); callback(err, null, null); }); }","title":"GET"},{"location":"nodejs-snippets/#post-put","text":"const querystring = require('querystring'); const parameters = querystring.stringify({ 'test': c.app.valid, 'server': data.server, 'data': data.data }); const options = { timeout: 3000, hostname || host: 'api.codetabs.com', port: 443, path: '/api/resource', method: 'GET', headers: { 'Authorization': 'Bearer ' + process.env.TOKEN_0, \"Content-Type\": 'x-www-form-urlencoded', \"User-Agent\": \"user agent\", 'Accept': 'application/json', 'Content-Length': Buffer.byteLength(parameters), 'Accept-Charset': 'utf-8' } }; makeRequest(options, parameters, function (err, res, data) { if (err !== null) { console.error('data sent FAIL => ', err); return; } console.log('data sent OK', data.server); }); function makeRequest(options, parameters, callback) { const req = https.request(options, function (res) { let body = ''; res.setEncoding('utf8'); res.on('data', function (d) { body += d; // save all the data from response //console.log('BODY =>', body); }); res.on('end', function () { //console.log('RES END'); try { //console.log(body); var parsed = JSON.parse(body); } catch (err) { console.error('Unable to parse response as JSON', err); return callback(err, null, null); } callback(null, res, parsed); }); }); if (options.method !== 'GET') { req.write(parameters); } req.on('timeout', function () { //console.error('TIMEOUT'); req.abort(); // lo envia a abort }); req.on(\"abort\", function () { callback(\"TIMEOUT\", null, null); }); req.on('error', function (err) { console.error('Error request => ', err); // para evitar que salte // Error: socket hang up // code: 'ECONNRESET' //console.log(err); }); req.end(); } // ASYNC POST REQUEST try { const myRequest = await makeRequestAsync(options, parameters); console.log(myRequest); } catch (err) { console.log(err); } function makeRequestAsync(options, parameters) { return new Promise((resolve, reject) => { const req = https.request(options, function (res) { let body = ''; res.setEncoding('utf8'); res.on('data', function (d) { body += d; // save all the data from response }); res.on('end', function () { try { var parsedResponse = JSON.parse(body); } catch (err) { console.error('Unable to parse response as JSON', err); reject(err); } resolve(parsedResponse); }); }); if (options.method !== 'GET') { req.write(parameters); } req.on('timeout', function () { req.abort(); // send req to abort }); req.on(\"abort\", function () { reject(\"TIMEOUT\"); }); req.on('error', function (err) { console.error('Error request => ', err); // Avoid -> Error: socket hang up code: 'ECONNRESET' }); req.end(); }); }","title":"POST, PUT ..."},{"location":"nodejs-snippets/#files","text":"","title":"FILES"},{"location":"nodejs-snippets/#read-json","text":"// sincrona import { readFileSync } from 'fs'; function loadJsonFile() { try { const data = readFileSync('./data.json', 'utf8'); return JSON.parse(data); } catch (err) { console.error('Error reading JSON file =>', err); return null; } } // asincrona import { promises as fs } from 'fs'; async function loadJsonFile() { try { const data = await fs.readFile('./data.json', 'utf8'); return JSON.parse(data); } catch (err) { console.error('Error reading JSON file =>', err); } }","title":"read JSON"},{"location":"nodejs-snippets/#write-json","text":"// sincrona import { writeFileSync } from 'fs'; function saveJsonFile(jsonData) { try { const data = JSON.stringify(jsonData, null, 2); writeFileSync('./data.json', data, 'utf8'); } catch (err) { console.error('Error saving JSON file =>', err); } } // asincrona import { promises as fs } from 'fs'; async function saveJsonFile(jsonData) { try { const data = JSON.stringify(jsonData, null, 2); await fs.writeFile(\"./data.json\", data); } catch (err) { console.error(\"Error Saving JSON file => \", err); } }","title":"write JSON"},{"location":"nodejs-snippets/#get-file-from-url","text":"Descargar archivo a nuestro servidor con expressjs desde una url const fs = require('fs'); const https = require('https'); function downloadFile (url, where, cb) { const file = fs.createWriteStream(where); https.get(url, function (response) { response.pipe(file); response.on('end', function (end) { cb(true); }); response.on('error', function (err) { console.log('ERROR=', err); cb(false); }); }); }","title":"Get file from url"},{"location":"nodejs-snippets/#readline-file","text":"const fs = require(\"fs\"); const readline = require(\"readline\"); function countLocFromTxt(filePath, cb) { const lineReader = readline.createInterface({ input: fs.createReadStream(filePath) }); let lineNumber = 1; lineReader.on('line', function (line) { console.log(lineNumber); lineNumber++; }); lineReader.on('close', function () { cb(data); }); }","title":"Readline file"},{"location":"nodejs-snippets/#upload-file","text":"npm install --save formidable <form class=\"upload\" method=\"post\" enctype=\"multipart/form-data\"> <input type=\"file\" class=\"input\" id=\"inputFile\" name=\"inputFile\"> <button type=\"submit\" id=\"upload\" class=\"action\">UPLOAD</button> </form> const fs = require(\"fs\"); const formidable = require('formidable'); const form = new formidable.IncomingForm(); form.parse(req, function (err, fields, files) { const filename = files.inputFile.name; const oldpath = files.inputFile.path; const newpath = __dirname + \"/desired/path/uploads\" + filename; fs.rename(oldpath, newpath, function (err) { if (err) throw err; }); });","title":"Upload File"},{"location":"nodejs-snippets/#network","text":"","title":"NETWORK"},{"location":"nodejs-snippets/#get-ip","text":"function getIP(req) { return ( req.headers['x-forwarded-for'] || req.connection.remoteAddress || req.socket.remoteAddress || req.connection.socket.remoteAddress).split(',')[0]; }","title":"get IP"},{"location":"nodejs-snippets/#check-url-exists","text":"const https = require('https'); const url = require('url'); function checkUrlExists (urlchecked, cb) { const options = { method: 'HEAD', host: url.parse(urlchecked).host, path: url.parse(urlchecked).path }; const req = https.get(options, function (response) { // console.log('STATUS=>', response.statusCode) cb(response.statusCode === 200); }); req.end(); req.on('error', function (err) { console.log('Error checking url => ', err); cb(false); }); }","title":"check url exists"},{"location":"nodejs-snippets/#asyncawait","text":"// Ejemplo 1 function sleep(sleepTime) { return new Promise(function (resolve, reject) { setTimeout(resolve, sleepTime); }); } async function go() { console.log('Starting'); await sleep(1000); console.log('Ending'); } // Ejemplo 2 async function doThings() { try { const exist = await existsRepo(url); console.log(exists); } catch(err) { console.error(err); } } function existsRepo (urlchecked) { return new Promise(function (resolve, reject) { lib.checkUrlExists(urlchecked, function (err, res) { if (err) { resolve(err); } resolve(res); }); }); }","title":"ASYNC/AWAIT"},{"location":"nodejs-snippets/#paralelismo","text":"// Asi tarda 1000ms async function series() { console.log(\"series\"); await wait(500); await wait(500); console.log(\"series done\"); } // Asi tarda 500ms async function parallel() { console.log('parallel'); const wait1 = wait(500); const wait2 = wait(500); await wait1; await wait2; console.log('parallel done'); } // Asi tarda 500ms async function parallel2() { console.log(\"parallel2\"); const [wait1, wait2] = await Promise.all([ wait(500), wait(500), ]); console.log('parallel2 done'); } series(); parallel(); parallel2();","title":"paralelismo"},{"location":"nodejs-snippets/#misc","text":"","title":"MISC"},{"location":"nodejs-snippets/#linux-commands","text":"","title":"Linux Commands"},{"location":"nodejs-snippets/#sincronos","text":"import { execSync } from \"child_process\"; const createNewDir = `cd ${origin} && mkdir ${newDir}`; try { const modes = [\"dev\", \"production\"]; const mode = modes[action]; if (mode === \"dev\") { console.log(createNewDir); } if (mode === \"production\") { execSync(createNewDir); } } catch (err) { console.error('Error =>', err); }","title":"Sincronos"},{"location":"nodejs-snippets/#asincronos","text":"import { exec } from 'child_process'; // callbacks function runCommandCB(command, cb) { exec(command, function (err, stdout, stderr) { if (err) { console.error(`Error executing \"${command}\" =>`, err); cb(err, stderr || stdout); return; } if (stderr) { console.warn(`Warn executing \"${command}\" =>`, stderr); cb(null, stderr); return; } cb(null, stdout); }); } runCommandCB(command, function (err, output) { if (err) { console.log(\"Err => \", err); } else { console.log(\"Output => \", output); } }); // promises function runCommand(command) { return new Promise(function (resolve, reject) { exec(command, function (err, stdout, stderr) { if (err) { console.error(`Error executing \"${command}\":`, err); reject(new Error(`Execution failed: ${stderr || stdout}`)); return; } if (stderr) { console.warn(`Warning executing \"${command}\":`, stderr); resolve(stderr); return; } resolve(stdout); }); }); } // usar con promises runCommand(command) .then(function (output) { console.log(\"Output => \", output); }) .catch(function (err) { console.log(\"Err => \", err); }); // usar con async/await async function doCommand(command) { try { const output = await runCommand(command); console.log(\"Output => \", output); } catch (err) { console.log(\"Err => \", err.message); } }","title":"Asincronos"},{"location":"nodejs-snippets/#pm2-cluster","text":"Buscar un proceso if (process.env && process.env.pm_id) { if (process.env.pm_id === '0') { onceADayTask(); } } if (process.env && process.env.pm_id) { //running in pm2 if (process.env.pm_id % os.cpus().length !== 0) { return; } else { doTask(); } }","title":"pm2 cluster"},{"location":"nodejs/","text":"NODEJS 22.X.X INSTALACION curl -fsSL https://deb.nodesource.com/setup_22.x -o nodesource_setup.sh bash nodesource_setup.sh apt install nodejs NPM npm install paquete -g - Instala paquete globalmente.Asi convertimos el paquete un comando ejecutable npm install paquete - Instala el paquete de forma local. Esto se hace cuando el paquete se necesita para el uso de la app local. npm uninstall paquete -g - Desinstala paquete global npm uninstall paquete - Desinstala paquete local npm install package@0.0.0 - Instala una version especifica npm list -g --depth=0 - Lista los paquetes globales instalados npm list --depth=0 - Lista los paquetes locales instalados npm view paquete version - Muestra la version del paquete npm search package - Busca un paquete npm update -g - Actualiza los paquetes globales npm update - Actualiza los paquetes locales npm outdated -g - Lista los paquetes globales anticuados npm outdated - Lista los paquetes locales anticuados npm -v - Muestra la version de npm que esta instalada npm install -g npm-check-updates - instala paquete para chequear actualizaciones ncu -g - chequea paquetes global ncu -g -u - actualiza los paquetes globales ncu - chequea paquetes locales ncu -u - actualiza los paquetes locales de package.json Semver versiones semanticas DOCS Documentacion oficial de la API Este enlace va a la ultima version de node, si usas LTS u otra desde ahi te salen todas las opciones MODULOS DEL CORE fs (sistema de archivos) os (sistema operativo) const os = require('os') console.log('Hostname: ' + os.hostname()) console.log('OS type: ' + os.type()) console.log('OS platform: ' + os.platform()) console.log('OS release: ' + os.release()) console.log('OS uptime: ' + (os.uptime() / 60 / 60 / 24).toFixed(1) + ' days') console.log('CPU architecture: ' + os.arch()) console.log('Number of CPUs: ' + os.cpus().length) console.log('Total memory: ' + (os.totalmem() / 1e6).toFixed(1) + ' MB') console.log('Free memory: ' + (os.freemem() / 1e6).toFixed(1) + ' MB') ESModules Como de momento con ESM no se puede leer directamente un archivo json import packageJSON from './package.json' with { type: 'json' }; hay que hacer lo siguiente // Sincrona 1 import { createRequire } from \"module\"; const require = createRequire(import.meta.url); const data = require(\"./data.json\"); // data ya contiene los datos parseados de data.json // Sincrona 2 import { readFileSync } from \"fs\"; const packageJSON = JSON.parse(readFileSync(\"./package.json\")); ASYNC-AWAIT Relacion con Promises async function f(x) { /* body */ } // es equivalente a esto con promises .... function f(x) { return new Promise(function(resolve, reject) { try { resolve((function(x) { /* body */ })(x)); } catch(err) { reject(err); } }); } Patrones Funcion asincrona anonima let main = (async function() { const data = await myAsyncFunc(); })(); Declaracion de funcion asincrona async function main() { const data = await myAsyncFunc(); }; Asignar funcion asincrona let main = async function() { const data = await myAsyncFunc(); }; let main = async () => { const data = await myAsyncFunc(); }; Objeto y metodo de clase // Propiedad de objeto let obj = { async method() { const data = await myAsyncFunc(); } }; // Metodos de clase class MyClass { async myMethod() { const data = await myAsyncFunc(); } } Manejo de errores try { const data = await myAsyncFunc(); } catch(e) { // Error! }","title":"Nodejs"},{"location":"nodejs/#nodejs-22xx","text":"","title":"NODEJS 22.X.X"},{"location":"nodejs/#instalacion","text":"curl -fsSL https://deb.nodesource.com/setup_22.x -o nodesource_setup.sh bash nodesource_setup.sh apt install nodejs","title":"INSTALACION"},{"location":"nodejs/#npm","text":"npm install paquete -g - Instala paquete globalmente.Asi convertimos el paquete un comando ejecutable npm install paquete - Instala el paquete de forma local. Esto se hace cuando el paquete se necesita para el uso de la app local. npm uninstall paquete -g - Desinstala paquete global npm uninstall paquete - Desinstala paquete local npm install package@0.0.0 - Instala una version especifica npm list -g --depth=0 - Lista los paquetes globales instalados npm list --depth=0 - Lista los paquetes locales instalados npm view paquete version - Muestra la version del paquete npm search package - Busca un paquete npm update -g - Actualiza los paquetes globales npm update - Actualiza los paquetes locales npm outdated -g - Lista los paquetes globales anticuados npm outdated - Lista los paquetes locales anticuados npm -v - Muestra la version de npm que esta instalada npm install -g npm-check-updates - instala paquete para chequear actualizaciones ncu -g - chequea paquetes global ncu -g -u - actualiza los paquetes globales ncu - chequea paquetes locales ncu -u - actualiza los paquetes locales de package.json Semver versiones semanticas","title":"NPM"},{"location":"nodejs/#docs","text":"Documentacion oficial de la API Este enlace va a la ultima version de node, si usas LTS u otra desde ahi te salen todas las opciones","title":"DOCS"},{"location":"nodejs/#modulos-del-core","text":"","title":"MODULOS DEL CORE"},{"location":"nodejs/#fs-sistema-de-archivos","text":"","title":"fs (sistema de archivos)"},{"location":"nodejs/#os-sistema-operativo","text":"const os = require('os') console.log('Hostname: ' + os.hostname()) console.log('OS type: ' + os.type()) console.log('OS platform: ' + os.platform()) console.log('OS release: ' + os.release()) console.log('OS uptime: ' + (os.uptime() / 60 / 60 / 24).toFixed(1) + ' days') console.log('CPU architecture: ' + os.arch()) console.log('Number of CPUs: ' + os.cpus().length) console.log('Total memory: ' + (os.totalmem() / 1e6).toFixed(1) + ' MB') console.log('Free memory: ' + (os.freemem() / 1e6).toFixed(1) + ' MB')","title":"os (sistema operativo)"},{"location":"nodejs/#esmodules","text":"Como de momento con ESM no se puede leer directamente un archivo json import packageJSON from './package.json' with { type: 'json' }; hay que hacer lo siguiente // Sincrona 1 import { createRequire } from \"module\"; const require = createRequire(import.meta.url); const data = require(\"./data.json\"); // data ya contiene los datos parseados de data.json // Sincrona 2 import { readFileSync } from \"fs\"; const packageJSON = JSON.parse(readFileSync(\"./package.json\"));","title":"ESModules"},{"location":"nodejs/#async-await","text":"","title":"ASYNC-AWAIT"},{"location":"nodejs/#relacion-con-promises","text":"async function f(x) { /* body */ } // es equivalente a esto con promises .... function f(x) { return new Promise(function(resolve, reject) { try { resolve((function(x) { /* body */ })(x)); } catch(err) { reject(err); } }); }","title":"Relacion con Promises"},{"location":"nodejs/#patrones","text":"Funcion asincrona anonima let main = (async function() { const data = await myAsyncFunc(); })(); Declaracion de funcion asincrona async function main() { const data = await myAsyncFunc(); }; Asignar funcion asincrona let main = async function() { const data = await myAsyncFunc(); }; let main = async () => { const data = await myAsyncFunc(); }; Objeto y metodo de clase // Propiedad de objeto let obj = { async method() { const data = await myAsyncFunc(); } }; // Metodos de clase class MyClass { async myMethod() { const data = await myAsyncFunc(); } }","title":"Patrones"},{"location":"nodejs/#manejo-de-errores","text":"try { const data = await myAsyncFunc(); } catch(e) { // Error! }","title":"Manejo de errores"},{"location":"reactjs/","text":"REACTJS 16.2.0 Instalacion <!-- Versions menu --> https://unpkg.com/react/ https://unpkg.com/react-dom/ <!-- React dev --> <script crossorigin src=\"https://unpkg.com/react@16.2.0/umd/react.development.js\"> </script> <script crossorigin src=\"https://unpkg.com/react-dom@16.2.0/umd/react-dom.development.js\"> </script> <!-- React Router Dev--> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router/ 4.2.0/react-router.js\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router-dom/ 4.2.2/react-router-dom.js\"></script> <!-- React Prod --> <script crossorigin src=\"https://unpkg.com/react@16.2.0/umd/react.production.min.js\"> </script> <script crossorigin src=\"https://unpkg.com/react-dom@16.2.0/umd/react-dom.production.min.js\"> </script> <!-- React Router Prod --> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router/ 4.2.0/react-router.min.js\"> </script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router-dom/ 4.2.2/react-router-dom.min.js\"></script> <!-- Babel --> <script crossorigin src=\"https://unpkg.com/babel-standalone@6.26.0/babel.min.js\"> </script> JSX JSX permite mezclar javascript y etiquetas HTML para definer elementos de interfaces de usuario y su funcionalidad Crear elemento JSX // simple const JSX = <h1>Hello JSX!</h1>; // complejo, todos los elementos son envueltos por un unico elemento padre const JSX = ( <div> <h1>Hello JSX!</h1> { /* this is a JSX comment */ } { 'this is treated as JavaScript code' } <p>Some info</p> <ul> <li>An item</li> <li>Another item</li> <li>A third item</li> </ul> </div>); Renderizar elemento JSX // ReactDOM.render(componentToRender, targetNode) ReactDOM.render(JSX, document.getElementById('challenge-node')); Sintaxis Definir una clase HTML en JSX , usa className en lugar de class La convenci\u00f3n de nomenclatura para todos los atributos HTML y referencias de eventos en JSX se convierte en camelCase. Por ejemplo, el evento de clic en JSX es onClick, en lugar de onclick. const JSX = ( <div className = 'myDiv'> <h1>Add a class to this div</h1> </div>); COMPONENTE Tipos 1.Usar una funcion javascript para crear un componente funcional sin estado // After transpiled, <div> will have a CSS class of 'customClass' const MyComponent = function() { return ( <div className=\"customClass\"> Demo Solution </div> ); } 2.Usando sintaxis ES6 class class MyComponent extends React.Component { constructor(props) { super(props); } render() { return ( <h1>Hi</h1> ); } } Props (propiedades) Pasar una propiedad const CurrentDate = (props) => { return ( <div> <p>The current date is: {props.date} </p> </div> ); }; class Calendar extends React.Component { constructor(props) { super(props); } render() { return ( <div> <h3>What date is it?</h3> <CurrentDate date={Date()}/> </div> ); } }; Pasar un Array como Props <ParentComponent> <ChildComponent colors={[\"green\", \"blue\", \"red\"]} /> </ParentComponent> const ChildComponent = (props) => <p>{props.colors.join(', ')}</p> const List= (props) => { return <p>{props.tasks.join(\", \")}</p> }; class ToDo extends React.Component { constructor(props) { super(props); } render() { return ( <div> <h1>To Do Lists</h1> <h2>Today</h2> <List tasks={[\"today1\", \"today2\"]}/> <h2>Tomorrow</h2> <List tasks={[\"tomorrow1\", \"tomorrow2\", \"tomorrow3\"]}/> </div> ); } }; Usar default Props -Puedes asignar props por defecto a un componente como una propiedad en el propio componente y React asigna el default prop si es necesario. -React asigna default props si las propiedades no est\u00e1n definidas, pero si pasas nulo como valor de una propiedad, permanecer\u00e1 nulo. -La forma de anular los default props es establecer expl\u00edcitamente los valores de la propiedad para un componente. -Decl\u00e1ralos inmediatamente despu\u00e9s de la declaraci\u00f3n del componente MyComponent.defaultProps = { location: 'San Francisco' } const ShoppingCart = (props) => { return ( <div> <h1>Shopping Cart Component</h1> </div> ) }; ShoppingCart.defaultProps = { items:0 } // Override Default props const Items = (props) => { return ( <h1>Current Quantity of Items in Cart: {props.quantity}</h1> ) } Items.defaultProps = { quantity: 0 } class ShoppingCart extends React.Component { constructor(props) { super(props); } render() { return <Items quantity={10} /> } }; Verificaci\u00f3n de tipos con PropTypes -Establece propTypes cuando sepas de antemano el tipo que tendra la propiedad // require the type function for a prop called handleClick import React, { PropTypes } from 'react'; MyComponent.propTypes = { handleClick: PropTypes.func.isRequired } const Items = (props) => { return <h1>Current Quantity of Items in Cart: {props.quantity}</h1> }; Items.propTypes = { quantity: PropTypes.number.isRequired } Items.defaultProps = { quantity: 0 }; class ShoppingCart extends React.Component { constructor(props) { super(props); } render() { return <Items /> } }; Acceder a Props usando this.props -Pasar una propiedad a un componente de una clase ES6 -Cada vez que se refiera a un componente de la clase dentro de s\u00ed mismo, usa \"this\". -Para acceder a los propiedades dentro de un componente de la clase, pon delante del c\u00f3digo para acceder a \u00e9l \"this\". -Por ejemplo, si un componente de clase ES6 tiene una propiedad llamada data, usa {this.props.data} en JSX. class ReturnTempPassword extends React.Component { constructor(props) { super(props); } render() { return ( <div> <p>Your temporary password is: <strong>{this.props.tempPassword}</strong> </p> </div> ); } }; class ResetPassword extends React.Component { constructor(props) { super(props); } render() { return ( <div> <h2>Reset Password</h2> <h3>We've generated a new temporary password for you.</h3> <h3>Please reset this password settings ASAP.</h3> <ReturnTempPassword tempPassword=\"serrPbqrPnzc\" /> </div> ); } }; Mas props usando componentes de clases es6 class CampSite extends React.Component { constructor(props) { super(props); } render() { return ( <div> <Camper/> </div> ); } }; // change code below this line const Camper = (props) => { return ( <div> <p>{props.name}</p> </div> ); }; Camper.propTypes = { name: PropTypes.string.isRequired }; Camper.defaultProps = { name: 'CamperBot' }; Estilo CSS en React /* global ReactDOM React */ const destination = document.getElementById('container'); class Letter extends React.Component { render() { const letterStyle = { padding: 10, margin: 10, backgroundColor: this.props.bgcolor, color: \"#333\", display: \"inline-block\", fontFamily: \"monospace\", fontSize: 32, textAlign: \"center\" }; return ( <div style={letterStyle}> {this.props.children} </div> ); } } const layout = ( <div> <Letter bgcolor=\"#58b3ff\">A</Letter> <Letter bgcolor=\"#ff605f\">E</Letter> <Letter bgcolor=\"#ffd52e\">I</Letter> <Letter bgcolor=\"#49dd8e\">O</Letter> <Letter bgcolor=\"#ae99ff\">U</Letter> </div> ); ReactDOM.render( layout, destination ); Composicion Puedes renderizar elementos JSX, componentes funciones sin estado y componentes de clase ES6 dentro de otros componentes Composicion de componentes /* global ReactDOM React */ const destination = document.getElementById('container'); class Card extends React.Component { render() { const cardStyle = { height: 200, width: 150, padding: 0, backgroundColor: \"#FFF\", WebkitFilter: \"drop-shadow(0px 0px 5px #666)\", filter: \"drop-shadow(0px 0px 5px #666)\" }; return ( <div style={cardStyle}> <Square color={this.props.color} /> <Label color={this.props.color} /> </div> ); } } class Square extends React.Component { render() { const squareStyle = { height: 150, backgroundColor: this.props.color }; return ( <div style={squareStyle}> </div> ); } } class Label extends React.Component { render() { const labelStyle = { fontFamily: \"sans-serif\", fontWeight: \"bold\", padding: 13, margin: 0 }; return ( <p style={labelStyle}>{this.props.color}</p> ); } } const layout = ( <div> <Card color=\"lightblue\" /> </div> ); ReactDOM.render( layout, destination ); Transferir propiedades con el operador spread /* global ReactDOM React */ const destination = document.getElementById('container'); class Display extends React.Component { render() { return ( <div> <p>{this.props.color}</p> <p>{this.props.num}</p> <p>{this.props.size}</p> </div> ); } } class Label extends React.Component { render() { return ( <Display {...this.props} /> ); } } class Shirt extends React.Component { render() { return ( <div> <Label {...this.props} /> </div> ); } } const layout = ( <div> <Shirt color=\"steelblue\" num=\"3.14\" size=\"medium\" /> </div> ); ReactDOM.render( layout, destination ); Estado Estado /* global ReactDOM React */ const destination = document.getElementById('container'); class LightningCounter extends React.Component { constructor(props, context) { super(props, context); this.state = { strikes: 0 }; this.timerTick = this.timerTick.bind(this); } componentDidMount() { setInterval(this.timerTick, 1000); } timerTick() { this.setState({ strikes: this.state.strikes + 100 }); } render() { const counterStyle = { color: \"#66FFFF\", fontSize: 50 }; const count = this.state.strikes.toLocaleString(); return ( <h1 style={counterStyle}>{count}</h1> ); } } class LightningCounterDisplay extends React.Component { render() { const commonStyle = { margin: 0, padding: 0 }; const divStyle = { width: 250, textAlign: \"center\", backgroundColor: \"#020202\", padding: 40, fontFamily: \"sans-serif\", color: \"#999999\", borderRadius: 10 }; const textStyles = { emphasis: { fontSize: 38, ...commonStyle }, smallEmphasis: { ...commonStyle }, small: { fontSize: 17, opacity: 0.5, ...commonStyle } } return ( <div style={divStyle}> <LightningCounter /> <h2 style={textStyles.smallEmphasis}>LIGHTNING STRIKES</h2> <h2 style={textStyles.emphasis}>WORLDWIDE</h2> <p style={textStyles.small}>(since you loaded this example)</p> </div> ); } } const layout = ( <div> <LightningCounterDisplay /> </div> ); ReactDOM.render( layout, destination ); De los datos a la UI (interface de usuario) /* global ReactDOM React */ const destination = document.getElementById('container'); class Circle extends React.Component { render() { const circleStyle = { padding: 10, margin: 20, display: \"inline-block\", backgroundColor: this.props.bgColor, borderRadius: \"50%\", width: 100, height: 100, }; return ( <div style={circleStyle}> </div> ); } } const colors = [\"#393E41\", \"#E94F37\", \"#1C89BF\", \"#A1D363\", \"#85FFC7\", \"#297373\", \"#FF8552\", \"#A40E4C\"]; const renderData = []; for (let i = 0; i < colors.length; i++) { const color = colors[i]; renderData.push(<Circle key={i + color} bgColor={colors[i]} />); } const layout = ( <div> {renderData} </div> ); ReactDOM.render( layout, destination ); forceUpdate() Si setState no rerenderiza el componete usa forceUpdate() Por defecto, cuando el estado de sus componentes o los props cambian, su componente se volver\u00e1 a renderizar. Sin embargo, si estos cambios son impl\u00edcitos (p.e.: datos profundos dentro de un objeto camabian pero sin cambiar el objeto mismo) o si su render() depende de otros datos, puedes decirle a React que necesita reejecutar render() llamando a forceUpdate(). COMUNICACION DE DATOS Ideas basicas Hijos a Padres class Container extends React.Component { constructor(props) { super(props); this.state = { input: props.template, }; this.getBackData = this.getBackData.bind(this); } getBackData(data) { this.setState({ input: data }); } render() { return ( <div style={container}> <Editor placeholder={this.state.input} callback={this.getBackData)} /> <Viewer raw={this.state.input} /> </div> ); } } class Editor extends React.Component { constructor(props) { super(props); this.editing = this.editing.bind(this); } editing(e) { e.preventDefault(); this.props.callback(e.target.value); } render() { return ( <div className=\"input\"> <textarea id=\"input\" placeholder={this.props.placeholder} onChange={this.editing}> </textarea> </div> ); } } LIFECYCLE METODOS /* global ReactDOM React */ const destination = document.getElementById('container'); class Counter extends React.Component { render() { const textStyle = { fontSize: 72, fontFamily: \"sans-serif\", color: \"#333\", fontWeight: \"bold\" }; return ( <div style={textStyle}> {this.props.display} </div> ); } } class CounterParent extends React.Component { constructor(props, context) { super(props, context); console.log(\"constructor: Default state time!\"); this.state = { count: 0 }; this.increase = this.increase.bind(this); } getInitialState() { console.log(\"getInitialState: Default state time!\"); return { count: 0 }; } increase() { this.setState({ count: this.state.count + 1 }); } componentWillUpdate(newProps, newState) { console.log(\"componentWillUpdate: Component is about to update!\"); } componentDidUpdate(currentProps, currentState) { console.log(\"componentDidUpdate: Component just updated!\"); } componentWillMount() { console.log(\"componentWillMount: Component is about to mount!\"); } componentDidMount() { console.log(\"componentDidMount: Component just mounted!\"); } componentWillUnmount() { console.log(\"componentWillUnmount: Component is about to be removed from the DOM!\"); } shouldComponentUpdate(newProps, newState) { console.log(\"shouldComponentUpdate: Should component update?\"); if (newState.count < 5) { console.log(\"shouldComponentUpdate: Component should update!\"); return true; } else { ReactDOM.unmountComponentAtNode(destination); console.log(\"shouldComponentUpdate: Component should not update!\"); return false; } } componentWillReceiveProps(newProps) { console.log(\"componentWillReceiveProps: Component will get new props!\"); } render() { const backgroundStyle = { padding: 50, border: \"#333 2px dotted\", width: 250, height: 100, borderRadius: 10, textAlign: \"center\" }; return ( <div style={backgroundStyle}> <Counter display={this.state.count} /> <button onClick={this.increase}> + </button> </div> ); } } console.log(\"defaultProps: Default prop time!\"); CounterParent.defaultProps = { }; const layout = ( <div> <CounterParent /> </div> ); ReactDOM.render( layout, destination ); RENDERIZADO CONDICIONAL Variables render() { const isLoggedIn = this.state.isLoggedIn; let button = null; if (isLoggedIn) { button = <LogoutButton onClick={this.handleLogoutClick} />; } else { button = <LoginButton onClick={this.handleLoginClick} />; } return ( <div> <Greeting isLoggedIn={isLoggedIn} /> {button} </div> ); } If return ( <div> <h1>Hello!</h1> {unreadMessages.length > 0 && <h2> You have {unreadMessages.length} unread messages. </h2> } </div> ); If-else codition ? true : false - return ( <div> The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in. </div> ); return ( <div> {isLoggedIn ? ( <LogoutButton onClick={this.handleLogoutClick} /> ) : ( <LoginButton onClick={this.handleLoginClick} /> )} </div> ); EVENTOS Eventos en React son SyntheticEvent que envuelven eventos normales Documentacion en React sobre Eventos del sistema this dentro del manejador de eventos -Fuera de react, el valor de this dentro de una manejador de eventos se refiere al elemento que disparo el evento. -En React, this se refiere al componente donde el manejador de evento vive. Escuchando eventos del DOM class Something extends React.Component { handleMyEvent(e) { // do something } componentDidMount() { window.addEventListener(\"someEvent\", this.handleMyEvent); } componentWillUnmount() { window.removeEventListener(\"someEvent\", this.handleMyEvent); } render() { return ( <div myWeirdEvent={this.handleMyEvent}>Hello!</div> ); } }; Synthetic Events /* global ReactDOM React */ const destination = document.getElementById('container'); class Counter extends React.Component { render() { const textStyle = { fontSize: 72, fontFamily: \"sans-serif\", color: \"#333\", fontWeight: \"bold\" }; return ( <div style={textStyle}> {this.props.display} </div> ); } } class CounterParent extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; this.increase = this.increase.bind(this); } increase(e) { //console.log(e); let currentCount = this.state.count; if (e.shiftKey) { currentCount += 10; } else { currentCount += 1; } this.setState({ count: currentCount }); } render() { const backgroundStyle = { padding: 50, backgroundColor: \"#FFC53A\", width: 250, height: 100, borderRadius: 10, textAlign: \"center\" }; const buttonStyle = { fontSize: \"1em\", width: 30, height: 30, fontFamily: \"sans-serif\", color: \"#333\", fontWeight: \"bold\", lineHeight: \"3px\" }; return ( <div style={backgroundStyle}> <Counter display={this.state.count} /> <button onClick={this.increase} style={buttonStyle}>+</button> </div> ); } } const layout = ( <div> <CounterParent /> </div> ); ReactDOM.render( layout, destination ); Pasar parametros desde los eventos onClick={() => this.functionName(params)} PORTALES Uso // These two containers are siblings in the DOM const appRoot = document.getElementById('app-root'); const modalRoot = document.getElementById('modal-root'); // Let's create a Modal component that is an abstraction around // the portal API. class Modal extends React.Component { constructor(props) { super(props); // Create a div that we'll render the modal into. Because each // Modal component has its own element, we can render multiple // modal components into the modal container. this.el = document.createElement('div'); } componentDidMount() { // Append the element into the DOM on mount. We'll render // into the modal container element (see the HTML tab). modalRoot.appendChild(this.el); } componentWillUnmount() { // Remove the element from the DOM when we unmount modalRoot.removeChild(this.el); } render() { // Use a portal to render the children into the element return ReactDOM.createPortal( // Any valid React child: JSX, strings, arrays, etc. this.props.children, // A DOM element this.el, ); } } // The Modal component is a normal React component, so we can // render it wherever we like without needing to know that it's // implemented with portals. class App extends React.Component { constructor(props) { super(props); this.state = { showModal: false }; this.handleShow = this.handleShow.bind(this); this.handleHide = this.handleHide.bind(this); } handleShow() { this.setState({ showModal: true }); } handleHide() { this.setState({ showModal: false }); } render() { // Show a Modal on click. // (In a real app, don't forget to use ARIA attributes // for accessibility!) const modal = this.state.showModal ? ( <Modal> <div className=\"modal\"> <div> With a portal, we can render content into a different part of the DOM, as if it were any other React child. </div> This is being rendered inside the #modal-container div. <button onClick={this.handleHide}>Hide modal</button> </div> </Modal> ) : null; return ( <div className=\"app\"> This div has overflow: hidden. <button onClick={this.handleShow}>Show modal</button> {modal} </div> ); } } ReactDOM.render(<App />, appRoot); Burbujas de Eventos // These two containers are siblings in the DOM const appRoot = document.getElementById('app-root'); const modalRoot = document.getElementById('modal-root'); class Modal extends React.Component { constructor(props) { super(props); this.el = document.createElement('div'); } componentDidMount() { modalRoot.appendChild(this.el); } componentWillUnmount() { modalRoot.removeChild(this.el); } render() { return ReactDOM.createPortal( this.props.children, this.el, ); } } class Parent extends React.Component { constructor(props) { super(props); this.state = {clicks: 0}; this.handleClick = this.handleClick.bind(this); } handleClick() { // This will fire when the button in Child is clicked, // updating Parent's state, even though button // is not direct descendant in the DOM. this.setState(prevState => ({ clicks: prevState.clicks + 1 })); } render() { return ( <div onClick={this.handleClick}> <p>Number of clicks: {this.state.clicks}</p> <p> Open up the browser DevTools to observe that the button is not a child of the div with the onClick handler. </p> <Modal> <Child /> </Modal> </div> ); } } function Child() { // The click event on this button will bubble up to parent, // because there is no 'onClick' attribute defined return ( <div className=\"modal\"> <button>Click</button> </div> ); } ReactDOM.render(<Parent />, appRoot); REACT ROUTER 4.2.0 Basico /* global ReactDOM React */ const destination = document.getElementById('book'); const Router = window.ReactRouterDOM.BrowserRouter; const Route = window.ReactRouterDOM.Route; const Link = window.ReactRouterDOM.Link; const Prompt = window.ReactRouterDOM.Prompt; const Switch = window.ReactRouterDOM.Switch; const Redirect = window.ReactRouterDOM.Redirect; const development = \"/old/apps/book/html\"; const production = \"/old/apps/book\"; class Controller extends React.Component { constructor(props) { super(props); this.state = { data: { }, default: development// production }; } render() { const a = { textAlign: \"center\", fontFamily: \"Indie Flower\" }; return ( <div className=\"plugin\" style={a}> <h1>Book Trading Club</h1> <Router> <div> <ul> <li> <Link to='./book.html'>Index</Link> </li> <li> <Link to='./home'>Home</Link> </li> <li> <Link to='./about'>About</Link> </li> </ul> <Switch> <Route exact path={this.state.default + \"/book.html\"} component={Index} /> <Route path={this.state.default + \"/home\"} component={Home} /> <Route path={this.state.default + \"/about\"} component={About} /> </Switch> </div> </Router> </div> ); } } const Index = () => ( <div> <h1>Index</h1> </div> ); const Home = () => ( <div> <h1>Welcome home</h1> </div> ); const About = () => ( <div> <h1>About</h1> </div> ); const layout = ( <Controller /> ); ReactDOM.render( layout, destination ); Ejemplo /* global ReactDOM React lib Home About Index LoginForm SignUpForm ShowBooks MyBooks UserDataForm*/ const Router = window.ReactRouterDOM.BrowserRouter; const Route = window.ReactRouterDOM.Route; const Link = window.ReactRouterDOM.Link; const Prompt = window.ReactRouterDOM.Prompt; const Switch = window.ReactRouterDOM.Switch; const Redirect = window.ReactRouterDOM.Redirect; class Controller extends React.Component { render() { const a = { textAlign: \"center\", }; const gap = { paddingTop: \"75px\", }; const links = { fontFamily: \"arial\", fontSize: \"1em\", }; return ( <div className=\"plugin\" style={a}> <Menu showLogin={this.showLogin} showSignup={this.showSignup} goAllBooks={this.goAllBooks} goMyBooks={this.goMyBooks} goUserData={this.goUserData} doLogout={this.doLogout} isLogged={this.state.isLogged} user={this.state.user} /> <div style={gap}> <div style={links}> {/*<Link to='./book.html'> <h1>Index</h1> </Link> <Link to='./login'> Login </Link> <Link to='./signup'> Signup </Link> <Link to='./allbooks'> AllBooks </Link> <Link to='./mybooks'> MyBooks </Link> <Link to='./userdata'> UserData </Link> <Link to='./'> </Link>*/} </div> <Switch> <Route exact path={this.state.default + \"/book.html\"} component={Home} /> <Route path={this.state.default + \"/login\"} render={() => ( <LoginForm doLogin={this.doLogin} /> )} /> <Route path={this.state.default + \"/signup\"} render={() => ( <SignUpForm doSignup={this.doSignup} /> )} /> <Route path={this.state.default + \"/allbooks\"} render={() => ( <ShowBooks books={this.state.books} username={this.state.profile.username} askTrade={this.askTrade} /> )} /> <Route path={this.state.default + \"/mybooks\"} render={() => ( <MyBooks books={this.state.books} username={this.state.profile.username} addBook={this.addBook} acceptTrade={this.acceptTrade} /> )} /> <Route path={this.state.default + \"/userdata\"} render={() => ( <UserDataForm profile={this.state.profile} updateProfile={this.updateProfile} /> )} /> {/*<Route path={this.state.default + \"/\"} component={} />*/} </Switch> </div> <Footer isEmpty={this.props.location.pathname === prod + \"/allbooks\" || this.props.location.pathname === prod + \"/mybooks\"} /> </div > ); } } const layout = ( <Router> <Route path=\"/\" component={Controller} /> </Router> ); ReactDOM.render( layout, destination );","title":"Reactjs"},{"location":"reactjs/#reactjs-1620","text":"Instalacion <!-- Versions menu --> https://unpkg.com/react/ https://unpkg.com/react-dom/ <!-- React dev --> <script crossorigin src=\"https://unpkg.com/react@16.2.0/umd/react.development.js\"> </script> <script crossorigin src=\"https://unpkg.com/react-dom@16.2.0/umd/react-dom.development.js\"> </script> <!-- React Router Dev--> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router/ 4.2.0/react-router.js\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router-dom/ 4.2.2/react-router-dom.js\"></script> <!-- React Prod --> <script crossorigin src=\"https://unpkg.com/react@16.2.0/umd/react.production.min.js\"> </script> <script crossorigin src=\"https://unpkg.com/react-dom@16.2.0/umd/react-dom.production.min.js\"> </script> <!-- React Router Prod --> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router/ 4.2.0/react-router.min.js\"> </script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router-dom/ 4.2.2/react-router-dom.min.js\"></script> <!-- Babel --> <script crossorigin src=\"https://unpkg.com/babel-standalone@6.26.0/babel.min.js\"> </script>","title":"REACTJS 16.2.0"},{"location":"reactjs/#jsx","text":"JSX permite mezclar javascript y etiquetas HTML para definer elementos de interfaces de usuario y su funcionalidad","title":"JSX"},{"location":"reactjs/#crear-elemento-jsx","text":"// simple const JSX = <h1>Hello JSX!</h1>; // complejo, todos los elementos son envueltos por un unico elemento padre const JSX = ( <div> <h1>Hello JSX!</h1> { /* this is a JSX comment */ } { 'this is treated as JavaScript code' } <p>Some info</p> <ul> <li>An item</li> <li>Another item</li> <li>A third item</li> </ul> </div>);","title":"Crear elemento JSX"},{"location":"reactjs/#renderizar-elemento-jsx","text":"// ReactDOM.render(componentToRender, targetNode) ReactDOM.render(JSX, document.getElementById('challenge-node'));","title":"Renderizar elemento JSX"},{"location":"reactjs/#sintaxis","text":"Definir una clase HTML en JSX , usa className en lugar de class La convenci\u00f3n de nomenclatura para todos los atributos HTML y referencias de eventos en JSX se convierte en camelCase. Por ejemplo, el evento de clic en JSX es onClick, en lugar de onclick. const JSX = ( <div className = 'myDiv'> <h1>Add a class to this div</h1> </div>);","title":"Sintaxis"},{"location":"reactjs/#componente","text":"","title":"COMPONENTE"},{"location":"reactjs/#tipos","text":"1.Usar una funcion javascript para crear un componente funcional sin estado // After transpiled, <div> will have a CSS class of 'customClass' const MyComponent = function() { return ( <div className=\"customClass\"> Demo Solution </div> ); } 2.Usando sintaxis ES6 class class MyComponent extends React.Component { constructor(props) { super(props); } render() { return ( <h1>Hi</h1> ); } }","title":"Tipos"},{"location":"reactjs/#props-propiedades","text":"Pasar una propiedad const CurrentDate = (props) => { return ( <div> <p>The current date is: {props.date} </p> </div> ); }; class Calendar extends React.Component { constructor(props) { super(props); } render() { return ( <div> <h3>What date is it?</h3> <CurrentDate date={Date()}/> </div> ); } }; Pasar un Array como Props <ParentComponent> <ChildComponent colors={[\"green\", \"blue\", \"red\"]} /> </ParentComponent> const ChildComponent = (props) => <p>{props.colors.join(', ')}</p> const List= (props) => { return <p>{props.tasks.join(\", \")}</p> }; class ToDo extends React.Component { constructor(props) { super(props); } render() { return ( <div> <h1>To Do Lists</h1> <h2>Today</h2> <List tasks={[\"today1\", \"today2\"]}/> <h2>Tomorrow</h2> <List tasks={[\"tomorrow1\", \"tomorrow2\", \"tomorrow3\"]}/> </div> ); } }; Usar default Props -Puedes asignar props por defecto a un componente como una propiedad en el propio componente y React asigna el default prop si es necesario. -React asigna default props si las propiedades no est\u00e1n definidas, pero si pasas nulo como valor de una propiedad, permanecer\u00e1 nulo. -La forma de anular los default props es establecer expl\u00edcitamente los valores de la propiedad para un componente. -Decl\u00e1ralos inmediatamente despu\u00e9s de la declaraci\u00f3n del componente MyComponent.defaultProps = { location: 'San Francisco' } const ShoppingCart = (props) => { return ( <div> <h1>Shopping Cart Component</h1> </div> ) }; ShoppingCart.defaultProps = { items:0 } // Override Default props const Items = (props) => { return ( <h1>Current Quantity of Items in Cart: {props.quantity}</h1> ) } Items.defaultProps = { quantity: 0 } class ShoppingCart extends React.Component { constructor(props) { super(props); } render() { return <Items quantity={10} /> } }; Verificaci\u00f3n de tipos con PropTypes -Establece propTypes cuando sepas de antemano el tipo que tendra la propiedad // require the type function for a prop called handleClick import React, { PropTypes } from 'react'; MyComponent.propTypes = { handleClick: PropTypes.func.isRequired } const Items = (props) => { return <h1>Current Quantity of Items in Cart: {props.quantity}</h1> }; Items.propTypes = { quantity: PropTypes.number.isRequired } Items.defaultProps = { quantity: 0 }; class ShoppingCart extends React.Component { constructor(props) { super(props); } render() { return <Items /> } }; Acceder a Props usando this.props -Pasar una propiedad a un componente de una clase ES6 -Cada vez que se refiera a un componente de la clase dentro de s\u00ed mismo, usa \"this\". -Para acceder a los propiedades dentro de un componente de la clase, pon delante del c\u00f3digo para acceder a \u00e9l \"this\". -Por ejemplo, si un componente de clase ES6 tiene una propiedad llamada data, usa {this.props.data} en JSX. class ReturnTempPassword extends React.Component { constructor(props) { super(props); } render() { return ( <div> <p>Your temporary password is: <strong>{this.props.tempPassword}</strong> </p> </div> ); } }; class ResetPassword extends React.Component { constructor(props) { super(props); } render() { return ( <div> <h2>Reset Password</h2> <h3>We've generated a new temporary password for you.</h3> <h3>Please reset this password settings ASAP.</h3> <ReturnTempPassword tempPassword=\"serrPbqrPnzc\" /> </div> ); } }; Mas props usando componentes de clases es6 class CampSite extends React.Component { constructor(props) { super(props); } render() { return ( <div> <Camper/> </div> ); } }; // change code below this line const Camper = (props) => { return ( <div> <p>{props.name}</p> </div> ); }; Camper.propTypes = { name: PropTypes.string.isRequired }; Camper.defaultProps = { name: 'CamperBot' };","title":"Props (propiedades)"},{"location":"reactjs/#estilo-css-en-react","text":"/* global ReactDOM React */ const destination = document.getElementById('container'); class Letter extends React.Component { render() { const letterStyle = { padding: 10, margin: 10, backgroundColor: this.props.bgcolor, color: \"#333\", display: \"inline-block\", fontFamily: \"monospace\", fontSize: 32, textAlign: \"center\" }; return ( <div style={letterStyle}> {this.props.children} </div> ); } } const layout = ( <div> <Letter bgcolor=\"#58b3ff\">A</Letter> <Letter bgcolor=\"#ff605f\">E</Letter> <Letter bgcolor=\"#ffd52e\">I</Letter> <Letter bgcolor=\"#49dd8e\">O</Letter> <Letter bgcolor=\"#ae99ff\">U</Letter> </div> ); ReactDOM.render( layout, destination );","title":"Estilo CSS en React"},{"location":"reactjs/#composicion","text":"Puedes renderizar elementos JSX, componentes funciones sin estado y componentes de clase ES6 dentro de otros componentes","title":"Composicion"},{"location":"reactjs/#composicion-de-componentes","text":"/* global ReactDOM React */ const destination = document.getElementById('container'); class Card extends React.Component { render() { const cardStyle = { height: 200, width: 150, padding: 0, backgroundColor: \"#FFF\", WebkitFilter: \"drop-shadow(0px 0px 5px #666)\", filter: \"drop-shadow(0px 0px 5px #666)\" }; return ( <div style={cardStyle}> <Square color={this.props.color} /> <Label color={this.props.color} /> </div> ); } } class Square extends React.Component { render() { const squareStyle = { height: 150, backgroundColor: this.props.color }; return ( <div style={squareStyle}> </div> ); } } class Label extends React.Component { render() { const labelStyle = { fontFamily: \"sans-serif\", fontWeight: \"bold\", padding: 13, margin: 0 }; return ( <p style={labelStyle}>{this.props.color}</p> ); } } const layout = ( <div> <Card color=\"lightblue\" /> </div> ); ReactDOM.render( layout, destination );","title":"Composicion de componentes"},{"location":"reactjs/#transferir-propiedades-con-el-operador-spread","text":"/* global ReactDOM React */ const destination = document.getElementById('container'); class Display extends React.Component { render() { return ( <div> <p>{this.props.color}</p> <p>{this.props.num}</p> <p>{this.props.size}</p> </div> ); } } class Label extends React.Component { render() { return ( <Display {...this.props} /> ); } } class Shirt extends React.Component { render() { return ( <div> <Label {...this.props} /> </div> ); } } const layout = ( <div> <Shirt color=\"steelblue\" num=\"3.14\" size=\"medium\" /> </div> ); ReactDOM.render( layout, destination );","title":"Transferir propiedades con el operador spread"},{"location":"reactjs/#estado","text":"","title":"Estado"},{"location":"reactjs/#estado_1","text":"/* global ReactDOM React */ const destination = document.getElementById('container'); class LightningCounter extends React.Component { constructor(props, context) { super(props, context); this.state = { strikes: 0 }; this.timerTick = this.timerTick.bind(this); } componentDidMount() { setInterval(this.timerTick, 1000); } timerTick() { this.setState({ strikes: this.state.strikes + 100 }); } render() { const counterStyle = { color: \"#66FFFF\", fontSize: 50 }; const count = this.state.strikes.toLocaleString(); return ( <h1 style={counterStyle}>{count}</h1> ); } } class LightningCounterDisplay extends React.Component { render() { const commonStyle = { margin: 0, padding: 0 }; const divStyle = { width: 250, textAlign: \"center\", backgroundColor: \"#020202\", padding: 40, fontFamily: \"sans-serif\", color: \"#999999\", borderRadius: 10 }; const textStyles = { emphasis: { fontSize: 38, ...commonStyle }, smallEmphasis: { ...commonStyle }, small: { fontSize: 17, opacity: 0.5, ...commonStyle } } return ( <div style={divStyle}> <LightningCounter /> <h2 style={textStyles.smallEmphasis}>LIGHTNING STRIKES</h2> <h2 style={textStyles.emphasis}>WORLDWIDE</h2> <p style={textStyles.small}>(since you loaded this example)</p> </div> ); } } const layout = ( <div> <LightningCounterDisplay /> </div> ); ReactDOM.render( layout, destination );","title":"Estado"},{"location":"reactjs/#de-los-datos-a-la-ui-interface-de-usuario","text":"/* global ReactDOM React */ const destination = document.getElementById('container'); class Circle extends React.Component { render() { const circleStyle = { padding: 10, margin: 20, display: \"inline-block\", backgroundColor: this.props.bgColor, borderRadius: \"50%\", width: 100, height: 100, }; return ( <div style={circleStyle}> </div> ); } } const colors = [\"#393E41\", \"#E94F37\", \"#1C89BF\", \"#A1D363\", \"#85FFC7\", \"#297373\", \"#FF8552\", \"#A40E4C\"]; const renderData = []; for (let i = 0; i < colors.length; i++) { const color = colors[i]; renderData.push(<Circle key={i + color} bgColor={colors[i]} />); } const layout = ( <div> {renderData} </div> ); ReactDOM.render( layout, destination );","title":"De los datos a la UI (interface de usuario)"},{"location":"reactjs/#forceupdate","text":"Si setState no rerenderiza el componete usa forceUpdate() Por defecto, cuando el estado de sus componentes o los props cambian, su componente se volver\u00e1 a renderizar. Sin embargo, si estos cambios son impl\u00edcitos (p.e.: datos profundos dentro de un objeto camabian pero sin cambiar el objeto mismo) o si su render() depende de otros datos, puedes decirle a React que necesita reejecutar render() llamando a forceUpdate().","title":"forceUpdate()"},{"location":"reactjs/#comunicacion-de-datos","text":"Ideas basicas","title":"COMUNICACION DE DATOS"},{"location":"reactjs/#hijos-a-padres","text":"class Container extends React.Component { constructor(props) { super(props); this.state = { input: props.template, }; this.getBackData = this.getBackData.bind(this); } getBackData(data) { this.setState({ input: data }); } render() { return ( <div style={container}> <Editor placeholder={this.state.input} callback={this.getBackData)} /> <Viewer raw={this.state.input} /> </div> ); } } class Editor extends React.Component { constructor(props) { super(props); this.editing = this.editing.bind(this); } editing(e) { e.preventDefault(); this.props.callback(e.target.value); } render() { return ( <div className=\"input\"> <textarea id=\"input\" placeholder={this.props.placeholder} onChange={this.editing}> </textarea> </div> ); } }","title":"Hijos a Padres"},{"location":"reactjs/#lifecycle-metodos","text":"/* global ReactDOM React */ const destination = document.getElementById('container'); class Counter extends React.Component { render() { const textStyle = { fontSize: 72, fontFamily: \"sans-serif\", color: \"#333\", fontWeight: \"bold\" }; return ( <div style={textStyle}> {this.props.display} </div> ); } } class CounterParent extends React.Component { constructor(props, context) { super(props, context); console.log(\"constructor: Default state time!\"); this.state = { count: 0 }; this.increase = this.increase.bind(this); } getInitialState() { console.log(\"getInitialState: Default state time!\"); return { count: 0 }; } increase() { this.setState({ count: this.state.count + 1 }); } componentWillUpdate(newProps, newState) { console.log(\"componentWillUpdate: Component is about to update!\"); } componentDidUpdate(currentProps, currentState) { console.log(\"componentDidUpdate: Component just updated!\"); } componentWillMount() { console.log(\"componentWillMount: Component is about to mount!\"); } componentDidMount() { console.log(\"componentDidMount: Component just mounted!\"); } componentWillUnmount() { console.log(\"componentWillUnmount: Component is about to be removed from the DOM!\"); } shouldComponentUpdate(newProps, newState) { console.log(\"shouldComponentUpdate: Should component update?\"); if (newState.count < 5) { console.log(\"shouldComponentUpdate: Component should update!\"); return true; } else { ReactDOM.unmountComponentAtNode(destination); console.log(\"shouldComponentUpdate: Component should not update!\"); return false; } } componentWillReceiveProps(newProps) { console.log(\"componentWillReceiveProps: Component will get new props!\"); } render() { const backgroundStyle = { padding: 50, border: \"#333 2px dotted\", width: 250, height: 100, borderRadius: 10, textAlign: \"center\" }; return ( <div style={backgroundStyle}> <Counter display={this.state.count} /> <button onClick={this.increase}> + </button> </div> ); } } console.log(\"defaultProps: Default prop time!\"); CounterParent.defaultProps = { }; const layout = ( <div> <CounterParent /> </div> ); ReactDOM.render( layout, destination );","title":"LIFECYCLE METODOS"},{"location":"reactjs/#renderizado-condicional","text":"","title":"RENDERIZADO CONDICIONAL"},{"location":"reactjs/#variables","text":"render() { const isLoggedIn = this.state.isLoggedIn; let button = null; if (isLoggedIn) { button = <LogoutButton onClick={this.handleLogoutClick} />; } else { button = <LoginButton onClick={this.handleLoginClick} />; } return ( <div> <Greeting isLoggedIn={isLoggedIn} /> {button} </div> ); }","title":"Variables"},{"location":"reactjs/#if","text":"return ( <div> <h1>Hello!</h1> {unreadMessages.length > 0 && <h2> You have {unreadMessages.length} unread messages. </h2> } </div> );","title":"If"},{"location":"reactjs/#if-else","text":"codition ? true : false - return ( <div> The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in. </div> ); return ( <div> {isLoggedIn ? ( <LogoutButton onClick={this.handleLogoutClick} /> ) : ( <LoginButton onClick={this.handleLoginClick} /> )} </div> );","title":"If-else"},{"location":"reactjs/#eventos","text":"Eventos en React son SyntheticEvent que envuelven eventos normales Documentacion en React sobre Eventos del sistema this dentro del manejador de eventos -Fuera de react, el valor de this dentro de una manejador de eventos se refiere al elemento que disparo el evento. -En React, this se refiere al componente donde el manejador de evento vive.","title":"EVENTOS"},{"location":"reactjs/#escuchando-eventos-del-dom","text":"class Something extends React.Component { handleMyEvent(e) { // do something } componentDidMount() { window.addEventListener(\"someEvent\", this.handleMyEvent); } componentWillUnmount() { window.removeEventListener(\"someEvent\", this.handleMyEvent); } render() { return ( <div myWeirdEvent={this.handleMyEvent}>Hello!</div> ); } };","title":"Escuchando eventos del DOM"},{"location":"reactjs/#synthetic-events","text":"/* global ReactDOM React */ const destination = document.getElementById('container'); class Counter extends React.Component { render() { const textStyle = { fontSize: 72, fontFamily: \"sans-serif\", color: \"#333\", fontWeight: \"bold\" }; return ( <div style={textStyle}> {this.props.display} </div> ); } } class CounterParent extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; this.increase = this.increase.bind(this); } increase(e) { //console.log(e); let currentCount = this.state.count; if (e.shiftKey) { currentCount += 10; } else { currentCount += 1; } this.setState({ count: currentCount }); } render() { const backgroundStyle = { padding: 50, backgroundColor: \"#FFC53A\", width: 250, height: 100, borderRadius: 10, textAlign: \"center\" }; const buttonStyle = { fontSize: \"1em\", width: 30, height: 30, fontFamily: \"sans-serif\", color: \"#333\", fontWeight: \"bold\", lineHeight: \"3px\" }; return ( <div style={backgroundStyle}> <Counter display={this.state.count} /> <button onClick={this.increase} style={buttonStyle}>+</button> </div> ); } } const layout = ( <div> <CounterParent /> </div> ); ReactDOM.render( layout, destination );","title":"Synthetic Events"},{"location":"reactjs/#pasar-parametros-desde-los-eventos","text":"onClick={() => this.functionName(params)}","title":"Pasar parametros desde los eventos"},{"location":"reactjs/#portales","text":"","title":"PORTALES"},{"location":"reactjs/#uso","text":"// These two containers are siblings in the DOM const appRoot = document.getElementById('app-root'); const modalRoot = document.getElementById('modal-root'); // Let's create a Modal component that is an abstraction around // the portal API. class Modal extends React.Component { constructor(props) { super(props); // Create a div that we'll render the modal into. Because each // Modal component has its own element, we can render multiple // modal components into the modal container. this.el = document.createElement('div'); } componentDidMount() { // Append the element into the DOM on mount. We'll render // into the modal container element (see the HTML tab). modalRoot.appendChild(this.el); } componentWillUnmount() { // Remove the element from the DOM when we unmount modalRoot.removeChild(this.el); } render() { // Use a portal to render the children into the element return ReactDOM.createPortal( // Any valid React child: JSX, strings, arrays, etc. this.props.children, // A DOM element this.el, ); } } // The Modal component is a normal React component, so we can // render it wherever we like without needing to know that it's // implemented with portals. class App extends React.Component { constructor(props) { super(props); this.state = { showModal: false }; this.handleShow = this.handleShow.bind(this); this.handleHide = this.handleHide.bind(this); } handleShow() { this.setState({ showModal: true }); } handleHide() { this.setState({ showModal: false }); } render() { // Show a Modal on click. // (In a real app, don't forget to use ARIA attributes // for accessibility!) const modal = this.state.showModal ? ( <Modal> <div className=\"modal\"> <div> With a portal, we can render content into a different part of the DOM, as if it were any other React child. </div> This is being rendered inside the #modal-container div. <button onClick={this.handleHide}>Hide modal</button> </div> </Modal> ) : null; return ( <div className=\"app\"> This div has overflow: hidden. <button onClick={this.handleShow}>Show modal</button> {modal} </div> ); } } ReactDOM.render(<App />, appRoot);","title":"Uso"},{"location":"reactjs/#burbujas-de-eventos","text":"// These two containers are siblings in the DOM const appRoot = document.getElementById('app-root'); const modalRoot = document.getElementById('modal-root'); class Modal extends React.Component { constructor(props) { super(props); this.el = document.createElement('div'); } componentDidMount() { modalRoot.appendChild(this.el); } componentWillUnmount() { modalRoot.removeChild(this.el); } render() { return ReactDOM.createPortal( this.props.children, this.el, ); } } class Parent extends React.Component { constructor(props) { super(props); this.state = {clicks: 0}; this.handleClick = this.handleClick.bind(this); } handleClick() { // This will fire when the button in Child is clicked, // updating Parent's state, even though button // is not direct descendant in the DOM. this.setState(prevState => ({ clicks: prevState.clicks + 1 })); } render() { return ( <div onClick={this.handleClick}> <p>Number of clicks: {this.state.clicks}</p> <p> Open up the browser DevTools to observe that the button is not a child of the div with the onClick handler. </p> <Modal> <Child /> </Modal> </div> ); } } function Child() { // The click event on this button will bubble up to parent, // because there is no 'onClick' attribute defined return ( <div className=\"modal\"> <button>Click</button> </div> ); } ReactDOM.render(<Parent />, appRoot);","title":"Burbujas de Eventos"},{"location":"reactjs/#react-router-420","text":"","title":"REACT ROUTER 4.2.0"},{"location":"reactjs/#basico","text":"/* global ReactDOM React */ const destination = document.getElementById('book'); const Router = window.ReactRouterDOM.BrowserRouter; const Route = window.ReactRouterDOM.Route; const Link = window.ReactRouterDOM.Link; const Prompt = window.ReactRouterDOM.Prompt; const Switch = window.ReactRouterDOM.Switch; const Redirect = window.ReactRouterDOM.Redirect; const development = \"/old/apps/book/html\"; const production = \"/old/apps/book\"; class Controller extends React.Component { constructor(props) { super(props); this.state = { data: { }, default: development// production }; } render() { const a = { textAlign: \"center\", fontFamily: \"Indie Flower\" }; return ( <div className=\"plugin\" style={a}> <h1>Book Trading Club</h1> <Router> <div> <ul> <li> <Link to='./book.html'>Index</Link> </li> <li> <Link to='./home'>Home</Link> </li> <li> <Link to='./about'>About</Link> </li> </ul> <Switch> <Route exact path={this.state.default + \"/book.html\"} component={Index} /> <Route path={this.state.default + \"/home\"} component={Home} /> <Route path={this.state.default + \"/about\"} component={About} /> </Switch> </div> </Router> </div> ); } } const Index = () => ( <div> <h1>Index</h1> </div> ); const Home = () => ( <div> <h1>Welcome home</h1> </div> ); const About = () => ( <div> <h1>About</h1> </div> ); const layout = ( <Controller /> ); ReactDOM.render( layout, destination );","title":"Basico"},{"location":"reactjs/#ejemplo","text":"/* global ReactDOM React lib Home About Index LoginForm SignUpForm ShowBooks MyBooks UserDataForm*/ const Router = window.ReactRouterDOM.BrowserRouter; const Route = window.ReactRouterDOM.Route; const Link = window.ReactRouterDOM.Link; const Prompt = window.ReactRouterDOM.Prompt; const Switch = window.ReactRouterDOM.Switch; const Redirect = window.ReactRouterDOM.Redirect; class Controller extends React.Component { render() { const a = { textAlign: \"center\", }; const gap = { paddingTop: \"75px\", }; const links = { fontFamily: \"arial\", fontSize: \"1em\", }; return ( <div className=\"plugin\" style={a}> <Menu showLogin={this.showLogin} showSignup={this.showSignup} goAllBooks={this.goAllBooks} goMyBooks={this.goMyBooks} goUserData={this.goUserData} doLogout={this.doLogout} isLogged={this.state.isLogged} user={this.state.user} /> <div style={gap}> <div style={links}> {/*<Link to='./book.html'> <h1>Index</h1> </Link> <Link to='./login'> Login </Link> <Link to='./signup'> Signup </Link> <Link to='./allbooks'> AllBooks </Link> <Link to='./mybooks'> MyBooks </Link> <Link to='./userdata'> UserData </Link> <Link to='./'> </Link>*/} </div> <Switch> <Route exact path={this.state.default + \"/book.html\"} component={Home} /> <Route path={this.state.default + \"/login\"} render={() => ( <LoginForm doLogin={this.doLogin} /> )} /> <Route path={this.state.default + \"/signup\"} render={() => ( <SignUpForm doSignup={this.doSignup} /> )} /> <Route path={this.state.default + \"/allbooks\"} render={() => ( <ShowBooks books={this.state.books} username={this.state.profile.username} askTrade={this.askTrade} /> )} /> <Route path={this.state.default + \"/mybooks\"} render={() => ( <MyBooks books={this.state.books} username={this.state.profile.username} addBook={this.addBook} acceptTrade={this.acceptTrade} /> )} /> <Route path={this.state.default + \"/userdata\"} render={() => ( <UserDataForm profile={this.state.profile} updateProfile={this.updateProfile} /> )} /> {/*<Route path={this.state.default + \"/\"} component={} />*/} </Switch> </div> <Footer isEmpty={this.props.location.pathname === prod + \"/allbooks\" || this.props.location.pathname === prod + \"/mybooks\"} /> </div > ); } } const layout = ( <Router> <Route path=\"/\" component={Controller} /> </Router> ); ReactDOM.render( layout, destination );","title":"Ejemplo"},{"location":"varios/","text":"MISCELLANEUS IMAGEMAGICK Ejemplos Hacer el fondo transparente convert input.png -transparent red output.png Conversion entre formatos convert image.png image.jpg // bajando la calidad convert image.png -quality 90 image.jpg Convertir color de fondo a transparente o a otro color. convert image.png -background white white.png Montar imagenes montage -label 'FRONT END' frontEnd.png -label 'BACK END' backEnd.png -label 'DATABASE' database.png -label 'UTILS' utils.png -tile 2x2 -geometry 200x200 total.png Recortar los bordes shave Hacer el canvas mayor para encajar la imagen convert input.png -gravity center -background white -extent 500x500 output.png Optimizar imagenes // png convert INPUT.png -strip [-resize WxH] [-alpha Remove] OUTPUT.png //jpg convert INPUT.jpg -sampling-factor 4:2:0 -strip [-resize WxH] [-quality 85] [-interlace JPEG] [-colorspace Gray/sRGB] OUTPUT.jpg Comprimir imagenes // ojo que esto modifica el fichero actual, no crea uno nuevo mogrify -strip -interlace Plane -gaussian-blur 0.05 -quality 40% *.jpg GIT Instalar // Debian backports para pillar la ultima version deb http://ftp.debian.org/debian strecth-backports main aptitude -t strecth-backports install \"package\" // debian aptitude install git git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com git config --list nano ~/.gitconfig Commands git init [project-name] - A\u00f1ade el directorio donde estamos y crea el .git git status - lista todos los archivos nuevos o modificados sin haber sido committed git add [file] - - A\u00f1ade el fichero a la staging area y empieza a seguir los cambios que en el se producen git add . - A\u00f1ade todo en el directorio de forma recursiva a la staging area git reset [file] - Saca al archivo de la staging area git diff - Vemos los cambio del archivo git diff --staged - Vemos los cambio que hemos mandado al staging git commit -m \"mensaje\" - Realiza un commit y le asigna un \"mensaje\" git log - Es un diario con los cambios hechos en commits an la actual rama de .gitignore a github Si a\u00f1adimos algo a .gitignore ya no se commiteara pero tampoco desaparece lo existente en github. Para que se elimine de github ... git rm -r --cached some-directory git commit -m 'Remove the now ignored directory \"some-directory\"' git push origin master - normalmente con git push vale ramas git checkout -b nuevaRama - crea nueva rama de rama nuevaRama git checkout -d nombreRama - delete rama nombreRama git checkout otraRama - cambia a la rama otraRama git push origin nombreRama - push los commits de nombreRama git stash - cambios no committed se arrastran de una rama a otra. Para mantenerlos separados hacemos un stash antes de movernos a otra rama para guardar esos cambios antes de cambiar de rama. git stash apply - cuando vuelves a una rama recuperas los cambios sin hacer commit que se guardaron en esa rama. volver a estado anterior git reset --hard HEAD~5 - elimina los ultimos 5 commits git push origin -f - sincroniza la nueva situacion Volver a un commit anterior sin modificar el head # Paso 1: Encuentra el hash del commit git log # Paso 2: Crea una nueva rama como backup (opcional pero recomendado) git checkout -b nueva-rama # Paso 3: Actualiza el directorio de trabajo al estado del commit # Reemplaza <commit-id> con el hash del commit al que deseas volver git checkout <commit-id> . # Paso 4: A\u00f1ade los cambios al \u00edndice (si es necesario) git add . # Paso 5: Haz un nuevo commit (si es necesario) git commit -m \"Revertir al estado del commit <commit-id>\" # Paso 6: Empuja los cambios al repositorio remoto (si es necesario) git push origin nueva-rama Reducir el tama\u00f1o del directorio .git MKDOCS Instalacion apt-get install python-pip pip list --outdated -lista paquetes que se pueden actualizar pip install mkdocs pip install --upgrade mkdocs -actualizar mkdocs instalar mas temas pip install mkdocs-bootstrap pip install mkdocs-bootswatch pip install mkdocs-material pip install mkdocs-alabaster pip install mkdocs-cinder Configuracion mkdocs new my-project cd my-project $ mkdocs serve Running at: http://127.0.0.1:8000/ Comandos mkdocs build - crea un directorio site con todo el contenido estatico que se subira al servidor mkdocs build --clean - limpia lo que sobra de antes mkdocs build -d ruta/donde/gustes - crea el resultado y con el nombre gustes Ejemplo mkdocs.yml site_name: Chuletas google_analytics: [\"UA-114956807-1\", \"auto\"] repo_url: https://github.com/jolav/chuletas strict: true nav: - 'Menu': 'index.md' - 'HTML': 'html.md' - 'CSS': 'css.md' - 'Front End': 'frontend.md' - 'Javascript': 'javascript.md' - 'Javascript snippets': 'javascript-snippets.md' - 'Reactjs': 'reactjs.md' - 'Vuejs': 'vuejs.md' - 'Nodejs con Expressjs': 'nodejs-expressjs.md' - 'Nodejs snippets': 'nodejs-snippets.md' - 'Nodejs Bases de Datos': 'nodejs-bases-de-datos.md' - 'Golang': 'golang.md' - 'Golang web': 'golang-web.md' - 'Golang snippets': 'golang-snippets.md' - 'Golang Bases de Datos': 'golang-bases-de-datos.md' - 'Debian': 'debian.md' - 'Varios': 'varios.md' #theme: alabaster #theme_dir: \"chuletas-theme\" theme: name: alabaster custom_dir: chuletas-theme site_dir: 'chuletas' docs_dir: 'docs' extra_css: - '_extra/css/extra.css' extra_javascript: - '_extra/js/highlight.pack.js' extra: logo: '_img/chuletas128.png' include_toc: true GLITCH.COM Plantilla package.json { \"name\": \"sp500\", \"version\": \"0.1.11\", \"description\": \"betazone finance sp500 stock real time data\", \"main\": \"sp.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"start\": \"node sp.js\" }, \"engines\": { \"node\": \"8.x\" }, \"author\": \"jolav\", \"license\": \"BSD-3-Clause\", \"repository\": { \"type\": \"git\", \"url\": \"git+https://github.com/jolav/betazone.git\" }, \"bugs\": { \"url\": \"https://github.com/jolav/betazone/issues\" }, \"homepage\": \"https://github.com/jolav/betazone#readme\", \"dependencies\": { \"express\": \"^4.16.2\", \"dotenv\": \"^5.0.0\", } } EXPRESIONES REGULARES Flags Se a\u00f1aden despues de la expresion regular para indicar algo /expReg/i - ignora mayusculas o minusculas /expReg/g - repetir la busqueda a traves de la cadena entera Basicos . - cualquier cosa \\s - espacio en blanco \\S - cualquiera menos espacio en blanco \\d - numero \\D - no numero \\w - caracter alfanumerico (a-z, A-Z, 0-9) \\W - no caracter alfanumerico \\t - tabulador \\r - retorno de carro \\n - nueva linea Limites ^ - Comienzo de cadena o de multilinea \\A - Comienzo de cadena $ - Fin de cadena o fin de multilinea \\Z - Fin de cadena \\b - Palabra limite , \"\\bcat\\b\" pilla en \"cat in the hat\" pero no en \"locate\" \\B - No es una palabra limite \\< - Comienzo de palabra \\> - Fin de palabra Grupos y rangos Los rangos son inclusive (X|Y) - X o Y, ejemplo \\b(cat|dog)s\\b pilla \"cats\" o \"dogs\" (...) - Grupos [abc] - Rango (\"a\" \u00f3 \"b\" \u00f3 \"c\") [^abc] - No (\"a\" \u00f3 \"b\" \u00f3 \"c\") [a-h] - Minuscula entre la \"a\" y la \"h\" [A-H] - Mayucula entre la \"a\" y la \"h\" [3-6] - Numero entre 3 y 6 ambos inclusive Cuantificadores Por defecto los cuantificadores solo se aplican a un caracter, para aplicarlo a mas usar (...) para especificar la cadena buscada X* - 0 \u00f3 mas repeticiones de X X+ - 1 \u00f3 mas repeticiones de X X? - 0 \u00f3 instancias de X, vamos que es opcional X{m} - exactamente m instancias de X X{m,} - al menos m instancias de X X{m,n} - entre m y n instancias(incluidas) de X Especiales {}[]()^$.|*+?\\ y - entre corchetes deben ser escapados con contrabarra \\ Javascript En Javascript las expresiones regulares han de estar en una sola linea. Los espacios en blanco son significativos Delimitadas por barras / var expreg = /ab+c/; var expreg = new RegExp('/ab+c/'); expreg.test(variableATestarConLaexpresionRegular) // da true o false Metodos regexp.exec(string) Si la expresion regular casa con el string devuelve un array array[0] es la subcadena que casa con la expresion regular array[1] el texto capturado por el primer grupo array[2] el texto capturado por el segundo grupo array[n] el texto capturado por el n grupo Si la expresion regular tiene una bandera g la busqueda empieza en la posicion regexp.lastIndex (inicialmente cero). Si la busqueda es exitosa regexp.lastIndex pasara a ser el siguiente caracter tras la coincidencia. Si falla pasa a 0. Esto permite buscar varias coincidencias en una sola cadena regexp.test(string) Si la expresion regular casa con el string devuelve true, si no false var b = /&.+;/.test('frank & beans'); // b is true string.replace(expreg, nueva) - en la cadena string reemplaza lo que casa con la expresion regular por la string nueva string.match(regexp) - busca la regexp en la cadena string y devuelve las coincidencias en un array var str = \"The rain in SPAIN stays mainly in the plain\"; var res = str.match(/ain/g); console.log(res) // [ 'ain', 'ain', 'ain' ] ExpReg Comunes .replace(/\\s+/g, \"\") - Elimina todos los espacios en blancos .replace(/\\s/g, \"loQueSea\") - Reemplaza todos los espacios en blanco por loQueSea /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ - direccion de correo valida Aqui","title":"Varios"},{"location":"varios/#miscellaneus","text":"","title":"MISCELLANEUS"},{"location":"varios/#imagemagick","text":"Ejemplos Hacer el fondo transparente convert input.png -transparent red output.png Conversion entre formatos convert image.png image.jpg // bajando la calidad convert image.png -quality 90 image.jpg Convertir color de fondo a transparente o a otro color. convert image.png -background white white.png Montar imagenes montage -label 'FRONT END' frontEnd.png -label 'BACK END' backEnd.png -label 'DATABASE' database.png -label 'UTILS' utils.png -tile 2x2 -geometry 200x200 total.png Recortar los bordes shave Hacer el canvas mayor para encajar la imagen convert input.png -gravity center -background white -extent 500x500 output.png Optimizar imagenes // png convert INPUT.png -strip [-resize WxH] [-alpha Remove] OUTPUT.png //jpg convert INPUT.jpg -sampling-factor 4:2:0 -strip [-resize WxH] [-quality 85] [-interlace JPEG] [-colorspace Gray/sRGB] OUTPUT.jpg Comprimir imagenes // ojo que esto modifica el fichero actual, no crea uno nuevo mogrify -strip -interlace Plane -gaussian-blur 0.05 -quality 40% *.jpg","title":"IMAGEMAGICK"},{"location":"varios/#git","text":"Instalar // Debian backports para pillar la ultima version deb http://ftp.debian.org/debian strecth-backports main aptitude -t strecth-backports install \"package\" // debian aptitude install git git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com git config --list nano ~/.gitconfig Commands git init [project-name] - A\u00f1ade el directorio donde estamos y crea el .git git status - lista todos los archivos nuevos o modificados sin haber sido committed git add [file] - - A\u00f1ade el fichero a la staging area y empieza a seguir los cambios que en el se producen git add . - A\u00f1ade todo en el directorio de forma recursiva a la staging area git reset [file] - Saca al archivo de la staging area git diff - Vemos los cambio del archivo git diff --staged - Vemos los cambio que hemos mandado al staging git commit -m \"mensaje\" - Realiza un commit y le asigna un \"mensaje\" git log - Es un diario con los cambios hechos en commits an la actual rama de .gitignore a github Si a\u00f1adimos algo a .gitignore ya no se commiteara pero tampoco desaparece lo existente en github. Para que se elimine de github ... git rm -r --cached some-directory git commit -m 'Remove the now ignored directory \"some-directory\"' git push origin master - normalmente con git push vale ramas git checkout -b nuevaRama - crea nueva rama de rama nuevaRama git checkout -d nombreRama - delete rama nombreRama git checkout otraRama - cambia a la rama otraRama git push origin nombreRama - push los commits de nombreRama git stash - cambios no committed se arrastran de una rama a otra. Para mantenerlos separados hacemos un stash antes de movernos a otra rama para guardar esos cambios antes de cambiar de rama. git stash apply - cuando vuelves a una rama recuperas los cambios sin hacer commit que se guardaron en esa rama. volver a estado anterior git reset --hard HEAD~5 - elimina los ultimos 5 commits git push origin -f - sincroniza la nueva situacion Volver a un commit anterior sin modificar el head # Paso 1: Encuentra el hash del commit git log # Paso 2: Crea una nueva rama como backup (opcional pero recomendado) git checkout -b nueva-rama # Paso 3: Actualiza el directorio de trabajo al estado del commit # Reemplaza <commit-id> con el hash del commit al que deseas volver git checkout <commit-id> . # Paso 4: A\u00f1ade los cambios al \u00edndice (si es necesario) git add . # Paso 5: Haz un nuevo commit (si es necesario) git commit -m \"Revertir al estado del commit <commit-id>\" # Paso 6: Empuja los cambios al repositorio remoto (si es necesario) git push origin nueva-rama Reducir el tama\u00f1o del directorio .git","title":"GIT"},{"location":"varios/#mkdocs","text":"Instalacion apt-get install python-pip pip list --outdated -lista paquetes que se pueden actualizar pip install mkdocs pip install --upgrade mkdocs -actualizar mkdocs instalar mas temas pip install mkdocs-bootstrap pip install mkdocs-bootswatch pip install mkdocs-material pip install mkdocs-alabaster pip install mkdocs-cinder Configuracion mkdocs new my-project cd my-project $ mkdocs serve Running at: http://127.0.0.1:8000/ Comandos mkdocs build - crea un directorio site con todo el contenido estatico que se subira al servidor mkdocs build --clean - limpia lo que sobra de antes mkdocs build -d ruta/donde/gustes - crea el resultado y con el nombre gustes Ejemplo mkdocs.yml site_name: Chuletas google_analytics: [\"UA-114956807-1\", \"auto\"] repo_url: https://github.com/jolav/chuletas strict: true nav: - 'Menu': 'index.md' - 'HTML': 'html.md' - 'CSS': 'css.md' - 'Front End': 'frontend.md' - 'Javascript': 'javascript.md' - 'Javascript snippets': 'javascript-snippets.md' - 'Reactjs': 'reactjs.md' - 'Vuejs': 'vuejs.md' - 'Nodejs con Expressjs': 'nodejs-expressjs.md' - 'Nodejs snippets': 'nodejs-snippets.md' - 'Nodejs Bases de Datos': 'nodejs-bases-de-datos.md' - 'Golang': 'golang.md' - 'Golang web': 'golang-web.md' - 'Golang snippets': 'golang-snippets.md' - 'Golang Bases de Datos': 'golang-bases-de-datos.md' - 'Debian': 'debian.md' - 'Varios': 'varios.md' #theme: alabaster #theme_dir: \"chuletas-theme\" theme: name: alabaster custom_dir: chuletas-theme site_dir: 'chuletas' docs_dir: 'docs' extra_css: - '_extra/css/extra.css' extra_javascript: - '_extra/js/highlight.pack.js' extra: logo: '_img/chuletas128.png' include_toc: true","title":"MKDOCS"},{"location":"varios/#glitchcom","text":"Plantilla package.json { \"name\": \"sp500\", \"version\": \"0.1.11\", \"description\": \"betazone finance sp500 stock real time data\", \"main\": \"sp.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"start\": \"node sp.js\" }, \"engines\": { \"node\": \"8.x\" }, \"author\": \"jolav\", \"license\": \"BSD-3-Clause\", \"repository\": { \"type\": \"git\", \"url\": \"git+https://github.com/jolav/betazone.git\" }, \"bugs\": { \"url\": \"https://github.com/jolav/betazone/issues\" }, \"homepage\": \"https://github.com/jolav/betazone#readme\", \"dependencies\": { \"express\": \"^4.16.2\", \"dotenv\": \"^5.0.0\", } }","title":"GLITCH.COM"},{"location":"varios/#expresiones-regulares","text":"Flags Se a\u00f1aden despues de la expresion regular para indicar algo /expReg/i - ignora mayusculas o minusculas /expReg/g - repetir la busqueda a traves de la cadena entera Basicos . - cualquier cosa \\s - espacio en blanco \\S - cualquiera menos espacio en blanco \\d - numero \\D - no numero \\w - caracter alfanumerico (a-z, A-Z, 0-9) \\W - no caracter alfanumerico \\t - tabulador \\r - retorno de carro \\n - nueva linea Limites ^ - Comienzo de cadena o de multilinea \\A - Comienzo de cadena $ - Fin de cadena o fin de multilinea \\Z - Fin de cadena \\b - Palabra limite , \"\\bcat\\b\" pilla en \"cat in the hat\" pero no en \"locate\" \\B - No es una palabra limite \\< - Comienzo de palabra \\> - Fin de palabra Grupos y rangos Los rangos son inclusive (X|Y) - X o Y, ejemplo \\b(cat|dog)s\\b pilla \"cats\" o \"dogs\" (...) - Grupos [abc] - Rango (\"a\" \u00f3 \"b\" \u00f3 \"c\") [^abc] - No (\"a\" \u00f3 \"b\" \u00f3 \"c\") [a-h] - Minuscula entre la \"a\" y la \"h\" [A-H] - Mayucula entre la \"a\" y la \"h\" [3-6] - Numero entre 3 y 6 ambos inclusive Cuantificadores Por defecto los cuantificadores solo se aplican a un caracter, para aplicarlo a mas usar (...) para especificar la cadena buscada X* - 0 \u00f3 mas repeticiones de X X+ - 1 \u00f3 mas repeticiones de X X? - 0 \u00f3 instancias de X, vamos que es opcional X{m} - exactamente m instancias de X X{m,} - al menos m instancias de X X{m,n} - entre m y n instancias(incluidas) de X Especiales {}[]()^$.|*+?\\ y - entre corchetes deben ser escapados con contrabarra \\","title":"EXPRESIONES REGULARES"},{"location":"varios/#javascript","text":"En Javascript las expresiones regulares han de estar en una sola linea. Los espacios en blanco son significativos Delimitadas por barras / var expreg = /ab+c/; var expreg = new RegExp('/ab+c/'); expreg.test(variableATestarConLaexpresionRegular) // da true o false Metodos regexp.exec(string) Si la expresion regular casa con el string devuelve un array array[0] es la subcadena que casa con la expresion regular array[1] el texto capturado por el primer grupo array[2] el texto capturado por el segundo grupo array[n] el texto capturado por el n grupo Si la expresion regular tiene una bandera g la busqueda empieza en la posicion regexp.lastIndex (inicialmente cero). Si la busqueda es exitosa regexp.lastIndex pasara a ser el siguiente caracter tras la coincidencia. Si falla pasa a 0. Esto permite buscar varias coincidencias en una sola cadena regexp.test(string) Si la expresion regular casa con el string devuelve true, si no false var b = /&.+;/.test('frank & beans'); // b is true string.replace(expreg, nueva) - en la cadena string reemplaza lo que casa con la expresion regular por la string nueva string.match(regexp) - busca la regexp en la cadena string y devuelve las coincidencias en un array var str = \"The rain in SPAIN stays mainly in the plain\"; var res = str.match(/ain/g); console.log(res) // [ 'ain', 'ain', 'ain' ]","title":"Javascript"},{"location":"varios/#expreg-comunes","text":".replace(/\\s+/g, \"\") - Elimina todos los espacios en blancos .replace(/\\s/g, \"loQueSea\") - Reemplaza todos los espacios en blanco por loQueSea /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ - direccion de correo valida Aqui","title":"ExpReg Comunes"}]}